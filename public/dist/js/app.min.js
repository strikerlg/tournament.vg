!function(){"use strict";angular.module("vg.app",["ngAnimate","ui.router","firebase","validation.match","ordinal","ngFileUpload","ngImgur"])}(),function(){"use strict";function e(e,t){t.otherwise("/"),e.state("index",{url:"/",views:{header:{templateUrl:"app/header/homeHeader.htm",controller:"HeaderController as header",data:{headerType:"tall"}},content:{templateUrl:"app/home/home.htm",controller:"HomeController as home"}}}).state("registerOrLogin",{url:"/registerOrLogin",views:{header:{templateUrl:"/app/header/homeHeader.htm",controller:"HeaderController as header",data:{headerType:"tall"}},content:{templateUrl:"/app/home/reg.htm",controller:"RegController as reg"}}}).state("profile",{url:"/profile/:username",views:{header:{templateUrl:"/app/header/homeHeader.htm",controller:"HeaderController as header",data:{headerType:"tall"}},content:{templateUrl:"/app/home/profile.htm",controller:"ProfileController as profile"}}}).state("leaderboard",{url:"/leaderboard",views:{header:{templateUrl:"/app/header/homeHeader.htm",controller:"HeaderController as header",data:{headerType:"tall"}},content:{templateUrl:"/app/home/leaderboard.htm",controller:"LeaderboardController as leaderboard"}}}).state("eventMain",{url:"/event/:eventName/main",views:{header:{templateUrl:"/app/header/homeHeader.htm",controller:"HeaderController as header",data:{headerType:"tall"}},content:{templateUrl:"/app/event/main.htm",controller:"EventMainController as event"}}}).state("customizeAvatar",{url:"/customizeAvatar",views:{header:{templateUrl:"/app/header/homeHeader.htm",controller:"HeaderController as header",data:{headerType:"tall"}},content:{templateUrl:"/app/home/avatar.htm",controller:"AvatarController as avatar"}},resolve:{currentAuth:["AuthWrapper",function(e){return e.$requireAuth()}]}}).state("passwordChange",{url:"/passwordChange",views:{header:{templateUrl:"/app/header/homeHeader.htm",controller:"HeaderController as header",data:{headerType:"tall"}},content:{templateUrl:"/app/home/passwordChange.htm",controller:"PasswordChangeController as pwchange"}},resolve:{currentAuth:["AuthWrapper",function(e){return e.$requireAuth()}]}}).state("eventGame",{url:"/event/:eventName/game/:gameName",views:{header:{templateUrl:"/app/header/homeHeader.htm",controller:"HeaderController as header",data:{headerType:"tall"}},content:{templateUrl:"/app/event/game.htm",controller:"EventGameController as game"}}})}angular.module("vg.app").constant("FIREBASEDATA",{FBURL:"https://wolfscontests.firebaseio.com"}).config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e,t,r,a,n,o){e.$on("$stateChangeError",function(e,t,a,n,o,i){"AUTH_REQUIRED"===i&&r.go("registerOrLogin")}),e.$on("$stateChangeSuccess",function(){if(n.$getAuth()){var t=n.$getAuth(),r=new Firebase(o.FBURL),i=a(r.child("users").child(t.uid));i.$bindTo(e,"profile").then(function(t){e.unbindFunction=t})}})}angular.module("vg.app").run(e),e.$inject=["$rootScope","$location","$state","$firebaseObject","AuthWrapper","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,r,a,n,o){function i(t){var r=e.defer(),a=!1,n=new Firebase(o.FBURL+"/users");return n.once("value",function(e){e.forEach(function(e){e.val().userName===t&&(a=!0)}),r.resolve(a)}),r.promise}function l(t,r,a){var i=e.defer();return n.$createUser({email:t,password:r}).then(function(e){new Firebase(o.FBURL).child("users/"+e.uid).set({userName:a,role:"User"},function(e){return console.error(e),e.code}),new Firebase(o.FBURL).child("avatars").child(a).set("http://api.adorable.io/avatars/42/"+a),n.$authWithPassword({email:t,password:r}).then(function(){i.resolve("ACCOUNT_CREATED")})})["catch"](function(e){console.error(e),"EMAIL_TAKEN"===e.code&&i.resolve(e.code)}),i.promise}function s(t,r){var a=e.defer();return n.$authWithPassword({email:t,password:r}).then(function(e){a.resolve("LOGIN_SUCCESS")})["catch"](function(e){"INVALID_USER"===e.code?a.resolve("INVALID_USER"):"INVALID_PASSWORD"===e.code&&a.resolve("INVALID_PASSWORD")}),a.promise}function c(){n.$unauth(),t.unbindFunction(),r.go("index")}this.checkIfUserExists=i,this.createNewUser=l,this.loginToAccount=s,this.logOut=c}angular.module("vg.app").service("authService",e),e.$inject=["$q","$rootScope","$state","$firebaseObject","AuthWrapper","FIREBASEDATA"]}(),function(){"use strict";function e(e,t){var r=new Firebase(t.FBURL);return e(r)}angular.module("vg.app").factory("AuthWrapper",e),e.$inject=["$firebaseAuth","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,r,a,n){function o(e){c(e).then(function(t){var a=new Firebase(n.FBURL),o=r(a.child("standings").child(e));o.$loaded().then(function(){t.forEach(function(e){o[e.key]=e.position}),o.$save()})})}function i(t){var a=e.defer(),o=new Firebase(n.FBURL),i=r(o.child("contests").child(t).child("properties"));return a.resolve(i),a.promise}function l(t,r){{var a=e.defer();new Firebase(n.FBURL)}return s(t).then(function(e){e.forEach(function(e){e.camelName===r&&a.resolve(e)})}),a.promise}function s(t){var r=e.defer(),o=new Firebase(n.FBURL),i=a(o.child("contests").child(t).child("activeGames"));return i.$loaded().then(function(){r.resolve(i)}),r.promise}function c(r){var a=e.defer(),n={};return s(r).then(function(e){var r=e;r.forEach(function(e){if(e.scores){var r=$.map(e.scores,function(e){return e});r=t("orderBy")(r,"-score");for(var a=12,o=0;o<r.length;o++)n[r[o].userName]||(n[r[o].userName]={points:0}),n[r[o].userName].points+=a,a>0&&(a-=1)}}),n=t("orderObjectBy")(n,"points",!0);for(var o=!1,i=0,l=0;l<n.length;l++)if(n[l-1]&&n[l].points&&n[l-1].points)n[l].position=n[l].points===n[l-1].points?n[l-1].position:l+1;else if(0===l)n[l].position=1;else{if(!o){var s=n[l-1].points;n.forEach(function(e){e.points===s&&(i+=1)}),o=!0}n[l].position=n.length+1-i}a.resolve(n)}),a.promise}function u(t){var r=e.defer(),o=new Firebase(n.FBURL),i=a(o.child("contests").child(t).child("scores"));return r.resolve(i),r.promise}function d(r,a,n){var o=e.defer(),i=[];return a.forEach(function(e){if(e.scores){var r=$.map(e.scores,function(e){return e});r=t("orderBy")(r,"-score");for(var a=12,o=0;o<r.length;o++){if(r[o].userName===n){var l=e;l.position=o+1,l.score=r[o].score,l.pointsEarned=a,l.inpUrl=r[o].inpUrl?r[o].inpUrl:null,l.twitchUrl=r[o].twitchUrl?r[o].twitchUrl:null,l.mameVersion=r[o].mameVersion?r[o].mameVersion:null,i.push(l),a=12;break}a>0&&(a-=1)}}}),o.resolve(i),o.promise}this.createMultiGameFinalStandings=o,this.getEventProperties=i,this.getGameData=l,this.getGamesList=s,this.getMultiGameLeaderboard=c,this.getSingleGameLeaderboard=u,this.getPlayerScores=d}angular.module("vg.app").service("eventService",e),e.$inject=["$q","$filter","$firebaseObject","$firebaseArray","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,r,a,n,o,i,l){function s(){var e=new Firebase(l.FBURL);c.eventProperties=o.getEventProperties(c.eventName),o.getGameData(c.eventName,c.gameName).then(function(t){c.gameData=t,c.gameScores=n(e.child("contests").child(c.eventName).child("activeGames").child(c.gameData.$id).child("scores"))})}a(function(){angular.element("#contentView").css("opacity","1").css("position","inherit")},410);var c=this;c.eventName=r.eventName,c.gameName=r.gameName,c.initGamePage=s}angular.module("vg.app").controller("EventGameController",e),e.$inject=["$scope","$filter","$stateParams","$timeout","$firebaseArray","eventService","authService","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,r,a,n,o,i,l,s,c,u){function d(){angular.element("#gameModal").closeModal()}function m(){angular.element("#multiGameLeaderboardModal").closeModal()}function p(){angular.element("#playerModal").closeModal()}function h(){c.createTeam(P.eventName,P.newTeam).then(function(){Materialize.toast("Team "+P.newTeam.shortName+" created.",4e3),P.newTeam=null})}function f(e,r){var a;if(r>11)return a=0;a=12-r;var n=t("orderBy")(P.gameScores,"-score");return n[r-1]&&n[r-1].score===e.score&&(a+=1),a}function v(){P.gameList.forEach(function(e){if(e.scores){var r=$.map(e.scores,function(e){return e});r=t("orderBy")(r,"-score"),e.firstScore=r[0]}})}function g(e){angular.element("#playerModal").closeModal(),a.go("profile",{username:e})}function b(){i.getEventProperties(P.eventName).then(function(e){P.eventProperties=e,P.eventProperties.$loaded().then(function(){P.eventProperties.format.multiGame?(i.getGamesList(P.eventName).then(function(e){P.gameList=e,v()}),i.getMultiGameLeaderboard(P.eventName).then(function(e){var t=e;P.leaderboardLength=t.length,P.summarizedLeaderboard=t.slice(0,8)})):i.getSingleGameLeaderboard(P.eventName).then(function(e){var t=e;P.leaderboardLength=t.length,P.summarizedLeaderboard=t}),P.eventProperties.format.teamBased&&c.getTeamList(P.eventName).then(function(e){P.teamList=e})})}),s.getAvatarData().then(function(e){P.avatarData=e})}function w(){angular.element("#badgesModal").openModal(),angular.element("#badgesModalContent").scrollTop(0)}function A(e){var t=new Firebase(u.FBURL);i.getGameData(P.eventName,e).then(function(e){P.gameData=e,P.gameScores=o(t.child("contests").child(P.eventName).child("activeGames").child(P.gameData.$id).child("scores"))}),angular.element("#gameModal").openModal(),angular.element("#gameModalContent").scrollTop(0)}function E(){angular.element("#managementModal").openModal(),angular.element("#managementModalContent").scrollTop(0)}function L(){i.getMultiGameLeaderboard(P.eventName).then(function(e){P.completeLeaderboard=e}),angular.element("#multiGameLeaderboardModal").openModal(),angular.element("#multiGameLeaderboardModalContent").scrollTop(0)}function U(e){P.focusPlayer=e,i.getPlayerScores(P.eventName,P.gameList,P.focusPlayer).then(function(e){P.playerScores=e}),angular.element("#playerModal").openModal(),angular.element("#playerModalContent").scrollTop(0)}function S(e){p(),n(function(){A(e)},450)}function F(e){d(),n(function(){U(e)},450)}function M(e){m(),n(function(){U(e)},450)}function C(){angular.element("#rulesModal").openModal()}n(function(){$(".collapsible").collapsible({accordion:!0}),$("ul.tabs").tabs()},1e3),n(function(){$(".collapsible").collapsible({accordion:!0}),$("ul.tabs").tabs()},3e3);var P=this;P.eventName=r.eventName,P.closeGameModal=d,P.closeMultiGameLeaderboardModal=m,P.closePlayerModal=p,P.createTeam=h,P.determinePoints=f,P.getFirstPlaceScores=v,P.goToPlayerProfile=g,P.initEvent=b,P.openBadgesModal=w,P.openGameModal=A,P.openGameModalFromPlayerModal=S,P.openManagementModal=E,P.openMultiGameLeaderboardModal=L,P.openPlayerModal=U,P.openPlayerModalFromGameModal=F,P.openPlayerModalFromLeaderboardModal=M,P.openRulesModal=C}angular.module("vg.app").controller("EventMainController",e),e.$inject=["$scope","$filter","$stateParams","$state","$timeout","$firebaseArray","eventService","authService","profileService","teamService","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,r,a){function n(t,n){var o=e.defer(),i=new Firebase(a.FBURL),l=r(i.child("contests").child(t).child("teamPool"));return l.$loaded().then(function(){l[n.shortName]={fullName:n.formalName},l.$save(),o.resolve()}),o.promise}function o(r){var n=e.defer(),o=new Firebase(a.FBURL),i=t(o.child("contests").child(r).child("teamPool"));return i.$loaded().then(function(){n.resolve(i)}),n.promise}this.createTeam=n,this.getTeamList=o}angular.module("vg.app").service("teamService",e),e.$inject=["$q","$firebaseArray","$firebaseObject","FIREBASEDATA"]}(),function(){"use strict";function e(){function e(e,t,r){}var r={bindToController:!0,controller:t,controllerAs:"vm",link:e,restrict:"E",templateUrl:"./app/eventComponents/gamesList.directive.htm",scope:{data:"=",openGameFunction:"="}};return r}function t(){}angular.module("vg.app").directive("vgGamesList",e)}(),function(){"use strict";function e(){function e(e,t,r){}var r={bindToController:!0,controller:t,controllerAs:"vm",link:e,restrict:"E",templateUrl:"./app/eventComponents/multiGameLeaderboard.directive.htm",scope:{data:"=",avatarData:"=",completeLength:"=",openPlayerFunction:"=",openLeaderboardFunction:"="}};return r}function t(){}angular.module("vg.app").directive("vgMultiGameLeaderboard",e)}(),function(){"use strict";function e(){function e(e,t,r){}var r={bindToController:!0,controller:t,controllerAs:"vm",link:e,restrict:"E",templateUrl:"./app/eventComponents/singleGameLeaderboard.directive.htm",scope:{data:"=",avatarData:"=",completeLength:"=",openLeaderboardFunction:"="}};return r}function t(){}angular.module("vg.app").directive("vgSingleGameLeaderboard",e)}(),function(){"use strict";function e(){function e(e,t,r){}var r={bindToController:!0,controller:t,controllerAs:"vm",link:e,restrict:"E",templateUrl:"./app/eventComponents/stickyMessage.directive.htm",scope:{properties:"="}};return r}function t(e){}angular.module("vg.app").directive("vgStickyMessage",e),t.$inject=["$timeout"]}(),function(){"use strict";function e(e,t,r,a,n){function o(){n.logOut(),r.location.reload()}e(function(){angular.element(".dropdown-button").dropdown({inDuration:300,outDuration:225,constrain_width:!1,hover:!1,gutter:-114,belowOrigin:!0})},400);var i=this;i.headerType=a.current.views.header.data.headerType,i.logOut=o}angular.module("vg.app").controller("HeaderController",e),e.$inject=["$timeout","$rootScope","$window","$state","authService"]}(),function(){"use strict";function e(){return function(e,t,r){var a=[];return angular.forEach(e,function(e,t){e.key=t,a.push(e)}),a.sort(function(e,r){return e[t]>r[t]?1:-1}),r&&a.reverse(),a}}angular.module("vg.app").filter("orderObjectBy",e)}(),function(){"use strict";function e(e,t,r,a,n,o,i){function l(){i.getAvatarData().then(function(e){c.avatarData=e}),a(function(){i.getBadgesData(e.profile.userName).then(function(e){c.badgesData=e})},500)}function s(){c.disableButton=!0,o.setAPIKey("Client-ID f53d6d5833b07bc"),o.upload(c.file).then(function(r){i.saveAvatarLink(r[0].link,e.profile.userName),Materialize.toast("Your avatar was uploaded",4e3),a(function(){t.go("index")},1e3)})}var c=this;c.initAvatar=l,c.uploadAvatar=s}angular.module("vg.app").controller("AvatarController",e),e.$inject=["$rootScope","$state","$stateParams","$timeout","Upload","imgur","profileService"]}(),function(){"use strict";function e(e,t){t(function(){angular.element("#contentView").css("opacity","1").css("position","inherit")},310)}angular.module("vg.app").controller("HomeController",e),e.$inject=["$scope","$timeout"]}(),function(){"use strict";function e(e,t,r,a,n){function o(){var t=e.defer(),a=new Firebase(n.FBURL),o=r(a.child("badges"));return o.$loaded(function(){t.resolve(o)}),t.promise}var i=this;t(function(){angular.element("#contentView").css("opacity","1").css("position","inherit")},310),o().then(function(e){i.profileScoreData=e}),a.getAvatarData().then(function(e){i.avatarData=e})}angular.module("vg.app").controller("LeaderboardController",e),e.$inject=["$q","$timeout","$firebaseArray","profileService","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,r,a){function n(){e.pwChangeForm.$valid&&a.$changePassword({email:a.$getAuth().password.email,oldPassword:o.inputCurrentPassword,newPassword:o.inputNewPassword}).then(function(){Materialize.toast("Your password was changed.",4e3),t(function(){r.go("index")},1e3)})["catch"](function(e){"INVALID_PASSWORD"===e.code&&(o.showChangePasswordMessage=!0)})}var o=this;t(function(){angular.element("#contentView").css("opacity","1").css("position","inherit")},310),o.submitChangePassword=n}angular.module("vg.app").controller("PasswordChangeController",e),e.$inject=["$scope","$timeout","$state","AuthWrapper"]}(),function(){"use strict";function e(e,t,r,a,n,o,i,l,s){function c(){l.getUserData(t.username).then(function(e){u.profileData=e,l.getTournamentHistory(u.profileData).then(function(e){var r=e;u.eventStandings=l.getTournamentStandings(r,t.username)})}),l.getAvatarData().then(function(e){u.avatarData=e}),l.getBadgesData(t.username).then(function(e){u.badgesData=e})}a(function(){angular.element("#contentView").css("opacity","1").css("position","inherit"),$(".collapsible").collapsible({accordion:!0})},410);var u=this;u.initProfile=c}angular.module("vg.app").controller("ProfileController",e),e.$inject=["$scope","$stateParams","$q","$timeout","$state","$firebaseArray","authService","profileService","eventService"]}(),function(){"use strict";function e(e,t,r,a,n,o){function i(){var e=t.defer(),r=new Firebase(o.FBURL),n=a(r.child("avatars"));return n.$loaded(function(){e.resolve(n)}),e.promise}function l(e){var r=t.defer(),n=new Firebase(o.FBURL),i=a(n.child("badges").child(e));return i.$loaded(function(){r.resolve(i)}),r.promise}function s(e){var r=t.defer(),a=(new Firebase(o.FBURL),[]);for(var n in e.pledgedTo)a.push(n);return r.resolve(a),r.promise}function c(e,t){var r=new Firebase(o.FBURL),i=[];return e.forEach(function(e){n.getEventProperties(e).then(function(n){n.$loaded().then(function(){if("concluded"===n.state){var o=a(r.child("standings").child(e));o.$loaded().then(function(){i.push(o[t]?{name:n.name,premier:n.premier?!0:null,shortName:e,state:"concluded",color:n.color,position:o[t]}:{name:n.name,premier:n.premier?!0:null,shortName:e,state:"concluded",color:n.color,position:-1})})}else("inprogress"===n.state||"upcoming"===n.state)&&i.push({name:n.name,premier:n.premier?!0:null,shortName:e,color:n.color,state:n.state})})})}),i}function u(e){var a=t.defer(),n=new Firebase(o.FBURL),i=r(n.child("users"));return i.$loaded(function(){i.forEach(function(t){t.userName===e&&a.resolve(t)})}),a.promise}function d(e,t){var r=new Firebase(o.FBURL),n=a(r.child("avatars"));n.$loaded(function(){n[t]=e,n.$save()})}this.getAvatarData=i,this.getBadgesData=l,this.getTournamentHistory=s,this.getTournamentStandings=c,this.getUserData=u,this.saveAvatarLink=d}angular.module("vg.app").service("profileService",e),e.$inject=["$rootScope","$q","$firebaseArray","$firebaseObject","eventService","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,r,a,n,o,i,l){function s(){i.loginToAccount(d.loginEmail,d.loginPassword).then(function(e){if(d.showInvalidUserError=!1,d.showInvalidPasswordError=!1,"LOGIN_SUCCESS"===e)n.go("index");else{if("INVALID_USER"===e)return void(d.showInvalidUserError=!0);"INVALID_PASSWORD"===e&&(d.showInvalidPasswordError=!0)}})}function c(){return d.loginEmail?void l.$resetPassword({email:d.loginEmail}).then(function(){d.showPasswordResetEmailMessage=!1,Materialize.toast("A password reset email has been sent to "+d.loginEmail+".",4e3)}):void(d.showPasswordResetEmailMessage=!0)}function u(){i.checkIfUserExists(d.newUsername).then(function(e){return d.showDuplicateUserError=!1,d.showEmailTakenError=!1,e?void(d.showDuplicateUserError=!0):void i.createNewUser(d.newEmail,d.newPassword,d.newUsername).then(function(e){return"EMAIL_TAKEN"===e?void(d.showEmailTakenError=!0):void("ACCOUNT_CREATED"===e&&n.go("profile",{username:d.newUsername}))})})}r(function(){angular.element("#contentView").css("opacity","1").css("position","inherit")},410);var d=this;d.loginToAccount=s,d.passwordReset=c,d.submitNewAccount=u}angular.module("vg.app").controller("RegController",e),e.$inject=["$scope","$rootScope","$timeout","$window","$state","$firebaseObject","authService","AuthWrapper"]}();
//# sourceMappingURL=data:application/json;base64,