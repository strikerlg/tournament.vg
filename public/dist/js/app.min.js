!function(){"use strict";angular.module("vg.app",["ngAnimate","ui.router","firebase","validation.match","ordinal","ngFileUpload","ngImgur"])}(),function(){"use strict";function e(e,t){t.otherwise("/"),e.state("index",{url:"/",views:{header:{templateUrl:"app/header/homeHeader.htm",controller:"HeaderController as header",data:{headerType:"tall"}},content:{templateUrl:"app/home/home.htm",controller:"HomeController as home"}}}).state("registerOrLogin",{url:"/registerOrLogin",views:{header:{templateUrl:"/app/header/homeHeader.htm",controller:"HeaderController as header",data:{headerType:"tall"}},content:{templateUrl:"/app/home/reg.htm",controller:"RegController as reg"}}}).state("profile",{url:"/profile/:username",views:{header:{templateUrl:"/app/header/homeHeader.htm",controller:"HeaderController as header",data:{headerType:"tall"}},content:{templateUrl:"/app/home/profile.htm",controller:"ProfileController as profile"}}}).state("leaderboard",{url:"/leaderboard",views:{header:{templateUrl:"/app/header/homeHeader.htm",controller:"HeaderController as header",data:{headerType:"tall"}},content:{templateUrl:"/app/home/leaderboard.htm",controller:"LeaderboardController as leaderboard"}}}).state("eventMain",{url:"/event/:eventName/main",views:{header:{templateUrl:"/app/header/homeHeader.htm",controller:"HeaderController as header",data:{headerType:"tall"}},content:{templateUrl:"/app/event/main.htm",controller:"EventMainController as event"}}}).state("customizeAvatar",{url:"/customizeAvatar",views:{header:{templateUrl:"/app/header/homeHeader.htm",controller:"HeaderController as header",data:{headerType:"tall"}},content:{templateUrl:"/app/home/avatar.htm",controller:"AvatarController as avatar"}},resolve:{currentAuth:["AuthWrapper",function(e){return e.$requireAuth()}]}}).state("passwordChange",{url:"/passwordChange",views:{header:{templateUrl:"/app/header/homeHeader.htm",controller:"HeaderController as header",data:{headerType:"tall"}},content:{templateUrl:"/app/home/passwordChange.htm",controller:"PasswordChangeController as pwchange"}},resolve:{currentAuth:["AuthWrapper",function(e){return e.$requireAuth()}]}}).state("eventGame",{url:"/event/:eventName/game/:gameName",views:{header:{templateUrl:"/app/header/homeHeader.htm",controller:"HeaderController as header",data:{headerType:"tall"}},content:{templateUrl:"/app/event/game.htm",controller:"EventGameController as game"}}})}angular.module("vg.app").config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e,t,r,a,n){e.$on("$stateChangeError",function(e,t,a,n,o,i){"AUTH_REQUIRED"===i&&r.go("registerOrLogin")}),e.$on("$stateChangeSuccess",function(){if(n.$getAuth()){var t=n.$getAuth(),r=new Firebase("https://wolfscontests.firebaseio.com"),o=a(r.child("users").child(t.uid));o.$bindTo(e,"profile").then(function(t){e.unbindFunction=t})}})}angular.module("vg.app").run(e),e.$inject=["$rootScope","$location","$state","$firebaseObject","AuthWrapper"]}(),function(){"use strict";function e(e,t,r,a,n){function o(t){var r=e.defer(),a=!1,n=new Firebase(c+"/users");return n.once("value",function(e){e.forEach(function(e){e.val().userName===t&&(a=!0)}),r.resolve(a)}),r.promise}function i(t,r,a){var o=e.defer();return n.$createUser({email:t,password:r}).then(function(e){new Firebase(c).child("users/"+e.uid).set({userName:a,role:"User"},function(e){return console.error(e),e.code}),new Firebase(c).child("avatars").child(a).set("http://api.adorable.io/avatars/42/"+a),n.$authWithPassword({email:t,password:r}).then(function(){o.resolve("ACCOUNT_CREATED")})})["catch"](function(e){console.error(e),"EMAIL_TAKEN"===e.code&&o.resolve(e.code)}),o.promise}function s(t,r){var a=e.defer();return n.$authWithPassword({email:t,password:r}).then(function(e){a.resolve("LOGIN_SUCCESS")})["catch"](function(e){"INVALID_USER"===e.code?a.resolve("INVALID_USER"):"INVALID_PASSWORD"===e.code&&a.resolve("INVALID_PASSWORD")}),a.promise}function l(){n.$unauth(),t.unbindFunction(),r.go("index")}var c="https://wolfscontests.firebaseio.com";this.checkIfUserExists=o,this.createNewUser=i,this.loginToAccount=s,this.logOut=l}angular.module("vg.app").service("authService",e),e.$inject=["$q","$rootScope","$state","$firebaseObject","AuthWrapper"]}(),function(){"use strict";function e(e){var t=new Firebase("https://wolfscontests.firebaseio.com");return e(t)}angular.module("vg.app").factory("AuthWrapper",e),e.$inject=["$firebaseAuth"]}(),function(){"use strict";function e(e,t,r,a){function n(e){l(e).then(function(t){console.debug(t);var a=new Firebase(d),n=r(a.child("standings").child(e));n.$loaded().then(function(){t.forEach(function(e){n[e.key]=e.position}),n.$save()})})}function o(t){var a=e.defer(),n=new Firebase(d),o=r(n.child("contests").child(t).child("properties"));return a.resolve(o),a.promise}function i(t,r){{var a=e.defer();new Firebase(d)}return s(t).then(function(e){e.forEach(function(e){e.camelName===r&&a.resolve(e)})}),a.promise}function s(t){var r=e.defer(),n=new Firebase(d),o=a(n.child("contests").child(t).child("activeGames"));return o.$loaded().then(function(){r.resolve(o)}),r.promise}function l(r){var a=e.defer(),n={};return s(r).then(function(e){var r=e;r.forEach(function(e){if(e.scores){var r=$.map(e.scores,function(e){return e});r=t("orderBy")(r,"-score");for(var a=12,o=0;o<r.length;o++)n[r[o].userName]||(n[r[o].userName]={points:0}),n[r[o].userName].points+=a,a>0&&(a-=1)}}),n=t("orderObjectBy")(n,"points",!0);for(var o=!1,i=0,s=0;s<n.length;s++)if(n[s-1]&&n[s].points&&n[s-1].points)n[s].position=n[s].points===n[s-1].points?n[s-1].position:s+1;else if(0===s)n[s].position=1;else{if(!o){var l=n[s-1].points;n.forEach(function(e){e.points===l&&(i+=1)}),o=!0}n[s].position=n.length+1-i}a.resolve(n)}),a.promise}function c(t){var r=e.defer(),n=new Firebase(d),o=a(n.child("contests").child(t).child("scores"));return r.resolve(o),r.promise}function u(r,a,n){var o=e.defer(),i=[];return a.forEach(function(e){if(e.scores){var r=$.map(e.scores,function(e){return e});r=t("orderBy")(r,"-score");for(var a=12,o=0;o<r.length;o++){if(r[o].userName===n){var s=e;s.position=o+1,s.score=r[o].score,s.pointsEarned=a,s.inpUrl=r[o].inpUrl?r[o].inpUrl:null,s.twitchUrl=r[o].twitchUrl?r[o].twitchUrl:null,s.mameVersion=r[o].mameVersion?r[o].mameVersion:null,i.push(s),a=12;break}a>0&&(a-=1)}}}),o.resolve(i),o.promise}var d="https://wolfscontests.firebaseio.com";this.createMultiGameFinalStandings=n,this.getEventProperties=o,this.getGameData=i,this.getGamesList=s,this.getMultiGameLeaderboard=l,this.getSingleGameLeaderboard=c,this.getPlayerScores=u}angular.module("vg.app").service("eventService",e),e.$inject=["$q","$filter","$firebaseObject","$firebaseArray"]}(),function(){"use strict";function e(e,t,r,a,n,o,i){function s(){var e=new Firebase(l);c.eventProperties=o.getEventProperties(c.eventName),o.getGameData(c.eventName,c.gameName).then(function(t){c.gameData=t,c.gameScores=n(e.child("contests").child(c.eventName).child("activeGames").child(c.gameData.$id).child("scores")),console.debug(c.gameData),console.debug(c.gameScores)})}a(function(){angular.element("#contentView").css("opacity","1").css("position","inherit")},410);var l="https://wolfscontests.firebaseio.com",c=this;c.eventName=r.eventName,c.gameName=r.gameName,c.initGamePage=s}angular.module("vg.app").controller("EventGameController",e),e.$inject=["$scope","$filter","$stateParams","$timeout","$firebaseArray","eventService","authService"]}(),function(){"use strict";function e(e,t,r,a,n,o,i,s,l){function c(){angular.element("#gameModal").closeModal()}function u(){angular.element("#multiGameLeaderboardModal").closeModal()}function d(){angular.element("#playerModal").closeModal()}function m(e,r){var a;if(r>11)return a=0;a=12-r;var n=t("orderBy")(P.gameScores,"-score");return n[r-1]&&n[r-1].score===e.score&&(a+=1),a}function p(){P.gameList.forEach(function(e){if(e.scores){var r=$.map(e.scores,function(e){return e});r=t("orderBy")(r,"-score"),e.firstScore=r[0]}})}function f(e){angular.element("#playerModal").closeModal(),a.go("profile",{username:e})}function h(){i.getEventProperties(P.eventName).then(function(e){P.eventProperties=e,P.eventProperties.$loaded().then(function(){P.eventProperties.format.multiGame?(i.getGamesList(P.eventName).then(function(e){P.gameList=e,p()}),i.getMultiGameLeaderboard(P.eventName).then(function(e){var t=e;P.leaderboardLength=t.length,P.summarizedLeaderboard=t.slice(0,8)})):i.getSingleGameLeaderboard(P.eventName).then(function(e){var t=e;console.debug(t),P.leaderboardLength=t.length,P.summarizedLeaderboard=t,console.debug(P.summarizedLeaderboard)})})}),l.getAvatarData().then(function(e){P.avatarData=e})}function v(){angular.element("#badgesModal").openModal(),angular.element("#badgesModalContent").scrollTop(0)}function g(e){var t=new Firebase(M);i.getGameData(P.eventName,e).then(function(e){P.gameData=e,P.gameScores=o(t.child("contests").child(P.eventName).child("activeGames").child(P.gameData.$id).child("scores"))}),angular.element("#gameModal").openModal(),angular.element("#gameModalContent").scrollTop(0)}function w(){i.getMultiGameLeaderboard(P.eventName).then(function(e){P.completeLeaderboard=e}),angular.element("#multiGameLeaderboardModal").openModal(),angular.element("#multiGameLeaderboardModalContent").scrollTop(0)}function b(e){P.focusPlayer=e,i.getPlayerScores(P.eventName,P.gameList,P.focusPlayer).then(function(e){P.playerScores=e}),angular.element("#playerModal").openModal(),angular.element("#playerModalContent").scrollTop(0)}function A(e){d(),n(function(){g(e)},450)}function C(e){c(),n(function(){b(e)},450)}function E(e){u(),n(function(){b(e)},450)}function S(){angular.element("#rulesModal").openModal()}var M="https://wolfscontests.firebaseio.com",P=this;P.eventName=r.eventName,P.closeGameModal=c,P.closeMultiGameLeaderboardModal=u,P.closePlayerModal=d,P.determinePoints=m,P.getFirstPlaceScores=p,P.goToPlayerProfile=f,P.initEvent=h,P.openBadgesModal=v,P.openGameModal=g,P.openGameModalFromPlayerModal=A,P.openMultiGameLeaderboardModal=w,P.openPlayerModal=b,P.openPlayerModalFromGameModal=C,P.openPlayerModalFromLeaderboardModal=E,P.openRulesModal=S}angular.module("vg.app").controller("EventMainController",e),e.$inject=["$scope","$filter","$stateParams","$state","$timeout","$firebaseArray","eventService","authService","profileService"]}(),function(){"use strict";function e(){function e(e,t,r){}var r={bindToController:!0,controller:t,controllerAs:"vm",link:e,restrict:"E",templateUrl:"./app/eventComponents/gamesList.directive.htm",scope:{data:"=",openGameFunction:"="}};return r}function t(){}angular.module("vg.app").directive("vgGamesList",e)}(),function(){"use strict";function e(){function e(e,t,r){}var r={bindToController:!0,controller:t,controllerAs:"vm",link:e,restrict:"E",templateUrl:"./app/eventComponents/multiGameLeaderboard.directive.htm",scope:{data:"=",avatarData:"=",completeLength:"=",openPlayerFunction:"=",openLeaderboardFunction:"="}};return r}function t(){}angular.module("vg.app").directive("vgMultiGameLeaderboard",e)}(),function(){"use strict";function e(){function e(e,t,r){}var r={bindToController:!0,controller:t,controllerAs:"vm",link:e,restrict:"E",templateUrl:"./app/eventComponents/singleGameLeaderboard.directive.htm",scope:{data:"=",avatarData:"=",completeLength:"=",openLeaderboardFunction:"="}};return r}function t(){}angular.module("vg.app").directive("vgSingleGameLeaderboard",e)}(),function(){"use strict";function e(){function e(e,t,r){}var r={bindToController:!0,controller:t,controllerAs:"vm",link:e,restrict:"E",templateUrl:"./app/eventComponents/stickyMessage.directive.htm",scope:{properties:"="}};return r}function t(e){}angular.module("vg.app").directive("vgStickyMessage",e),t.$inject=["$timeout"]}(),function(){"use strict";function e(e,t,r,a,n){function o(){n.logOut(),r.location.reload()}e(function(){angular.element(".dropdown-button").dropdown({inDuration:300,outDuration:225,constrain_width:!1,hover:!1,gutter:-114,belowOrigin:!0})},400);var i=this;i.headerType=a.current.views.header.data.headerType,i.logOut=o}angular.module("vg.app").controller("HeaderController",e),e.$inject=["$timeout","$rootScope","$window","$state","authService"]}(),function(){"use strict";function e(){return function(e,t,r){var a=[];return angular.forEach(e,function(e,t){e.key=t,a.push(e)}),a.sort(function(e,r){return e[t]>r[t]?1:-1}),r&&a.reverse(),a}}angular.module("vg.app").filter("orderObjectBy",e)}(),function(){"use strict";function e(e,t,r,a,n,o,i){function s(){i.getAvatarData().then(function(e){c.avatarData=e}),a(function(){i.getBadgesData(e.profile.userName).then(function(e){c.badgesData=e})},500)}function l(){c.disableButton=!0,o.setAPIKey("Client-ID f53d6d5833b07bc"),o.upload(c.file).then(function(r){i.saveAvatarLink(r[0].link,e.profile.userName),Materialize.toast("Your avatar was uploaded",4e3),a(function(){t.go("index")},1e3)})}var c=this;c.initAvatar=s,c.uploadAvatar=l}angular.module("vg.app").controller("AvatarController",e),e.$inject=["$rootScope","$state","$stateParams","$timeout","Upload","imgur","profileService"]}(),function(){"use strict";function e(e,t){t(function(){angular.element("#contentView").css("opacity","1").css("position","inherit")},310)}angular.module("vg.app").controller("HomeController",e),e.$inject=["$scope","$timeout"]}(),function(){"use strict";function e(e,t,r,a){function n(){var t=e.defer(),a=new Firebase(o),n=r(a.child("badges"));return n.$loaded(function(){t.resolve(n)}),t.promise}var o="https://wolfscontests.firebaseio.com",i=this;t(function(){angular.element("#contentView").css("opacity","1").css("position","inherit")},310),n().then(function(e){i.profileScoreData=e}),a.getAvatarData().then(function(e){i.avatarData=e})}angular.module("vg.app").controller("LeaderboardController",e),e.$inject=["$q","$timeout","$firebaseArray","profileService"]}(),function(){"use strict";function e(e,t,r,a){function n(){e.pwChangeForm.$valid&&a.$changePassword({email:a.$getAuth().password.email,oldPassword:o.inputCurrentPassword,newPassword:o.inputNewPassword}).then(function(){Materialize.toast("Your password was changed.",4e3),t(function(){r.go("index")},1e3)})["catch"](function(e){"INVALID_PASSWORD"===e.code&&(o.showChangePasswordMessage=!0)})}var o=this;t(function(){angular.element("#contentView").css("opacity","1").css("position","inherit")},310),o.submitChangePassword=n}angular.module("vg.app").controller("PasswordChangeController",e),e.$inject=["$scope","$timeout","$state","AuthWrapper"]}(),function(){"use strict";function e(e,t,r,a,n,o,i,s,l){function c(){s.getUserData(t.username).then(function(e){u.profileData=e,s.getTournamentHistory(u.profileData).then(function(e){var r=e;u.eventStandings=s.getTournamentStandings(r,t.username)})}),s.getAvatarData().then(function(e){u.avatarData=e}),s.getBadgesData(t.username).then(function(e){u.badgesData=e})}a(function(){angular.element("#contentView").css("opacity","1").css("position","inherit"),$(".collapsible").collapsible({accordion:!0})},410);var u=this;u.initProfile=c}angular.module("vg.app").controller("ProfileController",e),e.$inject=["$scope","$stateParams","$q","$timeout","$state","$firebaseArray","authService","profileService","eventService"]}(),function(){"use strict";function e(e,t,r,a,n){function o(){var e=t.defer(),r=new Firebase(d),n=a(r.child("avatars"));return n.$loaded(function(){e.resolve(n)}),e.promise}function i(e){var r=t.defer(),n=new Firebase(d),o=a(n.child("badges").child(e));return o.$loaded(function(){r.resolve(o)}),r.promise}function s(e){var r=t.defer(),a=(new Firebase(d),[]);for(var n in e.pledgedTo)a.push(n);return r.resolve(a),r.promise}function l(e,t){var r=new Firebase(d),o=[];return e.forEach(function(e){n.getEventProperties(e).then(function(n){n.$loaded().then(function(){if("concluded"===n.state){var i=a(r.child("standings").child(e));i.$loaded().then(function(){o.push(i[t]?{name:n.name,premier:n.premier?!0:null,shortName:e,state:"concluded",color:n.color,position:i[t]}:{name:n.name,premier:n.premier?!0:null,shortName:e,state:"concluded",color:n.color,position:-1})})}else("inprogress"===n.state||"upcoming"===n.state)&&o.push({name:n.name,premier:n.premier?!0:null,shortName:e,color:n.color,state:n.state})})})}),o}function c(e){var a=t.defer(),n=new Firebase(d),o=r(n.child("users"));return o.$loaded(function(){o.forEach(function(t){t.userName===e&&a.resolve(t)})}),a.promise}function u(e,t){var r=new Firebase(d),n=a(r.child("avatars"));n.$loaded(function(){n[t]=e,n.$save()})}var d="https://wolfscontests.firebaseio.com";this.getAvatarData=o,this.getBadgesData=i,this.getTournamentHistory=s,this.getTournamentStandings=l,this.getUserData=c,this.saveAvatarLink=u}angular.module("vg.app").service("profileService",e),e.$inject=["$rootScope","$q","$firebaseArray","$firebaseObject","eventService"]}(),function(){"use strict";function e(e,t,r,a,n,o,i,s){function l(){i.loginToAccount(d.loginEmail,d.loginPassword).then(function(e){if(d.showInvalidUserError=!1,d.showInvalidPasswordError=!1,"LOGIN_SUCCESS"===e)n.go("index");else{if("INVALID_USER"===e)return void(d.showInvalidUserError=!0);"INVALID_PASSWORD"===e&&(d.showInvalidPasswordError=!0)}})}function c(){return d.loginEmail?void s.$resetPassword({email:d.loginEmail}).then(function(){d.showPasswordResetEmailMessage=!1,Materialize.toast("A password reset email has been sent to "+d.loginEmail+".",4e3)}):void(d.showPasswordResetEmailMessage=!0)}function u(){i.checkIfUserExists(d.newUsername).then(function(e){return d.showDuplicateUserError=!1,d.showEmailTakenError=!1,e?void(d.showDuplicateUserError=!0):void i.createNewUser(d.newEmail,d.newPassword,d.newUsername).then(function(e){return"EMAIL_TAKEN"===e?void(d.showEmailTakenError=!0):void("ACCOUNT_CREATED"===e&&n.go("profile",{username:d.newUsername}))})})}r(function(){angular.element("#contentView").css("opacity","1").css("position","inherit")},410);var d=this;d.loginToAccount=l,d.passwordReset=c,d.submitNewAccount=u}angular.module("vg.app").controller("RegController",e),e.$inject=["$scope","$rootScope","$timeout","$window","$state","$firebaseObject","authService","AuthWrapper"]}();
//# sourceMappingURL=data:application/json;base64,