!function(){"use strict";angular.module("vg.app",["ngAnimate","ui.router","firebase","validation.match","ordinal","ngFileUpload","ngImgur"])}(),function(){"use strict";function e(e,t){t.otherwise("/"),e.state("home",{url:"/",templateUrl:"app/home/home.htm",controller:"HomeController as home"}).state("registerOrLogin",{url:"/registerOrLogin",templateUrl:"/app/home/reg.htm",controller:"RegController as reg"}).state("profile",{url:"/profile/:username",templateUrl:"/app/home/profile.htm",controller:"ProfileController as profile"}).state("leaderboard",{url:"/leaderboard",templateUrl:"/app/home/leaderboard.htm",controller:"LeaderboardController as leaderboard"}).state("event",{url:"/event/:eventName/main",templateUrl:"/app/event/main.htm",controller:"EventMainController as event"}).state("customizeAvatar",{url:"/customizeAvatar",templateUrl:"/app/home/avatar.htm",controller:"AvatarController as avatar",resolve:{currentAuth:["AuthWrapper",function(e){return e.$requireAuth()}]}}).state("changePassword",{url:"/changePassword",templateUrl:"/app/home/changePassword.htm",controller:"ChangePasswordController as pwchange",resolve:{currentAuth:["AuthWrapper",function(e){return e.$requireAuth()}]}})}angular.module("vg.app").constant("FIREBASEDATA",{FBURL:"https://wolfscontests.firebaseio.com"}).config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e,t,r,n,o,a){e.$on("$stateChangeError",function(e,t,n,o,a,i){"AUTH_REQUIRED"===i&&r.go("registerOrLogin")}),e.$on("$stateChangeSuccess",function(){if(o.$getAuth()){var t=o.$getAuth(),r=new Firebase(a.FBURL),i=n(r.child("users").child(t.uid));i.$bindTo(e,"profile").then(function(t){e.unbindFunction=t})}})}angular.module("vg.app").run(e),e.$inject=["$rootScope","$location","$state","$firebaseObject","AuthWrapper","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,r,n,o,a,i,s){function c(t){var r=e.defer(),a=!1,i=new n.Firebase(s.FBURL+"/users");return i.once("value",function(e){o(function(){e.forEach(function(e){e.val().userName===t&&(a=!0)}),r.resolve(a)})}),r.promise}function l(t,r,n){var o=e.defer();return i.$createUser({email:t,password:r}).then(function(e){new Firebase(s.FBURL).child("users/"+e.uid).set({userName:n,role:"User"},function(e){return console.error(e),e.code}),new Firebase(s.FBURL).child("avatars").child(n).set("http://api.adorable.io/avatars/42/"+n),i.$authWithPassword({email:t,password:r}).then(function(){o.resolve("ACCOUNT_CREATED")})})["catch"](function(e){console.error(e),"EMAIL_TAKEN"===e.code&&o.resolve(e.code)}),o.promise}function u(t,r){var n=e.defer();return i.$authWithPassword({email:t,password:r}).then(function(e){n.resolve("LOGIN_SUCCESS")})["catch"](function(e){"INVALID_USER"===e.code?n.resolve("INVALID_USER"):"INVALID_PASSWORD"===e.code&&n.resolve("INVALID_PASSWORD")}),n.promise}function d(){i.$unauth(),t.unbindFunction()}this.testData="hello world!",this.checkIfUserExists=c,this.createNewUser=l,this.loginToAccount=u,this.logOut=d}angular.module("vg.app").service("authService",e),e.$inject=["$q","$rootScope","$state","$window","$timeout","$firebaseObject","AuthWrapper","FIREBASEDATA"]}(),function(){"use strict";function e(e,t){var r=new Firebase(t.FBURL);return e(r)}angular.module("vg.app").factory("AuthWrapper",e),e.$inject=["$firebaseAuth","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,r,n,o){function a(e){m(e).then(function(t){var n=new Firebase(o.FBURL),a=r(n.child("standings").child(e));a.$loaded().then(function(){t.forEach(function(e){a[e.key]=e.position}),a.$save()})})}function i(t){var n=e.defer(),a=new Firebase(o.FBURL),i=r(a.child("contests").child(t).child("properties"));return n.resolve(i),n.promise}function s(){return w}function c(){A.forEach(function(e){if(e.scores){var r=$.map(e.scores,function(e){return e});r=t("orderBy")(r,"-score"),e.firstScore=r[0]}})}function l(t,r){{var n=e.defer();new Firebase(o.FBURL)}return d(t).then(function(e){e.forEach(function(e){e.camelName===r&&n.resolve(e)})}),n.promise}function u(){return A}function d(t){var r=e.defer(),a=new Firebase(o.FBURL),i=n(a.child("contests").child(t).child("activeGames"));return i.$loaded().then(function(){r.resolve(i)}),r.promise}function f(){return E}function m(r){var n=e.defer(),o={};return d(r).then(function(e){var r=e;r.forEach(function(e){if(e.scores){var r=$.map(e.scores,function(e){return e});r=t("orderBy")(r,"-score");for(var n=12,a=0;a<r.length;a++)o[r[a].userName]||(o[r[a].userName]={points:0}),o[r[a].userName].points+=n,n>0&&(n-=1)}}),o=t("orderObjectBy")(o,"points",!0);for(var a=!1,i=0,s=0;s<o.length;s+=1)if(o[s-1]&&o[s].points&&o[s-1].points)o[s].position=o[s].points===o[s-1].points?o[s-1].position:s+1;else if(0===s)o[s].position=1;else{if(!a){for(var c=o[s-1].points,l=0;l<o.length;l+=1)o[l].points===c&&(i+=1);a=!0}o[s].position=o.length+1-i}n.resolve(o)}),n.promise}function p(t){var r=e.defer(),a=new Firebase(o.FBURL),i=n(a.child("contests").child(t).child("scores"));return r.resolve(i),r.promise}function h(){return L}function v(){return S}function g(r,n,o){var a=e.defer(),i=[];return n.forEach(function(e){if(e.scores){var r=$.map(e.scores,function(e){return e});r=t("orderBy")(r,"-score");for(var n=12,a=0;a<r.length;a++){if(r[a].userName===o){var s=e;s.position=a+1,s.score=r[a].score,s.pointsEarned=n,s.inpUrl=r[a].inpUrl?r[a].inpUrl:null,s.twitchUrl=r[a].twitchUrl?r[a].twitchUrl:null,s.mameVersion=r[a].mameVersion?r[a].mameVersion:null,i.push(s),n=12;break}n>0&&(n-=1)}}}),a.resolve(i),a.promise}function b(e){var t=new Firebase(o.FBURL),n=r(t.child("contests").child(e).child("properties"));n.$loaded().then(function(){w=n,w.format.multiGame?(d(e).then(function(e){A=e,c()}),m(e).then(function(e){var t=e;E=t.length,L=t.slice(0,8)})):p(e).then(function(e){var t=e;E=t.length,L=t}),w.format.teamBased&&teamService.getTeamList(vm.eventName).then(function(e){S=e})})}var w=null,A=null,E=null,L=null,S=null;this.createMultiGameFinalStandings=a,this.getEventProperties=i,this.getEventPropertiesObject=s,this.getGameData=l,this.getGameListObject=u,this.getGamesList=d,this.getLeaderboardLengthValue=f,this.getMultiGameLeaderboard=m,this.getPlayerScores=g,this.getSingleGameLeaderboard=p,this.getSummarizedLeaderboardObject=h,this.getTeamListObject=v,this.loadEventProperties=b}angular.module("vg.app").service("eventService",e),e.$inject=["$q","$filter","$firebaseObject","$firebaseArray","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,r,n,o,a,i,s,c,l,u){function d(){angular.element(".modal").closeModal()}function f(){l.createTeam(w.eventName,w.newTeam).then(function(){Materialize.toast("Team "+w.newTeam.shortName+" created.",4e3),w.newTeam=null})}function m(e,r){var n;if(r>11)return n=0;n=12-r;var o=t("orderBy")(w.gameScores,"-score");return o[r-1]&&o[r-1].score===e.score&&(n+=1),n}function p(e){d(),n.go("profile",{username:e})}function h(){i.loadEventProperties(w.eventName),c.getAvatarData().then(function(e){w.avatarData=e}),e.$watchCollection(function(){return i.getEventPropertiesObject()},function(e){w.eventProperties=e},!0),e.$watchCollection(function(){return i.getTeamListObject()},function(e){w.teamList=e},!0)}function v(e){1===angular.element("#lean-overlay").length?(d(),o(function(){angular.element(e).openModal(),angular.element(e+"Content").scrollTop(0)},450)):(angular.element(e).openModal(),angular.element(e+"Content").scrollTop(0))}function g(e){var t=new Firebase(u.FBURL);i.getGameData(w.eventName,e).then(function(e){w.gameData=e,w.gameScores=a(t.child("contests").child(w.eventName).child("activeGames").child(w.gameData.$id).child("scores"))}),v("#gameModal")}function $(){i.getMultiGameLeaderboard(w.eventName).then(function(e){w.completeLeaderboard=e}),v("#multiGameLeaderboardModal")}function b(e){w.focusPlayer=e,i.getPlayerScores(w.eventName,w.gameList,w.focusPlayer).then(function(e){w.playerScores=e}),v("#playerModal")}var w=this;w.eventName=r.eventName,w.createTeam=f,w.determinePoints=m,w.goToPlayerProfile=p,w.openGameModal=g,w.openModal=v,w.openMultiGameLeaderboardModal=$,w.openPlayerModal=b,h()}angular.module("vg.app").controller("EventMainController",e),e.$inject=["$scope","$filter","$stateParams","$state","$timeout","$firebaseArray","eventService","authService","profileService","teamService","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,r,n){function o(t,o){var a=e.defer(),i=new Firebase(n.FBURL),s=r(i.child("contests").child(t).child("teamPool"));return s.$loaded().then(function(){s[o.shortName]={fullName:o.formalName},s.$save(),a.resolve()}),a.promise}function a(r){var o=e.defer(),a=new Firebase(n.FBURL),i=t(a.child("contests").child(r).child("teamPool"));return i.$loaded().then(function(){o.resolve(i)}),o.promise}this.createTeam=o,this.getTeamList=a}angular.module("vg.app").service("teamService",e),e.$inject=["$q","$firebaseArray","$firebaseObject","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,r,n,o){function a(){e(function(){angular.element(".dropdown-button").dropdown({inDuration:300,outDuration:225,constrain_width:!1,hover:!1,gutter:-114,belowOrigin:!0})},400),e(function(){angular.element(".dropdown-button").dropdown({inDuration:300,outDuration:225,constrain_width:!1,hover:!1,gutter:-114,belowOrigin:!0})},1e3)}function i(){o.logOut(),r.location.reload()}var s=this;s.logOut=i,a()}angular.module("vg.app").controller("HeaderController",e),e.$inject=["$timeout","$rootScope","$window","$state","authService"]}(),function(){"use strict";function e(){return function(e,t,r){var n=[];return angular.forEach(e,function(e,t){e.key=t,n.push(e)}),n.sort(function(e,r){return e[t]>r[t]?1:-1}),r&&n.reverse(),n}}angular.module("vg.app").filter("orderObjectBy",e)}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"E",templateUrl:"./app/eventComponents/gamesList.directive.htm",scope:!1,transclude:!1};return e}function t(e,t){e.$watchCollection(function(){return t.getGameListObject()},function(t){e.$parent.$parent.event.gameList=t},!0)}angular.module("vg.app").directive("vgGamesList",e),t.$inject=["$scope","eventService"]}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"E",templateUrl:"./app/eventComponents/multiGameLeaderboard.directive.htm",scope:!1,transclude:!1};return e}function t(e,t){e.$watchCollection(function(){return t.getLeaderboardLengthValue()},function(t){e.$parent.$parent.event.leaderboardLength=t},!0),e.$watchCollection(function(){return t.getSummarizedLeaderboardObject()},function(t){e.$parent.$parent.event.summarizedLeaderboard=t},!0)}angular.module("vg.app").directive("vgMultiGameLeaderboard",e),t.$inject=["$scope","eventService"]}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"E",templateUrl:"./app/eventComponents/singleGameLeaderboard.directive.htm",scope:!1,transclude:!1};return e}function t(e,t){e.$watchCollection(function(){return t.getLeaderboardLengthValue()},function(t){e.$parent.$parent.event.leaderboardLength=t},!0),e.$watchCollection(function(){return t.getSummarizedLeaderboardObject()},function(t){e.$parent.$parent.event.summarizedLeaderboard=t},!0)}angular.module("vg.app").directive("vgSingleGameLeaderboard",e),t.$inject=["$scope","eventService"]}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"E",templateUrl:"./app/eventComponents/stickyMessage.directive.htm",scope:{properties:"="}};return e}function t(e){}angular.module("vg.app").directive("vgStickyMessage",e),t.$inject=["$timeout"]}(),function(){"use strict";function e(e,t,r,n,o,a,i){function s(){i.getAvatarData().then(function(e){l.avatarData=e}),n(function(){i.getBadgesData(e.profile.userName).then(function(e){l.badgesData=e})},500)}function c(){l.disableButton=!0,a.setAPIKey("Client-ID f53d6d5833b07bc"),a.upload(l.file).then(function(r){i.saveAvatarLink(r[0].link,e.profile.userName),Materialize.toast("Your avatar was uploaded",4e3),n(function(){t.go("home")},1e3)})}var l=this;l.uploadAvatar=c,s()}angular.module("vg.app").controller("AvatarController",e),e.$inject=["$rootScope","$state","$stateParams","$timeout","Upload","imgur","profileService"]}(),function(){"use strict";function e(e,t,r,n){function o(){e.pwChangeForm.$valid&&n.$changePassword({email:n.$getAuth().password.email,oldPassword:a.inputCurrentPassword,newPassword:a.inputNewPassword}).then(function(){Materialize.toast("Your password was changed.",4e3),t(function(){r.go("home")},1e3)})["catch"](function(e){"INVALID_PASSWORD"===e.code&&(a.showChangePasswordMessage=!0)})}var a=this;a.submitChangePassword=o}angular.module("vg.app").controller("ChangePasswordController",e),e.$inject=["$scope","$timeout","$state","AuthWrapper"]}(),function(){"use strict";function e(e,t){}angular.module("vg.app").controller("HomeController",e),e.$inject=["$scope","$timeout"]}(),function(){"use strict";function e(e,t,r,n,o){function a(){i().then(function(e){s.profileScoreData=e}),n.getAvatarData().then(function(e){s.avatarData=e})}function i(){var t=e.defer(),n=new Firebase(o.FBURL),a=r(n.child("badges"));return a.$loaded(function(){t.resolve(a)}),t.promise}var s=this;a()}angular.module("vg.app").controller("LeaderboardController",e),e.$inject=["$q","$timeout","$firebaseArray","profileService","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,r,n,o,a,i,s,c){function l(){s.getUserData(t.username).then(function(e){u.profileData=e,s.getTournamentHistory(u.profileData).then(function(e){var r=e;u.eventStandings=s.getTournamentStandings(r,t.username)})}),s.getAvatarData().then(function(e){u.avatarData=e}),s.getBadgesData(t.username).then(function(e){u.badgesData=e,n(function(){angular.element(".collapsible").collapsible({accordion:!0})},200)})}var u=this;l()}angular.module("vg.app").controller("ProfileController",e),e.$inject=["$scope","$stateParams","$q","$timeout","$state","$firebaseArray","authService","profileService","eventService"]}(),function(){"use strict";function e(e,t,r,n,o,a){function i(){var e=t.defer(),r=new Firebase(a.FBURL),o=n(r.child("avatars"));return o.$loaded(function(){e.resolve(o)}),e.promise}function s(e){var r=t.defer(),o=new Firebase(a.FBURL),i=n(o.child("badges").child(e));return i.$loaded(function(){r.resolve(i)}),r.promise}function c(e){var r=t.defer(),n=(new Firebase(a.FBURL),[]);for(var o in e.pledgedTo)n.push(o);return r.resolve(n),r.promise}function l(e,t){var r=new Firebase(a.FBURL),i=[];return e.forEach(function(e){o.getEventProperties(e).then(function(o){o.$loaded().then(function(){if("concluded"===o.state){var a=n(r.child("standings").child(e));a.$loaded().then(function(){i.push(a[t]?{name:o.name,premier:o.premier?!0:null,shortName:e,state:"concluded",color:o.color,position:a[t]}:{name:o.name,premier:o.premier?!0:null,shortName:e,state:"concluded",color:o.color,position:-1})})}else("inprogress"===o.state||"upcoming"===o.state)&&i.push({name:o.name,premier:o.premier?!0:null,shortName:e,color:o.color,state:o.state})})})}),i}function u(e){var n=t.defer(),o=new Firebase(a.FBURL),i=r(o.child("users"));return i.$loaded(function(){i.forEach(function(t){t.userName===e&&n.resolve(t)})}),n.promise}function d(e,t){var r=new Firebase(a.FBURL),o=n(r.child("avatars"));o.$loaded(function(){o[t]=e,o.$save()})}this.getAvatarData=i,this.getBadgesData=s,this.getTournamentHistory=c,this.getTournamentStandings=l,this.getUserData=u,this.saveAvatarLink=d}angular.module("vg.app").service("profileService",e),e.$inject=["$rootScope","$q","$firebaseArray","$firebaseObject","eventService","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,r,n,o,a,i,s){function c(){i.loginToAccount(d.loginEmail,d.loginPassword).then(function(e){if(d.showInvalidUserError=!1,d.showInvalidPasswordError=!1,"LOGIN_SUCCESS"===e)o.go("home");else{if("INVALID_USER"===e)return void(d.showInvalidUserError=!0);"INVALID_PASSWORD"===e&&(d.showInvalidPasswordError=!0)}})}function l(){return d.loginEmail?void s.$resetPassword({email:d.loginEmail}).then(function(){d.showPasswordResetEmailMessage=!1,Materialize.toast("A password reset email has been sent to "+d.loginEmail+".",4e3)}):void(d.showPasswordResetEmailMessage=!0)}function u(){i.checkIfUserExists(d.newUsername).then(function(e){return d.showDuplicateUserError=!1,d.showEmailTakenError=!1,e?void(d.showDuplicateUserError=!0):void i.createNewUser(d.newEmail,d.newPassword,d.newUsername).then(function(e){return"EMAIL_TAKEN"===e?void(d.showEmailTakenError=!0):void("ACCOUNT_CREATED"===e&&o.go("profile",{username:d.newUsername}))})})}var d=this;d.loginToAccount=c,d.passwordReset=l,d.submitNewAccount=u}angular.module("vg.app").controller("RegController",e),e.$inject=["$scope","$rootScope","$timeout","$window","$state","$firebaseObject","authService","AuthWrapper"]}();
//# sourceMappingURL=data:application/json;base64,