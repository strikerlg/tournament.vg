!function(){"use strict";angular.module("vg.app",["ngAnimate","ui.router","firebase","validation.match","ordinal","ngFileUpload","ngImgur"])}(),function(){"use strict";function e(e,t){t.otherwise("/"),e.state("home",{url:"/",templateUrl:"app/home/home.htm",controller:"HomeController as home"}).state("registerOrLogin",{url:"/registerOrLogin",templateUrl:"/app/home/reg.htm",controller:"RegController as reg"}).state("profile",{url:"/profile/:username",templateUrl:"/app/home/profile.htm",controller:"ProfileController as profile"}).state("leaderboard",{url:"/leaderboard",templateUrl:"/app/home/leaderboard.htm",controller:"LeaderboardController as leaderboard"}).state("event",{url:"/event/:eventName/main",templateUrl:"/app/event/main.htm",controller:"EventMainController as event"}).state("customizeAvatar",{url:"/customizeAvatar",templateUrl:"/app/home/avatar.htm",controller:"AvatarController as avatar",resolve:{currentAuth:["AuthWrapper",function(e){return e.$requireAuth()}]}}).state("changePassword",{url:"/changePassword",templateUrl:"/app/home/changePassword.htm",controller:"ChangePasswordController as pwchange",resolve:{currentAuth:["AuthWrapper",function(e){return e.$requireAuth()}]}})}angular.module("vg.app").constant("FIREBASEDATA",{FBURL:"https://wolfscontests.firebaseio.com"}).config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e,t,r,n,o,a){e.$on("$stateChangeError",function(e,t,n,o,a,i){"AUTH_REQUIRED"===i&&r.go("registerOrLogin")}),e.$on("$stateChangeSuccess",function(){if(o.$getAuth()){var t=o.$getAuth(),r=new Firebase(a.FBURL),i=n(r.child("users").child(t.uid));i.$bindTo(e,"profile").then(function(t){e.unbindFunction=t})}})}angular.module("vg.app").run(e),e.$inject=["$rootScope","$location","$state","$firebaseObject","AuthWrapper","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,r,n,o,a){function i(t){var r=e.defer(),n=!1,o=new Firebase(a.FBURL+"/users");return o.once("value",function(e){e.forEach(function(e){e.val().userName===t&&(n=!0)}),r.resolve(n)}),r.promise}function s(t,r,n){var i=e.defer();return o.$createUser({email:t,password:r}).then(function(e){new Firebase(a.FBURL).child("users/"+e.uid).set({userName:n,role:"User"},function(e){return console.error(e),e.code}),new Firebase(a.FBURL).child("avatars").child(n).set("http://api.adorable.io/avatars/42/"+n),o.$authWithPassword({email:t,password:r}).then(function(){i.resolve("ACCOUNT_CREATED")})})["catch"](function(e){console.error(e),"EMAIL_TAKEN"===e.code&&i.resolve(e.code)}),i.promise}function l(t,r){var n=e.defer();return o.$authWithPassword({email:t,password:r}).then(function(e){n.resolve("LOGIN_SUCCESS")})["catch"](function(e){"INVALID_USER"===e.code?n.resolve("INVALID_USER"):"INVALID_PASSWORD"===e.code&&n.resolve("INVALID_PASSWORD")}),n.promise}function c(){o.$unauth(),t.unbindFunction()}this.checkIfUserExists=i,this.createNewUser=s,this.loginToAccount=l,this.logOut=c}angular.module("vg.app").service("authService",e),e.$inject=["$q","$rootScope","$state","$firebaseObject","AuthWrapper","FIREBASEDATA"]}(),function(){"use strict";function e(e,t){var r=new Firebase(t.FBURL);return e(r)}angular.module("vg.app").factory("AuthWrapper",e),e.$inject=["$firebaseAuth","FIREBASEDATA"]}(),function(){"use strict";function e(){function e(e,t,r){}var r={bindToController:!0,controller:t,controllerAs:"vm",link:e,restrict:"E",templateUrl:"./app/eventComponents/gamesList.directive.htm",scope:{data:"=",openGameFunction:"="}};return r}function t(){}angular.module("vg.app").directive("vgGamesList",e)}(),function(){"use strict";function e(){function e(e,t,r){}var r={bindToController:!0,controller:t,controllerAs:"vm",link:e,restrict:"E",templateUrl:"./app/eventComponents/multiGameLeaderboard.directive.htm",scope:{data:"=",avatarData:"=",completeLength:"=",openPlayerFunction:"=",openLeaderboardFunction:"="}};return r}function t(){}angular.module("vg.app").directive("vgMultiGameLeaderboard",e)}(),function(){"use strict";function e(){function e(e,t,r){}var r={bindToController:!0,controller:t,controllerAs:"vm",link:e,restrict:"E",templateUrl:"./app/eventComponents/singleGameLeaderboard.directive.htm",scope:{data:"=",avatarData:"=",completeLength:"=",openLeaderboardFunction:"="}};return r}function t(){}angular.module("vg.app").directive("vgSingleGameLeaderboard",e)}(),function(){"use strict";function e(){function e(e,t,r){}var r={bindToController:!0,controller:t,controllerAs:"vm",link:e,restrict:"E",templateUrl:"./app/eventComponents/stickyMessage.directive.htm",scope:{properties:"="}};return r}function t(e){}angular.module("vg.app").directive("vgStickyMessage",e),t.$inject=["$timeout"]}(),function(){"use strict";function e(e,t,r,n,o){function a(e){c(e).then(function(t){var n=new Firebase(o.FBURL),a=r(n.child("standings").child(e));a.$loaded().then(function(){t.forEach(function(e){a[e.key]=e.position}),a.$save()})})}function i(t){var n=e.defer(),a=new Firebase(o.FBURL),i=r(a.child("contests").child(t).child("properties"));return n.resolve(i),n.promise}function s(t,r){{var n=e.defer();new Firebase(o.FBURL)}return l(t).then(function(e){e.forEach(function(e){e.camelName===r&&n.resolve(e)})}),n.promise}function l(t){var r=e.defer(),a=new Firebase(o.FBURL),i=n(a.child("contests").child(t).child("activeGames"));return i.$loaded().then(function(){r.resolve(i)}),r.promise}function c(r){var n=e.defer(),o={};return l(r).then(function(e){var r=e;r.forEach(function(e){if(e.scores){var r=$.map(e.scores,function(e){return e});r=t("orderBy")(r,"-score");for(var n=12,a=0;a<r.length;a++)o[r[a].userName]||(o[r[a].userName]={points:0}),o[r[a].userName].points+=n,n>0&&(n-=1)}}),o=t("orderObjectBy")(o,"points",!0);for(var a=!1,i=0,s=0;s<o.length;s++)if(o[s-1]&&o[s].points&&o[s-1].points)o[s].position=o[s].points===o[s-1].points?o[s-1].position:s+1;else if(0===s)o[s].position=1;else{if(!a){var l=o[s-1].points;o.forEach(function(e){e.points===l&&(i+=1)}),a=!0}o[s].position=o.length+1-i}n.resolve(o)}),n.promise}function u(t){var r=e.defer(),a=new Firebase(o.FBURL),i=n(a.child("contests").child(t).child("scores"));return r.resolve(i),r.promise}function d(r,n,o){var a=e.defer(),i=[];return n.forEach(function(e){if(e.scores){var r=$.map(e.scores,function(e){return e});r=t("orderBy")(r,"-score");for(var n=12,a=0;a<r.length;a++){if(r[a].userName===o){var s=e;s.position=a+1,s.score=r[a].score,s.pointsEarned=n,s.inpUrl=r[a].inpUrl?r[a].inpUrl:null,s.twitchUrl=r[a].twitchUrl?r[a].twitchUrl:null,s.mameVersion=r[a].mameVersion?r[a].mameVersion:null,i.push(s),n=12;break}n>0&&(n-=1)}}}),a.resolve(i),a.promise}this.createMultiGameFinalStandings=a,this.getEventProperties=i,this.getGameData=s,this.getGamesList=l,this.getMultiGameLeaderboard=c,this.getSingleGameLeaderboard=u,this.getPlayerScores=d}angular.module("vg.app").service("eventService",e),e.$inject=["$q","$filter","$firebaseObject","$firebaseArray","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,r,n,o,a,i,s,l,c,u){function d(){angular.element("#gameModal").closeModal()}function m(){angular.element("#multiGameLeaderboardModal").closeModal()}function f(){angular.element("#playerModal").closeModal()}function p(){c.createTeam(D.eventName,D.newTeam).then(function(){Materialize.toast("Team "+D.newTeam.shortName+" created.",4e3),D.newTeam=null})}function h(e,r){var n;if(r>11)return n=0;n=12-r;var o=t("orderBy")(D.gameScores,"-score");return o[r-1]&&o[r-1].score===e.score&&(n+=1),n}function v(){D.gameList.forEach(function(e){if(e.scores){var r=$.map(e.scores,function(e){return e});r=t("orderBy")(r,"-score"),e.firstScore=r[0]}})}function g(e){angular.element("#playerModal").closeModal(),n.go("profile",{username:e})}function b(){i.getEventProperties(D.eventName).then(function(e){D.eventProperties=e,D.eventProperties.$loaded().then(function(){D.eventProperties.format.multiGame?(i.getGamesList(D.eventName).then(function(e){D.gameList=e,v()}),i.getMultiGameLeaderboard(D.eventName).then(function(e){var t=e;D.leaderboardLength=t.length,D.summarizedLeaderboard=t.slice(0,8)})):i.getSingleGameLeaderboard(D.eventName).then(function(e){var t=e;D.leaderboardLength=t.length,D.summarizedLeaderboard=t}),D.eventProperties.format.teamBased&&c.getTeamList(D.eventName).then(function(e){D.teamList=e}),"upcoming"===D.eventProperties.state&&$(".collapsible").collapsible({accordion:!0})})}),l.getAvatarData().then(function(e){D.avatarData=e})}function A(){angular.element("#badgesModal").openModal(),angular.element("#badgesModalContent").scrollTop(0)}function w(e){var t=new Firebase(u.FBURL);i.getGameData(D.eventName,e).then(function(e){D.gameData=e,D.gameScores=a(t.child("contests").child(D.eventName).child("activeGames").child(D.gameData.$id).child("scores"))}),angular.element("#gameModal").openModal(),angular.element("#gameModalContent").scrollTop(0)}function E(){angular.element("#managementModal").openModal(),angular.element("#managementModalContent").scrollTop(0)}function L(){i.getMultiGameLeaderboard(D.eventName).then(function(e){D.completeLeaderboard=e}),angular.element("#multiGameLeaderboardModal").openModal(),angular.element("#multiGameLeaderboardModalContent").scrollTop(0)}function S(e){D.focusPlayer=e,i.getPlayerScores(D.eventName,D.gameList,D.focusPlayer).then(function(e){D.playerScores=e}),angular.element("#playerModal").openModal(),angular.element("#playerModalContent").scrollTop(0)}function U(e){f(),o(function(){w(e)},450)}function F(e){d(),o(function(){S(e)},450)}function M(e){m(),o(function(){S(e)},450)}function P(){angular.element("#rulesModal").openModal()}var D=this;D.eventName=r.eventName,D.closeGameModal=d,D.closeMultiGameLeaderboardModal=m,D.closePlayerModal=f,D.createTeam=p,D.determinePoints=h,D.getFirstPlaceScores=v,D.goToPlayerProfile=g,D.openBadgesModal=A,D.openGameModal=w,D.openGameModalFromPlayerModal=U,D.openManagementModal=E,D.openMultiGameLeaderboardModal=L,D.openPlayerModal=S,D.openPlayerModalFromGameModal=F,D.openPlayerModalFromLeaderboardModal=M,D.openRulesModal=P,b()}angular.module("vg.app").controller("EventMainController",e),e.$inject=["$scope","$filter","$stateParams","$state","$timeout","$firebaseArray","eventService","authService","profileService","teamService","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,r,n){function o(t,o){var a=e.defer(),i=new Firebase(n.FBURL),s=r(i.child("contests").child(t).child("teamPool"));return s.$loaded().then(function(){s[o.shortName]={fullName:o.formalName},s.$save(),a.resolve()}),a.promise}function a(r){var o=e.defer(),a=new Firebase(n.FBURL),i=t(a.child("contests").child(r).child("teamPool"));return i.$loaded().then(function(){o.resolve(i)}),o.promise}this.createTeam=o,this.getTeamList=a}angular.module("vg.app").service("teamService",e),e.$inject=["$q","$firebaseArray","$firebaseObject","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,r,n,o){function a(){e(function(){angular.element(".dropdown-button").dropdown({inDuration:300,outDuration:225,constrain_width:!1,hover:!1,gutter:-114,belowOrigin:!0})},400)}function i(){o.logOut(),r.location.reload()}var s=this;s.logOut=i,a()}angular.module("vg.app").controller("HeaderController",e),e.$inject=["$timeout","$rootScope","$window","$state","authService"]}(),function(){"use strict";function e(){return function(e,t,r){var n=[];return angular.forEach(e,function(e,t){e.key=t,n.push(e)}),n.sort(function(e,r){return e[t]>r[t]?1:-1}),r&&n.reverse(),n}}angular.module("vg.app").filter("orderObjectBy",e)}(),function(){"use strict";function e(e,t,r,n,o,a,i){function s(){i.getAvatarData().then(function(e){c.avatarData=e}),n(function(){i.getBadgesData(e.profile.userName).then(function(e){c.badgesData=e})},500)}function l(){c.disableButton=!0,a.setAPIKey("Client-ID f53d6d5833b07bc"),a.upload(c.file).then(function(r){i.saveAvatarLink(r[0].link,e.profile.userName),Materialize.toast("Your avatar was uploaded",4e3),n(function(){t.go("home")},1e3)})}var c=this;c.uploadAvatar=l,s()}angular.module("vg.app").controller("AvatarController",e),e.$inject=["$rootScope","$state","$stateParams","$timeout","Upload","imgur","profileService"]}(),function(){"use strict";function e(e,t,r,n){function o(){e.pwChangeForm.$valid&&n.$changePassword({email:n.$getAuth().password.email,oldPassword:a.inputCurrentPassword,newPassword:a.inputNewPassword}).then(function(){Materialize.toast("Your password was changed.",4e3),t(function(){r.go("home")},1e3)})["catch"](function(e){"INVALID_PASSWORD"===e.code&&(a.showChangePasswordMessage=!0)})}var a=this;a.submitChangePassword=o}angular.module("vg.app").controller("ChangePasswordController",e),e.$inject=["$scope","$timeout","$state","AuthWrapper"]}(),function(){"use strict";function e(e,t){}angular.module("vg.app").controller("HomeController",e),e.$inject=["$scope","$timeout"]}(),function(){"use strict";function e(e,t,r,n,o){function a(){i().then(function(e){s.profileScoreData=e}),n.getAvatarData().then(function(e){s.avatarData=e})}function i(){var t=e.defer(),n=new Firebase(o.FBURL),a=r(n.child("badges"));return a.$loaded(function(){t.resolve(a)}),t.promise}var s=this;a()}angular.module("vg.app").controller("LeaderboardController",e),e.$inject=["$q","$timeout","$firebaseArray","profileService","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,r,n,o,a,i,s,l){function c(){s.getUserData(t.username).then(function(e){u.profileData=e,s.getTournamentHistory(u.profileData).then(function(e){var r=e;u.eventStandings=s.getTournamentStandings(r,t.username)}),$(".collapsible").collapsible({accordion:!0})}),s.getAvatarData().then(function(e){u.avatarData=e}),s.getBadgesData(t.username).then(function(e){u.badgesData=e})}var u=this;c()}angular.module("vg.app").controller("ProfileController",e),e.$inject=["$scope","$stateParams","$q","$timeout","$state","$firebaseArray","authService","profileService","eventService"]}(),function(){"use strict";function e(e,t,r,n,o,a){function i(){var e=t.defer(),r=new Firebase(a.FBURL),o=n(r.child("avatars"));return o.$loaded(function(){e.resolve(o)}),e.promise}function s(e){var r=t.defer(),o=new Firebase(a.FBURL),i=n(o.child("badges").child(e));return i.$loaded(function(){r.resolve(i)}),r.promise}function l(e){var r=t.defer(),n=(new Firebase(a.FBURL),[]);for(var o in e.pledgedTo)n.push(o);return r.resolve(n),r.promise}function c(e,t){var r=new Firebase(a.FBURL),i=[];return e.forEach(function(e){o.getEventProperties(e).then(function(o){o.$loaded().then(function(){if("concluded"===o.state){var a=n(r.child("standings").child(e));a.$loaded().then(function(){i.push(a[t]?{name:o.name,premier:o.premier?!0:null,shortName:e,state:"concluded",color:o.color,position:a[t]}:{name:o.name,premier:o.premier?!0:null,shortName:e,state:"concluded",color:o.color,position:-1})})}else("inprogress"===o.state||"upcoming"===o.state)&&i.push({name:o.name,premier:o.premier?!0:null,shortName:e,color:o.color,state:o.state})})})}),i}function u(e){var n=t.defer(),o=new Firebase(a.FBURL),i=r(o.child("users"));return i.$loaded(function(){i.forEach(function(t){t.userName===e&&n.resolve(t)})}),n.promise}function d(e,t){var r=new Firebase(a.FBURL),o=n(r.child("avatars"));o.$loaded(function(){o[t]=e,o.$save()})}this.getAvatarData=i,this.getBadgesData=s,this.getTournamentHistory=l,this.getTournamentStandings=c,this.getUserData=u,this.saveAvatarLink=d}angular.module("vg.app").service("profileService",e),e.$inject=["$rootScope","$q","$firebaseArray","$firebaseObject","eventService","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,r,n,o,a,i,s){function l(){i.loginToAccount(d.loginEmail,d.loginPassword).then(function(e){if(d.showInvalidUserError=!1,d.showInvalidPasswordError=!1,"LOGIN_SUCCESS"===e)o.go("home");else{if("INVALID_USER"===e)return void(d.showInvalidUserError=!0);"INVALID_PASSWORD"===e&&(d.showInvalidPasswordError=!0)}})}function c(){return d.loginEmail?void s.$resetPassword({email:d.loginEmail}).then(function(){d.showPasswordResetEmailMessage=!1,Materialize.toast("A password reset email has been sent to "+d.loginEmail+".",4e3)}):void(d.showPasswordResetEmailMessage=!0)}function u(){i.checkIfUserExists(d.newUsername).then(function(e){return d.showDuplicateUserError=!1,d.showEmailTakenError=!1,e?void(d.showDuplicateUserError=!0):void i.createNewUser(d.newEmail,d.newPassword,d.newUsername).then(function(e){return"EMAIL_TAKEN"===e?void(d.showEmailTakenError=!0):void("ACCOUNT_CREATED"===e&&o.go("profile",{username:d.newUsername}))})})}var d=this;d.loginToAccount=l,d.passwordReset=c,d.submitNewAccount=u}angular.module("vg.app").controller("RegController",e),e.$inject=["$scope","$rootScope","$timeout","$window","$state","$firebaseObject","authService","AuthWrapper"]}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5tb2R1bGUuanMiLCJhcHAuY29uZmlnLmpzIiwiYXBwLm1pbi5qcyIsImFwcC5ydW4uanMiLCJhdXRoL2F1dGguc2VydmljZS5qcyIsImF1dGgvYXV0aHdyYXBwZXIuZmFjdG9yeS5qcyIsImV2ZW50Q29tcG9uZW50cy9nYW1lc0xpc3QuZGlyZWN0aXZlLmpzIiwiZXZlbnRDb21wb25lbnRzL211bHRpR2FtZUxlYWRlcmJvYXJkLmRpcmVjdGl2ZS5qcyIsImV2ZW50Q29tcG9uZW50cy9zaW5nbGVHYW1lTGVhZGVyYm9hcmQuZGlyZWN0aXZlLmpzIiwiZXZlbnRDb21wb25lbnRzL3N0aWNreU1lc3NhZ2UuZGlyZWN0aXZlLmpzIiwiZXZlbnQvZXZlbnQuc2VydmljZS5qcyIsImV2ZW50L21haW4uY29udHJvbGxlci5qcyIsImV2ZW50L3RlYW0uc2VydmljZS5qcyIsImhlYWRlci9oZWFkZXIuY29udHJvbGxlci5qcyIsImhlbHBlcnMvb3JkZXJPYmplY3RCeS5maWx0ZXIuanMiLCJob21lL2F2YXRhci5jb250cm9sbGVyLmpzIiwiaG9tZS9jaGFuZ2VQYXNzd29yZC5jb250cm9sbGVyLmpzIiwiaG9tZS9ob21lLmNvbnRyb2xsZXIuanMiLCJob21lL2xlYWRlcmJvYXJkLmNvbnRyb2xsZXIuanMiLCJob21lL3Byb2ZpbGUuY29udHJvbGxlci5qcyIsImhvbWUvcHJvZmlsZS5zZXJ2aWNlLmpzIiwiaG9tZS9yZWcuY29udHJvbGxlci5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJHN0YXRlUHJvdmlkZXIiLCIkdXJsUm91dGVyUHJvdmlkZXIiLCJvdGhlcndpc2UiLCJzdGF0ZSIsInVybCIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlciIsInJlc29sdmUiLCJjdXJyZW50QXV0aCIsIkF1dGhXcmFwcGVyIiwiJHJlcXVpcmVBdXRoIiwiY29uc3RhbnQiLCJGQlVSTCIsIiRpbmplY3QiLCJydW4iLCIkcm9vdFNjb3BlIiwiJGxvY2F0aW9uIiwiJHN0YXRlIiwiJGZpcmViYXNlT2JqZWN0IiwiRklSRUJBU0VEQVRBIiwiJG9uIiwiZXZlbnQiLCJ0b1N0YXRlIiwidG9QYXJhbXMiLCJmcm9tU3RhdGUiLCJmcm9tUGFyYW1zIiwiZXJyb3IiLCJnbyIsIiRnZXRBdXRoIiwiYXV0aERhdGEiLCJyZWYiLCJGaXJlYmFzZSIsInByb2ZpbGVEYXRhIiwiY2hpbGQiLCJ1aWQiLCIkYmluZFRvIiwidGhlbiIsInVuYmluZCIsInVuYmluZEZ1bmN0aW9uIiwiYXV0aFNlcnZpY2UiLCIkcSIsImNoZWNrSWZVc2VyRXhpc3RzIiwiaW5wdXRVc2VybmFtZSIsImRlZmVycmVkIiwiZGVmZXIiLCJkb2VzVXNlckV4aXN0IiwidXNlcnNSZWYiLCJvbmNlIiwiZGF0YVNuYXBzaG90IiwiZm9yRWFjaCIsInVzZXIiLCJ2YWwiLCJ1c2VyTmFtZSIsInByb21pc2UiLCJjcmVhdGVOZXdVc2VyIiwiaW5wdXRFbWFpbCIsImlucHV0UGFzc3dvcmQiLCIkY3JlYXRlVXNlciIsImVtYWlsIiwicGFzc3dvcmQiLCJ1c2VyRGF0YSIsInNldCIsInJvbGUiLCJlcnJvckRhdGEiLCJjb25zb2xlIiwiY29kZSIsIiRhdXRoV2l0aFBhc3N3b3JkIiwibG9naW5Ub0FjY291bnQiLCJsb2dPdXQiLCIkdW5hdXRoIiwidGhpcyIsInNlcnZpY2UiLCIkZmlyZWJhc2VBdXRoIiwiZmFjdG9yeSIsInZnR2FtZXNMaXN0IiwibGluayIsInNjb3BlIiwiZWxlbWVudCIsImF0dHJzIiwiZGlyZWN0aXZlIiwiYmluZFRvQ29udHJvbGxlciIsIkdhbWVzTGlzdENvbnRyb2xsZXIiLCJjb250cm9sbGVyQXMiLCJyZXN0cmljdCIsImRhdGEiLCJvcGVuR2FtZUZ1bmN0aW9uIiwidmdNdWx0aUdhbWVMZWFkZXJib2FyZCIsIk11bHRpR2FtZUxlYWRlcmJvYXJkQ29udHJvbGxlciIsImF2YXRhckRhdGEiLCJjb21wbGV0ZUxlbmd0aCIsIm9wZW5QbGF5ZXJGdW5jdGlvbiIsIm9wZW5MZWFkZXJib2FyZEZ1bmN0aW9uIiwidmdTaW5nbGVHYW1lTGVhZGVyYm9hcmQiLCJTaW5nbGVHYW1lTGVhZGVyYm9hcmRDb250cm9sbGVyIiwidmdTdGlja3lNZXNzYWdlIiwiU3RpY2t5TWVzc2FnZUNvbnRyb2xsZXIiLCJwcm9wZXJ0aWVzIiwiJHRpbWVvdXQiLCJldmVudFNlcnZpY2UiLCIkZmlsdGVyIiwiJGZpcmViYXNlQXJyYXkiLCJjcmVhdGVNdWx0aUdhbWVGaW5hbFN0YW5kaW5ncyIsImlucHV0RXZlbnQiLCJnZXRNdWx0aUdhbWVMZWFkZXJib2FyZCIsIm1vZGVsIiwiaW5wdXRFdmVudFN0YW5kaW5ncyIsIiRsb2FkZWQiLCJzdGFuZGluZyIsImtleSIsInBvc2l0aW9uIiwiJHNhdmUiLCJnZXRFdmVudFByb3BlcnRpZXMiLCJldmVudFByb3BlcnRpZXMiLCJnZXRHYW1lRGF0YSIsImlucHV0R2FtZSIsImdldEdhbWVzTGlzdCIsImdhbWVzTGlzdCIsImdhbWUiLCJjYW1lbE5hbWUiLCJwbGF5ZXJQb2ludHMiLCJzY29yZXMiLCJzY29yZXNBcnJheSIsIiQiLCJtYXAiLCJlbCIsInRvdGFsQXdhcmQiLCJpIiwibGVuZ3RoIiwicG9pbnRzIiwiaGF2ZUJvdHRvbVNjb3JlcnNGbG9vciIsImZsb29yUmFuZ2UiLCJnZXRTY29yZUNvdW50T2YiLCJwb2ludHNEYXRhIiwiZ2V0U2luZ2xlR2FtZUxlYWRlcmJvYXJkIiwibGVhZGVyYm9hcmREYXRhIiwiZ2V0UGxheWVyU2NvcmVzIiwiaW5wdXRHYW1lc0xpc3QiLCJpbnB1dFBsYXllciIsImRpc3BsYXlTY29yZXMiLCJuZXdTY29yZU9iamVjdCIsInNjb3JlIiwicG9pbnRzRWFybmVkIiwiaW5wVXJsIiwidHdpdGNoVXJsIiwibWFtZVZlcnNpb24iLCJwdXNoIiwiRXZlbnRNYWluQ29udHJvbGxlciIsIiRzY29wZSIsIiRzdGF0ZVBhcmFtcyIsInByb2ZpbGVTZXJ2aWNlIiwidGVhbVNlcnZpY2UiLCJjbG9zZUdhbWVNb2RhbCIsImNsb3NlTW9kYWwiLCJjbG9zZU11bHRpR2FtZUxlYWRlcmJvYXJkTW9kYWwiLCJjbG9zZVBsYXllck1vZGFsIiwiY3JlYXRlVGVhbSIsInZtIiwiZXZlbnROYW1lIiwibmV3VGVhbSIsIk1hdGVyaWFsaXplIiwidG9hc3QiLCJzaG9ydE5hbWUiLCJkZXRlcm1pbmVQb2ludHMiLCJpbnB1dFNjb3JlRGF0YSIsImlucHV0SW5kZXgiLCJ1c2VyR2FtZVBvaW50cyIsInNvcnRlZFNjb3JlcyIsImdhbWVTY29yZXMiLCJnZXRGaXJzdFBsYWNlU2NvcmVzIiwiZ2FtZUxpc3QiLCJmaXJzdFNjb3JlIiwiZ29Ub1BsYXllclByb2ZpbGUiLCJ1c2VybmFtZSIsImluaXRFdmVudCIsImZvcm1hdCIsIm11bHRpR2FtZSIsImxlYWRlcmJvYXJkIiwibGVhZGVyYm9hcmRMZW5ndGgiLCJzdW1tYXJpemVkTGVhZGVyYm9hcmQiLCJzbGljZSIsInRlYW1CYXNlZCIsImdldFRlYW1MaXN0IiwidGVhbUxpc3QiLCJjb2xsYXBzaWJsZSIsImFjY29yZGlvbiIsImdldEF2YXRhckRhdGEiLCJvcGVuQmFkZ2VzTW9kYWwiLCJvcGVuTW9kYWwiLCJzY3JvbGxUb3AiLCJvcGVuR2FtZU1vZGFsIiwiaW5wdXRHYW1lTmFtZSIsImdhbWVEYXRhIiwiJGlkIiwib3Blbk1hbmFnZW1lbnRNb2RhbCIsIm9wZW5NdWx0aUdhbWVMZWFkZXJib2FyZE1vZGFsIiwiY29tcGxldGVMZWFkZXJib2FyZCIsIm9wZW5QbGF5ZXJNb2RhbCIsImZvY3VzUGxheWVyIiwicGxheWVyU2NvcmVzIiwib3BlbkdhbWVNb2RhbEZyb21QbGF5ZXJNb2RhbCIsIm9wZW5QbGF5ZXJNb2RhbEZyb21HYW1lTW9kYWwiLCJvcGVuUGxheWVyTW9kYWxGcm9tTGVhZGVyYm9hcmRNb2RhbCIsIm9wZW5SdWxlc01vZGFsIiwiaW5wdXROZXdUZWFtUHJvcGVydGllcyIsInRlYW1Qb29sIiwiZnVsbE5hbWUiLCJmb3JtYWxOYW1lIiwiSGVhZGVyQ29udHJvbGxlciIsIiR3aW5kb3ciLCJhY3RpdmF0ZSIsImRyb3Bkb3duIiwiaW5EdXJhdGlvbiIsIm91dER1cmF0aW9uIiwiY29uc3RyYWluX3dpZHRoIiwiaG92ZXIiLCJndXR0ZXIiLCJiZWxvd09yaWdpbiIsImxvY2F0aW9uIiwicmVsb2FkIiwib3JkZXJPYmplY3RCeSIsIml0ZW1zIiwiZmllbGQiLCJyZXZlcnNlIiwiZmlsdGVyZWQiLCJpdGVtIiwic29ydCIsImEiLCJiIiwiZmlsdGVyIiwiQXZhdGFyQ29udHJvbGxlciIsIlVwbG9hZCIsImltZ3VyIiwiZ2V0QmFkZ2VzRGF0YSIsInByb2ZpbGUiLCJiYWRnZXNEYXRhIiwidXBsb2FkQXZhdGFyIiwiZGlzYWJsZUJ1dHRvbiIsInNldEFQSUtleSIsInVwbG9hZCIsImZpbGUiLCJzYXZlQXZhdGFyTGluayIsIkNoYW5nZVBhc3N3b3JkQ29udHJvbGxlciIsInN1Ym1pdENoYW5nZVBhc3N3b3JkIiwicHdDaGFuZ2VGb3JtIiwiJHZhbGlkIiwiJGNoYW5nZVBhc3N3b3JkIiwib2xkUGFzc3dvcmQiLCJpbnB1dEN1cnJlbnRQYXNzd29yZCIsIm5ld1Bhc3N3b3JkIiwiaW5wdXROZXdQYXNzd29yZCIsInNob3dDaGFuZ2VQYXNzd29yZE1lc3NhZ2UiLCJIb21lQ29udHJvbGxlciIsIkxlYWRlcmJvYXJkQ29udHJvbGxlciIsImdldFByb2ZpbGVTY29yZXMiLCJwcm9maWxlU2NvcmVEYXRhIiwiUHJvZmlsZUNvbnRyb2xsZXIiLCJnZXRVc2VyRGF0YSIsImdldFRvdXJuYW1lbnRIaXN0b3J5IiwidG91cm5hbWVudEhpc3RvcnlEYXRhIiwiZXZlbnRTdGFuZGluZ3MiLCJnZXRUb3VybmFtZW50U3RhbmRpbmdzIiwiaW5wdXRVc2VyIiwiaW5wdXRVc2VyRGF0YSIsImV2ZW50c0FycmF5IiwicGxlZGdlZFRvIiwiaW5wdXRUb3VybmFtZW50SGlzdG9yeSIsImV2ZW50U3RhbmRpbmdEYXRhIiwibmFtZSIsInByZW1pZXIiLCJjb2xvciIsInVzZXJzRGF0YSIsImlucHV0TGluayIsIlJlZ0NvbnRyb2xsZXIiLCJsb2dpbkVtYWlsIiwibG9naW5QYXNzd29yZCIsInNob3dJbnZhbGlkVXNlckVycm9yIiwic2hvd0ludmFsaWRQYXNzd29yZEVycm9yIiwicGFzc3dvcmRSZXNldCIsIiRyZXNldFBhc3N3b3JkIiwic2hvd1Bhc3N3b3JkUmVzZXRFbWFpbE1lc3NhZ2UiLCJzdWJtaXROZXdBY2NvdW50IiwibmV3VXNlcm5hbWUiLCJ1c2VyRXhpc3RzIiwic2hvd0R1cGxpY2F0ZVVzZXJFcnJvciIsInNob3dFbWFpbFRha2VuRXJyb3IiLCJuZXdFbWFpbCJdLCJtYXBwaW5ncyI6IkNBQUEsV0FDQSxZQUVBQSxTQUNBQyxPQUFBLFVBRUEsWUFHQSxZQUNBLFdBQ0EsbUJBQ0EsVUFDQSxlQUNBLGVDZEEsV0FDQSxZQVVBLFNBQUFDLEdBQUFDLEVBQUFDLEdBR0FBLEVBQUFDLFVBQUEsS0FFQUYsRUFDQUcsTUFBQSxRQUNBQyxJQUFBLElBQ0FDLFlBQUEsb0JBQ0FDLFdBQUEsMkJBR0FILE1BQUEsbUJBQ0FDLElBQUEsbUJBQ0FDLFlBQUEsb0JBQ0FDLFdBQUEseUJBR0FILE1BQUEsV0FDQUMsSUFBQSxxQkFDQUMsWUFBQSx3QkFDQUMsV0FBQSxpQ0FHQUgsTUFBQSxlQUNBQyxJQUFBLGVBQ0FDLFlBQUEsNEJBQ0FDLFdBQUEseUNBR0FILE1BQUEsU0FDQUMsSUFBQSx5QkFDQUMsWUFBQSxzQkFDQUMsV0FBQSxpQ0FHQUgsTUFBQSxtQkFDQUMsSUFBQSxtQkFDQUMsWUFBQSx1QkFDQUMsV0FBQSw2QkFFQUMsU0FDQUMsYUFBQSxjQUFBLFNBQUFDLEdBQ0EsTUFBQUEsR0FBQUMsb0JBS0FQLE1BQUEsa0JBQ0FDLElBQUEsa0JBQ0FDLFlBQUEsK0JBQ0FDLFdBQUEsdUNBRUFDLFNBQ0FDLGFBQUEsY0FBQSxTQUFBQyxHQUNBLE1BQUFBLEdBQUFDLG9CQS9EQWIsUUFDQUMsT0FBQSxVQUNBYSxTQUFBLGdCQUNBQyxNQUFBLHlDQUVBYixPQUFBQSxHQytFQ0EsRUFBT2MsU0FBVyxpQkFBa0IseUJDdkZyQyxXQUNB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RixFQUFBeUgsY0FBQUEsRUFDQXpILEVBQUE0SCxpQkFBQUEsRUFaQTNSLFFBQ0FDLE9BQUEsVUFDQVEsV0FBQSxnQkFBQTBRLEduQnVnRElBLEVBQWNuUSxTQUFXLFNBQVUsYUFBYyxXQUFZLFVBQVcsU0FBVSxrQkFBbUIsY0FBZSIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgndmcuYXBwJywgW1xuICAgICAgICAgICAgLyogQW5ndWxhciBtb2R1bGVzICovXG4gICAgICAgICAgICAnbmdBbmltYXRlJyxcbiAgICAgICAgICAgIC8qIEFwcCBtb2R1bGVzICovXG4gICAgICAgICAgICAvKiBUaGlyZC1wYXJ0eSBtb2R1bGVzICovXG4gICAgICAgICAgICAndWkucm91dGVyJyxcbiAgICAgICAgICAgICdmaXJlYmFzZScsXG4gICAgICAgICAgICAndmFsaWRhdGlvbi5tYXRjaCcsXG4gICAgICAgICAgICAnb3JkaW5hbCcsXG4gICAgICAgICAgICAnbmdGaWxlVXBsb2FkJyxcbiAgICAgICAgICAgICduZ0ltZ3VyJ1xuICAgICAgICBdKTtcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0YW5ndWxhclxuXHRcdC5tb2R1bGUoJ3ZnLmFwcCcpXG5cdFx0LmNvbnN0YW50KCdGSVJFQkFTRURBVEEnLCB7XG5cdFx0XHQnRkJVUkwnOiAnaHR0cHM6Ly93b2xmc2NvbnRlc3RzLmZpcmViYXNlaW8uY29tJ1xuXHRcdH0pXG5cdFx0LmNvbmZpZyhjb25maWcpO1xuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBjb25maWcoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlcikge1xuXG5cdFx0Ly8gUmVkaXJlY3QgYW55IHVubWF0Y2hlZCBVUkwgdG8gLy5cblx0XHQkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvJyk7XG5cblx0XHQkc3RhdGVQcm92aWRlclxuXHRcdCAgICAuc3RhdGUoJ2hvbWUnLCB7XG5cdFx0ICAgIFx0dXJsOiAnLycsXG5cdFx0ICAgIFx0dGVtcGxhdGVVcmw6ICdhcHAvaG9tZS9ob21lLmh0bScsXG5cdFx0ICAgIFx0Y29udHJvbGxlcjogJ0hvbWVDb250cm9sbGVyIGFzIGhvbWUnXG5cdFx0ICAgIH0pXG5cblx0XHQgICAgLnN0YXRlKCdyZWdpc3Rlck9yTG9naW4nLCB7XG5cdFx0ICAgIFx0dXJsOiAnL3JlZ2lzdGVyT3JMb2dpbicsXG5cdFx0ICAgIFx0dGVtcGxhdGVVcmw6ICcvYXBwL2hvbWUvcmVnLmh0bScsXG5cdFx0ICAgIFx0Y29udHJvbGxlcjogJ1JlZ0NvbnRyb2xsZXIgYXMgcmVnJ1xuXHRcdCAgICB9KVxuXG5cdFx0ICAgIC5zdGF0ZSgncHJvZmlsZScsIHtcblx0XHQgICAgXHR1cmw6ICcvcHJvZmlsZS86dXNlcm5hbWUnLFxuXHRcdCAgICBcdHRlbXBsYXRlVXJsOiAnL2FwcC9ob21lL3Byb2ZpbGUuaHRtJyxcblx0XHQgICAgXHRjb250cm9sbGVyOiAnUHJvZmlsZUNvbnRyb2xsZXIgYXMgcHJvZmlsZSdcblx0XHQgICAgfSlcblxuXHRcdCAgICAuc3RhdGUoJ2xlYWRlcmJvYXJkJywge1xuXHRcdCAgICBcdHVybDogJy9sZWFkZXJib2FyZCcsXG5cdFx0ICAgIFx0dGVtcGxhdGVVcmw6ICcvYXBwL2hvbWUvbGVhZGVyYm9hcmQuaHRtJyxcblx0XHQgICAgXHRjb250cm9sbGVyOiAnTGVhZGVyYm9hcmRDb250cm9sbGVyIGFzIGxlYWRlcmJvYXJkJ1xuXHRcdCAgICB9KVxuXG5cdFx0ICAgIC5zdGF0ZSgnZXZlbnQnLCB7XG5cdFx0ICAgIFx0dXJsOiAnL2V2ZW50LzpldmVudE5hbWUvbWFpbicsXG5cdFx0ICAgIFx0dGVtcGxhdGVVcmw6ICcvYXBwL2V2ZW50L21haW4uaHRtJyxcblx0XHQgICAgXHRjb250cm9sbGVyOiAnRXZlbnRNYWluQ29udHJvbGxlciBhcyBldmVudCdcblx0XHQgICAgfSlcblxuXHRcdCAgICAuc3RhdGUoJ2N1c3RvbWl6ZUF2YXRhcicsIHtcblx0XHQgICAgXHR1cmw6ICcvY3VzdG9taXplQXZhdGFyJyxcblx0XHQgICAgXHR0ZW1wbGF0ZVVybDogJy9hcHAvaG9tZS9hdmF0YXIuaHRtJyxcblx0XHQgICAgXHRjb250cm9sbGVyOiAnQXZhdGFyQ29udHJvbGxlciBhcyBhdmF0YXInLFxuXG5cdFx0ICAgIFx0cmVzb2x2ZToge1xuXHRcdCAgICBcdFx0J2N1cnJlbnRBdXRoJzogWydBdXRoV3JhcHBlcicsIGZ1bmN0aW9uKEF1dGhXcmFwcGVyKSB7XG5cdFx0ICAgIFx0XHRcdHJldHVybiBBdXRoV3JhcHBlci4kcmVxdWlyZUF1dGgoKTtcblx0XHQgICAgXHRcdH1dXG5cdFx0ICAgIFx0fVxuXHRcdCAgICB9KVxuXG5cdFx0ICAgIC5zdGF0ZSgnY2hhbmdlUGFzc3dvcmQnLCB7XG5cdFx0ICAgIFx0dXJsOiAnL2NoYW5nZVBhc3N3b3JkJyxcblx0XHQgICAgXHR0ZW1wbGF0ZVVybDogJy9hcHAvaG9tZS9jaGFuZ2VQYXNzd29yZC5odG0nLFxuXHRcdCAgICBcdGNvbnRyb2xsZXI6ICdDaGFuZ2VQYXNzd29yZENvbnRyb2xsZXIgYXMgcHdjaGFuZ2UnLFxuXG5cdFx0ICAgIFx0cmVzb2x2ZToge1xuXHRcdCAgICBcdFx0J2N1cnJlbnRBdXRoJzogWydBdXRoV3JhcHBlcicsIGZ1bmN0aW9uKEF1dGhXcmFwcGVyKSB7XG5cdFx0ICAgIFx0XHRcdHJldHVybiBBdXRoV3JhcHBlci4kcmVxdWlyZUF1dGgoKTtcblx0XHQgICAgXHRcdH1dXG5cdFx0ICAgIFx0fVxuXHRcdCAgICB9KTtcblx0fVxufSkoKTsiLG51bGwsIihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ3ZnLmFwcCcpXG4gICAgICAgIC5ydW4ocnVuKTtcblxuICAgIGZ1bmN0aW9uIHJ1bigkcm9vdFNjb3BlLCAkbG9jYXRpb24sICRzdGF0ZSwgJGZpcmViYXNlT2JqZWN0LCBBdXRoV3JhcHBlciwgRklSRUJBU0VEQVRBKSB7XG5cbiAgICAgICAgJHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZUVycm9yJywgZnVuY3Rpb24oZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUsIGZyb21QYXJhbXMsIGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IgPT09ICdBVVRIX1JFUVVJUkVEJykge1xuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygncmVnaXN0ZXJPckxvZ2luJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIC8vIElmIHVzZXIgaXMgbG9nZ2VkIGluLCBkb3dubG9hZCB0aGVpciBwcm9maWxlIGRhdGEgdG8gYW4gb2JqZWN0IGluICRyb290U2NvcGUuXG4gICAgICAgICAgICAvLyBGSVhNRTogV2Ugc2hvdWxkbid0IG5lZWQgdG8gZG8gdGhpcyBldmVyeSBzdWNjZXNzZnVsIHN0YXRlIGNoYW5nZS5cbiAgICAgICAgICAgIGlmIChBdXRoV3JhcHBlci4kZ2V0QXV0aCgpKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdmFyIGF1dGhEYXRhID0gQXV0aFdyYXBwZXIuJGdldEF1dGgoKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVmID0gbmV3IEZpcmViYXNlKEZJUkVCQVNFREFUQS5GQlVSTCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcHJvZmlsZURhdGEgPSAkZmlyZWJhc2VPYmplY3QocmVmLmNoaWxkKCd1c2VycycpLmNoaWxkKGF1dGhEYXRhLnVpZCkpO1xuICAgICAgICAgICAgICAgIHByb2ZpbGVEYXRhLiRiaW5kVG8oJHJvb3RTY29wZSwgJ3Byb2ZpbGUnKS50aGVuKGZ1bmN0aW9uKHVuYmluZCkge1xuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnVuYmluZEZ1bmN0aW9uID0gdW5iaW5kO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgndmcuYXBwJylcbiAgICAgICAgLnNlcnZpY2UoJ2F1dGhTZXJ2aWNlJywgYXV0aFNlcnZpY2UpO1xuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gYXV0aFNlcnZpY2UoJHEsICRyb290U2NvcGUsICRzdGF0ZSwgJGZpcmViYXNlT2JqZWN0LCBBdXRoV3JhcHBlciwgRklSRUJBU0VEQVRBKSB7XG4gICAgICAgIFxuICAgIFx0dGhpcy5jaGVja0lmVXNlckV4aXN0cyA9IGNoZWNrSWZVc2VyRXhpc3RzO1xuICAgIFx0dGhpcy5jcmVhdGVOZXdVc2VyID0gY3JlYXRlTmV3VXNlcjtcbiAgICAgICAgdGhpcy5sb2dpblRvQWNjb3VudCA9IGxvZ2luVG9BY2NvdW50O1xuICAgICAgICB0aGlzLmxvZ091dCA9IGxvZ091dDtcblxuICAgIFx0Ly8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgXHRmdW5jdGlvbiBjaGVja0lmVXNlckV4aXN0cyhpbnB1dFVzZXJuYW1lKSB7XG5cbiAgICBcdFx0dmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcblxuICAgIFx0XHR2YXIgZG9lc1VzZXJFeGlzdCA9IGZhbHNlO1xuICAgIFx0XHR2YXIgdXNlcnNSZWYgPSBuZXcgRmlyZWJhc2UoRklSRUJBU0VEQVRBLkZCVVJMICsgJy91c2VycycpO1xuXG4gICAgXHRcdHVzZXJzUmVmLm9uY2UoJ3ZhbHVlJywgZnVuY3Rpb24oZGF0YVNuYXBzaG90KSB7XG5cbiAgICBcdFx0XHRkYXRhU25hcHNob3QuZm9yRWFjaChmdW5jdGlvbih1c2VyKSB7XG4gICAgXHRcdFx0XHRpZiAodXNlci52YWwoKS51c2VyTmFtZSA9PT0gaW5wdXRVc2VybmFtZSkge1xuICAgIFx0XHRcdFx0XHRkb2VzVXNlckV4aXN0ID0gdHJ1ZTtcbiAgICBcdFx0XHRcdH1cbiAgICBcdFx0XHR9KTtcblxuICAgIFx0XHRcdGRlZmVycmVkLnJlc29sdmUoZG9lc1VzZXJFeGlzdCk7XG5cbiAgICBcdFx0fSk7XG5cbiAgICBcdFx0cmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG5cbiAgICBcdH1cblxuICAgIFx0ZnVuY3Rpb24gY3JlYXRlTmV3VXNlcihpbnB1dEVtYWlsLCBpbnB1dFBhc3N3b3JkLCBpbnB1dFVzZXJuYW1lKSB7XG5cbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICBcdFx0QXV0aFdyYXBwZXIuJGNyZWF0ZVVzZXIoe1xuICAgIFx0XHRcdGVtYWlsOiBpbnB1dEVtYWlsLFxuICAgIFx0XHRcdHBhc3N3b3JkOiBpbnB1dFBhc3N3b3JkXG4gICAgXHRcdH0pLnRoZW4oZnVuY3Rpb24odXNlckRhdGEpIHtcblxuICAgIFx0XHRcdC8vIENyZWF0ZSBhIGRhdGEgZW50cnkgZm9yIHRoZSBuZXcgdXNlcm5hbWUuXG4gICAgXHRcdFx0bmV3IEZpcmViYXNlKEZJUkVCQVNFREFUQS5GQlVSTCkuY2hpbGQoJ3VzZXJzLycgKyB1c2VyRGF0YS51aWQpLnNldCh7XG5cbiAgICBcdFx0XHRcdHVzZXJOYW1lOiBpbnB1dFVzZXJuYW1lLFxuICAgIFx0XHRcdFx0cm9sZTogJ1VzZXInXG5cbiAgICBcdFx0XHR9LCBmdW5jdGlvbihlcnJvckRhdGEpIHtcbiAgICBcdFx0XHRcdGNvbnNvbGUuZXJyb3IoZXJyb3JEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yRGF0YS5jb2RlO1xuICAgIFx0XHRcdH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGEgZGF0YSBlbnRyeSBmb3IgdGhlIHVzZXIncyBhdmF0YXIuXG4gICAgICAgICAgICAgICAgbmV3IEZpcmViYXNlKEZJUkVCQVNFREFUQS5GQlVSTCkuY2hpbGQoJ2F2YXRhcnMnKS5jaGlsZChpbnB1dFVzZXJuYW1lKS5zZXQoJ2h0dHA6Ly9hcGkuYWRvcmFibGUuaW8vYXZhdGFycy80Mi8nICsgaW5wdXRVc2VybmFtZSk7XG5cbiAgICBcdFx0XHQvLyBMb2cgdGhlIHVzZXIgaW4uXG4gICAgXHRcdFx0QXV0aFdyYXBwZXIuJGF1dGhXaXRoUGFzc3dvcmQoe1xuICAgIFx0XHRcdFx0ZW1haWw6IGlucHV0RW1haWwsXG4gICAgXHRcdFx0XHRwYXNzd29yZDogaW5wdXRQYXNzd29yZFxuICAgIFx0XHRcdH0pLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoJ0FDQ09VTlRfQ1JFQVRFRCcpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgXHRcdH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yRGF0YSkge1xuXG4gICAgXHRcdFx0Y29uc29sZS5lcnJvcihlcnJvckRhdGEpO1xuXG4gICAgXHRcdFx0aWYgKGVycm9yRGF0YS5jb2RlID09PSAnRU1BSUxfVEFLRU4nKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZXJyb3JEYXRhLmNvZGUpO1xuICAgIFx0XHRcdH1cblxuICAgIFx0XHR9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG5cbiAgICBcdH1cblxuICAgICAgICBmdW5jdGlvbiBsb2dpblRvQWNjb3VudChpbnB1dEVtYWlsLCBpbnB1dFBhc3N3b3JkKSB7XG5cbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgIEF1dGhXcmFwcGVyLiRhdXRoV2l0aFBhc3N3b3JkKHtcbiAgICAgICAgICAgICAgICBlbWFpbDogaW5wdXRFbWFpbCxcbiAgICAgICAgICAgICAgICBwYXNzd29yZDogaW5wdXRQYXNzd29yZFxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbihhdXRoRGF0YSkge1xuXG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgnTE9HSU5fU1VDQ0VTUycpO1xuXG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnJvckRhdGEpIHtcblxuICAgICAgICAgICAgICAgIGlmIChlcnJvckRhdGEuY29kZSA9PT0gJ0lOVkFMSURfVVNFUicpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgnSU5WQUxJRF9VU0VSJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvckRhdGEuY29kZSA9PT0gJ0lOVkFMSURfUEFTU1dPUkQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoJ0lOVkFMSURfUEFTU1dPUkQnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcblxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbG9nT3V0KCkge1xuICAgICAgICAgICAgQXV0aFdyYXBwZXIuJHVuYXV0aCgpO1xuICAgICAgICAgICAgJHJvb3RTY29wZS51bmJpbmRGdW5jdGlvbigpO1xuICAgICAgICB9XG5cbiAgICB9XG59KSgpOyIsIihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ3ZnLmFwcCcpXG4gICAgICAgIC5mYWN0b3J5KCdBdXRoV3JhcHBlcicsIEF1dGhXcmFwcGVyKTtcblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIEF1dGhXcmFwcGVyKCRmaXJlYmFzZUF1dGgsIEZJUkVCQVNFREFUQSkge1xuXG4gICAgICAgIHZhciByZWYgPSBuZXcgRmlyZWJhc2UoRklSRUJBU0VEQVRBLkZCVVJMKTtcbiAgICAgICAgcmV0dXJuICRmaXJlYmFzZUF1dGgocmVmKTtcblxuICAgIH1cbiAgICBcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgndmcuYXBwJylcbiAgICAgICAgLmRpcmVjdGl2ZSgndmdHYW1lc0xpc3QnLCB2Z0dhbWVzTGlzdCk7XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiB2Z0dhbWVzTGlzdCAoKSB7XG4gICAgICAgIC8vIFVzYWdlOlxuICAgICAgICAvL1xuICAgICAgICAvLyBDcmVhdGVzOlxuICAgICAgICAvL1xuICAgICAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IEdhbWVzTGlzdENvbnRyb2xsZXIsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICBsaW5rOiBsaW5rLFxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi9hcHAvZXZlbnRDb21wb25lbnRzL2dhbWVzTGlzdC5kaXJlY3RpdmUuaHRtJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICBcdGRhdGE6ICc9JyxcbiAgICAgICAgICAgIFx0b3BlbkdhbWVGdW5jdGlvbjogJz0nXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBkaXJlY3RpdmU7XG5cbiAgICAgICAgZnVuY3Rpb24gbGluayhzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIEdhbWVzTGlzdENvbnRyb2xsZXIoKSB7XG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICBcdHZhciB2bSA9IHRoaXM7XG4gICAgfVxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCd2Zy5hcHAnKVxuICAgICAgICAuZGlyZWN0aXZlKCd2Z011bHRpR2FtZUxlYWRlcmJvYXJkJywgdmdNdWx0aUdhbWVMZWFkZXJib2FyZCk7XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiB2Z011bHRpR2FtZUxlYWRlcmJvYXJkICgpIHtcbiAgICAgICAgLy8gVXNhZ2U6XG4gICAgICAgIC8vXG4gICAgICAgIC8vIENyZWF0ZXM6XG4gICAgICAgIC8vXG4gICAgICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbGxlcjogTXVsdGlHYW1lTGVhZGVyYm9hcmRDb250cm9sbGVyLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICAgICAgbGluazogbGluayxcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4vYXBwL2V2ZW50Q29tcG9uZW50cy9tdWx0aUdhbWVMZWFkZXJib2FyZC5kaXJlY3RpdmUuaHRtJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICBcdGRhdGE6ICc9JyxcbiAgICAgICAgICAgICAgICBhdmF0YXJEYXRhOiAnPScsXG4gICAgICAgICAgICBcdGNvbXBsZXRlTGVuZ3RoOiAnPScsXG4gICAgICAgICAgICBcdG9wZW5QbGF5ZXJGdW5jdGlvbjogJz0nLFxuICAgICAgICAgICAgICAgIG9wZW5MZWFkZXJib2FyZEZ1bmN0aW9uOiAnPSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZTtcblxuICAgICAgICBmdW5jdGlvbiBsaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gTXVsdGlHYW1lTGVhZGVyYm9hcmRDb250cm9sbGVyKCkge1xuICAgICAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gICAgXHR2YXIgdm0gPSB0aGlzO1xuICAgIH1cbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgndmcuYXBwJylcbiAgICAgICAgLmRpcmVjdGl2ZSgndmdTaW5nbGVHYW1lTGVhZGVyYm9hcmQnLCB2Z1NpbmdsZUdhbWVMZWFkZXJib2FyZCk7XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiB2Z1NpbmdsZUdhbWVMZWFkZXJib2FyZCAoKSB7XG4gICAgICAgIC8vIFVzYWdlOlxuICAgICAgICAvL1xuICAgICAgICAvLyBDcmVhdGVzOlxuICAgICAgICAvL1xuICAgICAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFNpbmdsZUdhbWVMZWFkZXJib2FyZENvbnRyb2xsZXIsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICBsaW5rOiBsaW5rLFxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi9hcHAvZXZlbnRDb21wb25lbnRzL3NpbmdsZUdhbWVMZWFkZXJib2FyZC5kaXJlY3RpdmUuaHRtJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICBcdGRhdGE6ICc9JyxcbiAgICAgICAgICAgICAgICBhdmF0YXJEYXRhOiAnPScsXG4gICAgICAgICAgICBcdGNvbXBsZXRlTGVuZ3RoOiAnPScsXG4gICAgICAgICAgICAgICAgb3BlbkxlYWRlcmJvYXJkRnVuY3Rpb246ICc9J1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gZGlyZWN0aXZlO1xuXG4gICAgICAgIGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBTaW5nbGVHYW1lTGVhZGVyYm9hcmRDb250cm9sbGVyKCkge1xuICAgICAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gICAgXHR2YXIgdm0gPSB0aGlzO1xuICAgIH1cbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgndmcuYXBwJylcbiAgICAgICAgLmRpcmVjdGl2ZSgndmdTdGlja3lNZXNzYWdlJywgdmdTdGlja3lNZXNzYWdlKTtcblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHZnU3RpY2t5TWVzc2FnZSAoKSB7XG4gICAgICAgIC8vIFVzYWdlOlxuICAgICAgICAvL1xuICAgICAgICAvLyBDcmVhdGVzOlxuICAgICAgICAvL1xuICAgICAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFN0aWNreU1lc3NhZ2VDb250cm9sbGVyLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICAgICAgbGluazogbGluayxcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4vYXBwL2V2ZW50Q29tcG9uZW50cy9zdGlja3lNZXNzYWdlLmRpcmVjdGl2ZS5odG0nLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgIFx0cHJvcGVydGllczogJz0nXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBkaXJlY3RpdmU7XG5cbiAgICAgICAgZnVuY3Rpb24gbGluayhzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIFN0aWNreU1lc3NhZ2VDb250cm9sbGVyKCR0aW1lb3V0KSB7XG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICBcdHZhciB2bSA9IHRoaXM7XG4gICAgfVxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCd2Zy5hcHAnKVxuICAgICAgICAuc2VydmljZSgnZXZlbnRTZXJ2aWNlJywgZXZlbnRTZXJ2aWNlKTtcblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGV2ZW50U2VydmljZSgkcSwgJGZpbHRlciwgJGZpcmViYXNlT2JqZWN0LCAkZmlyZWJhc2VBcnJheSwgRklSRUJBU0VEQVRBKSB7XG5cbiAgICAgICAgdGhpcy5jcmVhdGVNdWx0aUdhbWVGaW5hbFN0YW5kaW5ncyA9IGNyZWF0ZU11bHRpR2FtZUZpbmFsU3RhbmRpbmdzO1xuICAgICAgICB0aGlzLmdldEV2ZW50UHJvcGVydGllcyA9IGdldEV2ZW50UHJvcGVydGllcztcbiAgICAgICAgdGhpcy5nZXRHYW1lRGF0YSA9IGdldEdhbWVEYXRhO1xuICAgICAgICB0aGlzLmdldEdhbWVzTGlzdCA9IGdldEdhbWVzTGlzdDtcbiAgICAgICAgdGhpcy5nZXRNdWx0aUdhbWVMZWFkZXJib2FyZCA9IGdldE11bHRpR2FtZUxlYWRlcmJvYXJkO1xuICAgICAgICB0aGlzLmdldFNpbmdsZUdhbWVMZWFkZXJib2FyZCA9IGdldFNpbmdsZUdhbWVMZWFkZXJib2FyZDtcbiAgICAgICAgdGhpcy5nZXRQbGF5ZXJTY29yZXMgPSBnZXRQbGF5ZXJTY29yZXM7XG5cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZU11bHRpR2FtZUZpbmFsU3RhbmRpbmdzKGlucHV0RXZlbnQpIHtcblxuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBmaW5hbCBzdGFuZGluZ3Mgb2YgdGhlIGV2ZW50LlxuICAgICAgICAgICAgZ2V0TXVsdGlHYW1lTGVhZGVyYm9hcmQoaW5wdXRFdmVudCkudGhlbihmdW5jdGlvbiB0aGVuKG1vZGVsKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgcmVmID0gbmV3IEZpcmViYXNlKEZJUkVCQVNFREFUQS5GQlVSTCk7XG4gICAgICAgICAgICAgICAgdmFyIGlucHV0RXZlbnRTdGFuZGluZ3MgPSAkZmlyZWJhc2VPYmplY3QoXG4gICAgICAgICAgICAgICAgICAgIHJlZlxuICAgICAgICAgICAgICAgICAgICAgICAgLmNoaWxkKCdzdGFuZGluZ3MnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNoaWxkKGlucHV0RXZlbnQpXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIGlucHV0RXZlbnRTdGFuZGluZ3MuJGxvYWRlZCgpLnRoZW4oZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuZm9yRWFjaChmdW5jdGlvbihzdGFuZGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRFdmVudFN0YW5kaW5nc1tzdGFuZGluZy5rZXldID0gc3RhbmRpbmcucG9zaXRpb247XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGlucHV0RXZlbnRTdGFuZGluZ3MuJHNhdmUoKTtcblxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0RXZlbnRQcm9wZXJ0aWVzKGlucHV0RXZlbnQpIHtcblxuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICBcdHZhciByZWYgPSBuZXcgRmlyZWJhc2UoRklSRUJBU0VEQVRBLkZCVVJMKTtcbiAgICAgICAgXHR2YXIgZXZlbnRQcm9wZXJ0aWVzID0gJGZpcmViYXNlT2JqZWN0KFxuICAgICAgICBcdFx0cmVmXG4gICAgICAgIFx0XHRcdC5jaGlsZCgnY29udGVzdHMnKVxuICAgICAgICBcdFx0XHQuY2hpbGQoaW5wdXRFdmVudClcbiAgICAgICAgXHRcdFx0LmNoaWxkKCdwcm9wZXJ0aWVzJylcbiAgICAgICAgXHQpO1xuXG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGV2ZW50UHJvcGVydGllcyk7XG5cbiAgICAgICAgXHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcblxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0R2FtZURhdGEoaW5wdXRFdmVudCwgaW5wdXRHYW1lKSB7XG5cbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgIHZhciByZWYgPSBuZXcgRmlyZWJhc2UoRklSRUJBU0VEQVRBLkZCVVJMKTtcblxuICAgICAgICAgICAgZ2V0R2FtZXNMaXN0KGlucHV0RXZlbnQpLnRoZW4oZnVuY3Rpb24oZ2FtZXNMaXN0KSB7XG5cbiAgICAgICAgICAgICAgICBnYW1lc0xpc3QuZm9yRWFjaChmdW5jdGlvbihnYW1lKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGdhbWUuY2FtZWxOYW1lID09PSBpbnB1dEdhbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZ2FtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcblxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0R2FtZXNMaXN0KGlucHV0RXZlbnQpIHtcblxuICAgICAgICBcdHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgXHR2YXIgcmVmID0gbmV3IEZpcmViYXNlKEZJUkVCQVNFREFUQS5GQlVSTCk7XG4gICAgICAgIFx0dmFyIGdhbWVzTGlzdCA9ICRmaXJlYmFzZUFycmF5KFxuICAgICAgICBcdFx0cmVmXG4gICAgICAgIFx0XHRcdC5jaGlsZCgnY29udGVzdHMnKVxuICAgICAgICBcdFx0XHQuY2hpbGQoaW5wdXRFdmVudClcbiAgICAgICAgXHRcdFx0LmNoaWxkKCdhY3RpdmVHYW1lcycpXG4gICAgICAgIFx0KTtcblxuICAgICAgICBcdGdhbWVzTGlzdC4kbG9hZGVkKCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgXHRcdGRlZmVycmVkLnJlc29sdmUoZ2FtZXNMaXN0KTtcbiAgICAgICAgXHR9KTtcblxuICAgICAgICBcdHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRNdWx0aUdhbWVMZWFkZXJib2FyZChpbnB1dEV2ZW50KSB7XG5cbiAgICAgICAgXHR2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgIFx0Ly8gV2UgbmVlZCB0byBnZXQgdGhlIHRvcCAxMiBwbGF5ZXJzIGZvciBldmVyeSBnYW1lLlxuICAgICAgICBcdHZhciBwbGF5ZXJQb2ludHMgPSB7fTtcblxuICAgICAgICBcdGdldEdhbWVzTGlzdChpbnB1dEV2ZW50KS50aGVuKGZ1bmN0aW9uIHRoZW4obW9kZWwpIHtcblxuICAgICAgICBcdFx0dmFyIGdhbWVzTGlzdCA9IG1vZGVsO1xuICAgICAgICBcdFx0Z2FtZXNMaXN0LmZvckVhY2goZnVuY3Rpb24oZ2FtZSkge1xuXG4gICAgICAgIFx0XHRcdGlmIChnYW1lLnNjb3Jlcykge1xuXG4gICAgICAgIFx0XHRcdFx0Ly8gQ29udmVydCB0aGUgZ2FtZSdzIHNjb3JlcyB0byBhbiBhcnJheS5cbiAgICAgICAgXHRcdFx0XHR2YXIgc2NvcmVzQXJyYXkgPSAkLm1hcChnYW1lLnNjb3JlcywgZnVuY3Rpb24oZWwpIHsgcmV0dXJuIGVsOyB9KTtcbiAgICAgICAgXHRcdFx0XHRzY29yZXNBcnJheSA9ICRmaWx0ZXIoJ29yZGVyQnknKShzY29yZXNBcnJheSwgJy1zY29yZScpO1xuXG4gICAgICAgIFx0XHRcdFx0dmFyIHRvdGFsQXdhcmQgPSAxMjtcblxuICAgICAgICBcdFx0XHRcdC8vIEl0ZXJhdGUgdGhyb3VnaCB0aGUgdG9wIHNjb3JlcyBhd2FyZGluZyBwb2ludHMuXG4gICAgICAgIFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzY29yZXNBcnJheS5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgIFx0XHRcdFx0XHRpZiAoIXBsYXllclBvaW50c1tzY29yZXNBcnJheVtpXS51c2VyTmFtZV0pIHtcbiAgICAgICAgXHRcdFx0XHRcdFx0cGxheWVyUG9pbnRzW3Njb3Jlc0FycmF5W2ldLnVzZXJOYW1lXSA9IHtcbiAgICAgICAgXHRcdFx0XHRcdFx0XHRwb2ludHM6IDBcbiAgICAgICAgXHRcdFx0XHRcdFx0fTtcbiAgICAgICAgXHRcdFx0XHRcdH1cblxuICAgICAgICBcdFx0XHRcdFx0cGxheWVyUG9pbnRzW3Njb3Jlc0FycmF5W2ldLnVzZXJOYW1lXS5wb2ludHMgKz0gdG90YWxBd2FyZDtcblxuICAgICAgICBcdFx0XHRcdFx0aWYgKHRvdGFsQXdhcmQgPiAwKSB7XG4gICAgICAgIFx0XHRcdFx0XHRcdHRvdGFsQXdhcmQgLT0gMTtcbiAgICAgICAgXHRcdFx0XHRcdH1cblxuICAgICAgICBcdFx0XHRcdH1cblxuICAgICAgICBcdFx0XHR9XG5cbiAgICAgICAgXHRcdH0pO1xuXG4gICAgICAgIFx0XHQvLyBGaW5kIGFuZCByZXNvbHZlIHRpZXMuXG4gICAgICAgIFx0XHRwbGF5ZXJQb2ludHMgPSAkZmlsdGVyKCdvcmRlck9iamVjdEJ5JykocGxheWVyUG9pbnRzLCAncG9pbnRzJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgdmFyIGhhdmVCb3R0b21TY29yZXJzRmxvb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgZmxvb3JSYW5nZSA9IDA7XG4gICAgICAgIFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHBsYXllclBvaW50cy5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgIFx0XHRcdGlmIChwbGF5ZXJQb2ludHNbaS0xXSAmJiBwbGF5ZXJQb2ludHNbaV0ucG9pbnRzICYmIHBsYXllclBvaW50c1tpLTFdLnBvaW50cykge1xuXG4gICAgICAgIFx0XHRcdFx0aWYgKHBsYXllclBvaW50c1tpXS5wb2ludHMgPT09IHBsYXllclBvaW50c1tpLTFdLnBvaW50cykge1xuICAgICAgICBcdFx0XHRcdFx0cGxheWVyUG9pbnRzW2ldLnBvc2l0aW9uID0gcGxheWVyUG9pbnRzW2ktMV0ucG9zaXRpb247XG4gICAgICAgIFx0XHRcdFx0fSBlbHNlIHtcbiAgICAgICAgXHRcdFx0XHRcdHBsYXllclBvaW50c1tpXS5wb3NpdGlvbiA9IChpKzEpO1xuICAgICAgICBcdFx0XHRcdH1cblxuICAgICAgICBcdFx0XHR9IGVsc2Uge1xuXG4gICAgICAgIFx0XHRcdFx0aWYgKGkgPT09IDApIHtcbiAgICAgICAgXHRcdFx0XHRcdHBsYXllclBvaW50c1tpXS5wb3NpdGlvbiA9IDE7XG4gICAgICAgIFx0XHRcdFx0fSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaGF2ZUJvdHRvbVNjb3JlcnNGbG9vcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXQgY291bnQgb2YgcGxheWVycyBpbiBvbmUgcG9zaXRpb24gaGlnaGVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ2V0U2NvcmVDb3VudE9mID0gcGxheWVyUG9pbnRzW2ktMV0ucG9pbnRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJQb2ludHMuZm9yRWFjaChmdW5jdGlvbihwb2ludHNEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9pbnRzRGF0YS5wb2ludHMgPT09IGdldFNjb3JlQ291bnRPZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsb29yUmFuZ2UgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGF2ZUJvdHRvbVNjb3JlcnNGbG9vciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgIFx0XHRcdFx0XHRwbGF5ZXJQb2ludHNbaV0ucG9zaXRpb24gPSAocGxheWVyUG9pbnRzLmxlbmd0aCArIDEpIC0gZmxvb3JSYW5nZTtcbiAgICAgICAgXHRcdFx0XHR9XG5cbiAgICAgICAgXHRcdFx0fVxuXG4gICAgICAgIFx0XHR9XG5cbiAgICAgICAgXHRcdGRlZmVycmVkLnJlc29sdmUocGxheWVyUG9pbnRzKTtcblxuICAgICAgICBcdH0pO1xuXG5cdFx0XHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcblxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0U2luZ2xlR2FtZUxlYWRlcmJvYXJkKGlucHV0RXZlbnQpIHtcblxuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgdmFyIHJlZiA9IG5ldyBGaXJlYmFzZShGSVJFQkFTRURBVEEuRkJVUkwpO1xuICAgICAgICAgICAgdmFyIGxlYWRlcmJvYXJkRGF0YSA9ICRmaXJlYmFzZUFycmF5KFxuICAgICAgICAgICAgICAgIHJlZlxuICAgICAgICAgICAgICAgICAgICAuY2hpbGQoJ2NvbnRlc3RzJylcbiAgICAgICAgICAgICAgICAgICAgLmNoaWxkKGlucHV0RXZlbnQpXG4gICAgICAgICAgICAgICAgICAgIC5jaGlsZCgnc2NvcmVzJylcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUobGVhZGVyYm9hcmREYXRhKTtcblxuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldFBsYXllclNjb3JlcyhpbnB1dEV2ZW50LCBpbnB1dEdhbWVzTGlzdCwgaW5wdXRQbGF5ZXIpIHtcblxuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgdmFyIGRpc3BsYXlTY29yZXMgPSBbXTtcblxuICAgICAgICAgICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGV2ZXJ5IGdhbWUuXG4gICAgICAgICAgICBpbnB1dEdhbWVzTGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGdhbWUpIHtcblxuICAgICAgICAgICAgICAgIGlmIChnYW1lLnNjb3Jlcykge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENvbnZlcnQgdGhlIGdhbWUncyBzY29yZXMgdG8gYW4gYXJyYXkuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzY29yZXNBcnJheSA9ICQubWFwKGdhbWUuc2NvcmVzLCBmdW5jdGlvbihlbCkgeyByZXR1cm4gZWw7IH0pO1xuICAgICAgICAgICAgICAgICAgICBzY29yZXNBcnJheSA9ICRmaWx0ZXIoJ29yZGVyQnknKShzY29yZXNBcnJheSwgJy1zY29yZScpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciB0b3RhbEF3YXJkID0gMTI7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSXRlcmF0ZSB0aHJvdWdoIHRoZSBzY29yZXMgc3RhcnRpbmcgZnJvbSB0aGUgdG9wIGFuZCBmaW5kIG91ciB1c2VyLlxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjb3Jlc0FycmF5Lmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvdW5kIG91ciBwbGF5ZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2NvcmVzQXJyYXlbaV0udXNlck5hbWUgPT09IGlucHV0UGxheWVyKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3U2NvcmVPYmplY3QgPSBnYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1Njb3JlT2JqZWN0LnBvc2l0aW9uID0gaSsxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1Njb3JlT2JqZWN0LnNjb3JlID0gc2NvcmVzQXJyYXlbaV0uc2NvcmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3U2NvcmVPYmplY3QucG9pbnRzRWFybmVkID0gdG90YWxBd2FyZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdTY29yZU9iamVjdC5pbnBVcmwgPSBzY29yZXNBcnJheVtpXS5pbnBVcmwgPyBzY29yZXNBcnJheVtpXS5pbnBVcmwgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1Njb3JlT2JqZWN0LnR3aXRjaFVybCA9IHNjb3Jlc0FycmF5W2ldLnR3aXRjaFVybCA/IHNjb3Jlc0FycmF5W2ldLnR3aXRjaFVybCA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3U2NvcmVPYmplY3QubWFtZVZlcnNpb24gPSBzY29yZXNBcnJheVtpXS5tYW1lVmVyc2lvbiA/IHNjb3Jlc0FycmF5W2ldLm1hbWVWZXJzaW9uIDogbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlTY29yZXMucHVzaChuZXdTY29yZU9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBd2FyZCA9IDEyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b3RhbEF3YXJkID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF3YXJkIC09IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZGlzcGxheVNjb3Jlcyk7XG5cbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuXG4gICAgICAgIH1cblxuICAgIH1cbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgndmcuYXBwJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0V2ZW50TWFpbkNvbnRyb2xsZXInLCBFdmVudE1haW5Db250cm9sbGVyKTtcblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIEV2ZW50TWFpbkNvbnRyb2xsZXIoJHNjb3BlLCAkZmlsdGVyLCAkc3RhdGVQYXJhbXMsICRzdGF0ZSwgJHRpbWVvdXQsICRmaXJlYmFzZUFycmF5LCBldmVudFNlcnZpY2UsIGF1dGhTZXJ2aWNlLCBwcm9maWxlU2VydmljZSwgdGVhbVNlcnZpY2UsIEZJUkVCQVNFREFUQSkge1xuXG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICAgICAgdmFyIHZtID0gdGhpcztcblxuICAgICAgICB2bS5ldmVudE5hbWUgPSAkc3RhdGVQYXJhbXMuZXZlbnROYW1lO1xuXG4gICAgICAgIHZtLmNsb3NlR2FtZU1vZGFsID0gY2xvc2VHYW1lTW9kYWw7XG4gICAgICAgIHZtLmNsb3NlTXVsdGlHYW1lTGVhZGVyYm9hcmRNb2RhbCA9IGNsb3NlTXVsdGlHYW1lTGVhZGVyYm9hcmRNb2RhbDtcbiAgICAgICAgdm0uY2xvc2VQbGF5ZXJNb2RhbCA9IGNsb3NlUGxheWVyTW9kYWw7XG4gICAgICAgIHZtLmNyZWF0ZVRlYW0gPSBjcmVhdGVUZWFtO1xuICAgICAgICB2bS5kZXRlcm1pbmVQb2ludHMgPSBkZXRlcm1pbmVQb2ludHM7XG4gICAgICAgIHZtLmdldEZpcnN0UGxhY2VTY29yZXMgPSBnZXRGaXJzdFBsYWNlU2NvcmVzO1xuICAgICAgICB2bS5nb1RvUGxheWVyUHJvZmlsZSA9IGdvVG9QbGF5ZXJQcm9maWxlO1xuICAgICAgICB2bS5vcGVuQmFkZ2VzTW9kYWwgPSBvcGVuQmFkZ2VzTW9kYWw7XG4gICAgICAgIHZtLm9wZW5HYW1lTW9kYWwgPSBvcGVuR2FtZU1vZGFsO1xuICAgICAgICB2bS5vcGVuR2FtZU1vZGFsRnJvbVBsYXllck1vZGFsID0gb3BlbkdhbWVNb2RhbEZyb21QbGF5ZXJNb2RhbDtcbiAgICAgICAgdm0ub3Blbk1hbmFnZW1lbnRNb2RhbCA9IG9wZW5NYW5hZ2VtZW50TW9kYWw7XG4gICAgICAgIHZtLm9wZW5NdWx0aUdhbWVMZWFkZXJib2FyZE1vZGFsID0gb3Blbk11bHRpR2FtZUxlYWRlcmJvYXJkTW9kYWw7XG4gICAgICAgIHZtLm9wZW5QbGF5ZXJNb2RhbCA9IG9wZW5QbGF5ZXJNb2RhbDtcbiAgICAgICAgdm0ub3BlblBsYXllck1vZGFsRnJvbUdhbWVNb2RhbCA9IG9wZW5QbGF5ZXJNb2RhbEZyb21HYW1lTW9kYWw7XG4gICAgICAgIHZtLm9wZW5QbGF5ZXJNb2RhbEZyb21MZWFkZXJib2FyZE1vZGFsID0gb3BlblBsYXllck1vZGFsRnJvbUxlYWRlcmJvYXJkTW9kYWw7XG4gICAgICAgIHZtLm9wZW5SdWxlc01vZGFsID0gb3BlblJ1bGVzTW9kYWw7XG5cbiAgICAgICAgaW5pdEV2ZW50KCk7XG5cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgZnVuY3Rpb24gY2xvc2VHYW1lTW9kYWwoKSB7XG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNnYW1lTW9kYWwnKS5jbG9zZU1vZGFsKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjbG9zZU11bHRpR2FtZUxlYWRlcmJvYXJkTW9kYWwoKSB7XG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNtdWx0aUdhbWVMZWFkZXJib2FyZE1vZGFsJykuY2xvc2VNb2RhbCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY2xvc2VQbGF5ZXJNb2RhbCgpIHtcbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI3BsYXllck1vZGFsJykuY2xvc2VNb2RhbCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlVGVhbSgpIHtcbiAgICAgICAgICAgIHRlYW1TZXJ2aWNlLmNyZWF0ZVRlYW0odm0uZXZlbnROYW1lLCB2bS5uZXdUZWFtKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIE1hdGVyaWFsaXplLnRvYXN0KCdUZWFtICcgKyB2bS5uZXdUZWFtLnNob3J0TmFtZSArICcgY3JlYXRlZC4nLCA0MDAwKTtcbiAgICAgICAgICAgICAgICB2bS5uZXdUZWFtID0gbnVsbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZGV0ZXJtaW5lUG9pbnRzKGlucHV0U2NvcmVEYXRhLCBpbnB1dEluZGV4KSB7XG5cbiAgICAgICAgICAgIHZhciB1c2VyR2FtZVBvaW50cztcblxuICAgICAgICAgICAgLy8gTm8gcG9zaXRpb24gZ3JlYXRlciB0aGFuIDEyIGdldHMgcG9pbnRzLlxuICAgICAgICAgICAgaWYgKGlucHV0SW5kZXggPiAxMSkge1xuICAgICAgICAgICAgICAgIHVzZXJHYW1lUG9pbnRzID0gMDtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXNlckdhbWVQb2ludHM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHVzZXJHYW1lUG9pbnRzID0gMTIgLSBpbnB1dEluZGV4O1xuXG4gICAgICAgICAgICB2YXIgc29ydGVkU2NvcmVzID0gJGZpbHRlcignb3JkZXJCeScpKHZtLmdhbWVTY29yZXMsICctc2NvcmUnKTtcblxuICAgICAgICAgICAgLy8gQW0gSSB0aWVkIHdpdGggdGhlIHBlcnNvbiBhYm92ZSBtZT8gSWYgc28sIG1hdGNoIHRoZWlyIHBvaW50cy5cbiAgICAgICAgICAgIGlmIChzb3J0ZWRTY29yZXNbaW5wdXRJbmRleCAtIDFdKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoc29ydGVkU2NvcmVzW2lucHV0SW5kZXggLSAxXS5zY29yZSA9PT0gaW5wdXRTY29yZURhdGEuc2NvcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgdXNlckdhbWVQb2ludHMgKz0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB1c2VyR2FtZVBvaW50cztcblxuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIGdldEZpcnN0UGxhY2VTY29yZXMoKSB7XG5cbiAgICAgICAgICAgIHZtLmdhbWVMaXN0LmZvckVhY2goZnVuY3Rpb24oZ2FtZSkge1xuXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIHNjb3JlcywgZ2V0IHRoZSB0b3Agb25lLlxuICAgICAgICAgICAgICAgIGlmIChnYW1lLnNjb3Jlcykge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzY29yZXNBcnJheSA9ICQubWFwKGdhbWUuc2NvcmVzLCBmdW5jdGlvbihlbCkgeyByZXR1cm4gZWw7IH0pO1xuICAgICAgICAgICAgICAgICAgICBzY29yZXNBcnJheSA9ICRmaWx0ZXIoJ29yZGVyQnknKShzY29yZXNBcnJheSwgJy1zY29yZScpO1xuICAgICAgICAgICAgICAgICAgICBnYW1lLmZpcnN0U2NvcmUgPSBzY29yZXNBcnJheVswXTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdvVG9QbGF5ZXJQcm9maWxlKGlucHV0UGxheWVyKSB7XG5cbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI3BsYXllck1vZGFsJykuY2xvc2VNb2RhbCgpO1xuICAgICAgICAgICAgJHN0YXRlLmdvKCdwcm9maWxlJywge3VzZXJuYW1lOiBpbnB1dFBsYXllcn0pO1xuXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpbml0RXZlbnQoKSB7XG5cbiAgICAgICAgICAgIGV2ZW50U2VydmljZS5nZXRFdmVudFByb3BlcnRpZXModm0uZXZlbnROYW1lKS50aGVuKGZ1bmN0aW9uIHRoZW4obW9kZWwpIHtcblxuICAgICAgICAgICAgICAgIHZtLmV2ZW50UHJvcGVydGllcyA9IG1vZGVsO1xuXG4gICAgICAgICAgICAgICAgdm0uZXZlbnRQcm9wZXJ0aWVzLiRsb2FkZWQoKS50aGVuKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgYSBtdWx0aWdhbWUgZXZlbnQsIGdldCB0aGUgZGF0YSBuZWVkZWQgZm9yIG11bHRpZ2FtZSBjb21wb25lbnRzLlxuICAgICAgICAgICAgICAgICAgICBpZiAodm0uZXZlbnRQcm9wZXJ0aWVzLmZvcm1hdC5tdWx0aUdhbWUpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTZXJ2aWNlLmdldEdhbWVzTGlzdCh2bS5ldmVudE5hbWUpLnRoZW4oZnVuY3Rpb24gdGhlbihtb2RlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZtLmdhbWVMaXN0ID0gbW9kZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0Rmlyc3RQbGFjZVNjb3JlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U2VydmljZS5nZXRNdWx0aUdhbWVMZWFkZXJib2FyZCh2bS5ldmVudE5hbWUpLnRoZW4oZnVuY3Rpb24gdGhlbihtb2RlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsZWFkZXJib2FyZCA9IG1vZGVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZtLmxlYWRlcmJvYXJkTGVuZ3RoID0gbGVhZGVyYm9hcmQubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZtLnN1bW1hcml6ZWRMZWFkZXJib2FyZCA9IGxlYWRlcmJvYXJkLnNsaWNlKDAsIDgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBhIHNpbmdsZSBnYW1lIGV2ZW50LCBnZXQgdGhlIGRhdGEgbmVlZGVkIGZvciBzaW5nbGUgZ2FtZSBjb21wb25lbnRzLlxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudFNlcnZpY2UuZ2V0U2luZ2xlR2FtZUxlYWRlcmJvYXJkKHZtLmV2ZW50TmFtZSkudGhlbihmdW5jdGlvbiB0aGVuKG1vZGVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxlYWRlcmJvYXJkID0gbW9kZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdm0ubGVhZGVyYm9hcmRMZW5ndGggPSBsZWFkZXJib2FyZC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdm0uc3VtbWFyaXplZExlYWRlcmJvYXJkID0gbGVhZGVyYm9hcmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBhIHRlYW0tYmFzZWQgZXZlbnQsIGdldCB0aGUgZGF0YSBuZWVkZWQgZm9yIHRlYW0gZXZlbnQgY29tcG9uZW50cy5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHZtLmV2ZW50UHJvcGVydGllcy5mb3JtYXQudGVhbUJhc2VkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRlYW1TZXJ2aWNlLmdldFRlYW1MaXN0KHZtLmV2ZW50TmFtZSkudGhlbihmdW5jdGlvbiB0aGVuKG1vZGVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdm0udGVhbUxpc3QgPSBtb2RlbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodm0uZXZlbnRQcm9wZXJ0aWVzLnN0YXRlID09PSAndXBjb21pbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcuY29sbGFwc2libGUnKS5jb2xsYXBzaWJsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3JkaW9uOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBwcm9maWxlU2VydmljZS5nZXRBdmF0YXJEYXRhKCkudGhlbihmdW5jdGlvbiB0aGVuKG1vZGVsKSB7XG4gICAgICAgICAgICAgICAgdm0uYXZhdGFyRGF0YSA9IG1vZGVsO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9wZW5CYWRnZXNNb2RhbCgpIHtcblxuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjYmFkZ2VzTW9kYWwnKS5vcGVuTW9kYWwoKTtcbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI2JhZGdlc01vZGFsQ29udGVudCcpLnNjcm9sbFRvcCgwKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb3BlbkdhbWVNb2RhbChpbnB1dEdhbWVOYW1lKSB7XG5cbiAgICAgICAgICAgIHZhciByZWYgPSBuZXcgRmlyZWJhc2UoRklSRUJBU0VEQVRBLkZCVVJMKTtcblxuICAgICAgICAgICAgZXZlbnRTZXJ2aWNlLmdldEdhbWVEYXRhKHZtLmV2ZW50TmFtZSwgaW5wdXRHYW1lTmFtZSkudGhlbihmdW5jdGlvbiB0aGVuKG1vZGVsKSB7XG4gICAgICAgICAgICAgICAgdm0uZ2FtZURhdGEgPSBtb2RlbDtcblxuICAgICAgICAgICAgICAgIHZtLmdhbWVTY29yZXMgPSAkZmlyZWJhc2VBcnJheShcbiAgICAgICAgICAgICAgICAgICAgcmVmXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2hpbGQoJ2NvbnRlc3RzJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jaGlsZCh2bS5ldmVudE5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2hpbGQoJ2FjdGl2ZUdhbWVzJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jaGlsZCh2bS5nYW1lRGF0YS4kaWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2hpbGQoJ3Njb3JlcycpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNnYW1lTW9kYWwnKS5vcGVuTW9kYWwoKTtcbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI2dhbWVNb2RhbENvbnRlbnQnKS5zY3JvbGxUb3AoMCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9wZW5NYW5hZ2VtZW50TW9kYWwoKSB7XG5cbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI21hbmFnZW1lbnRNb2RhbCcpLm9wZW5Nb2RhbCgpO1xuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjbWFuYWdlbWVudE1vZGFsQ29udGVudCcpLnNjcm9sbFRvcCgwKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb3Blbk11bHRpR2FtZUxlYWRlcmJvYXJkTW9kYWwoKSB7XG5cbiAgICAgICAgICAgIGV2ZW50U2VydmljZS5nZXRNdWx0aUdhbWVMZWFkZXJib2FyZCh2bS5ldmVudE5hbWUpLnRoZW4oZnVuY3Rpb24gdGhlbihtb2RlbCkge1xuICAgICAgICAgICAgICAgIHZtLmNvbXBsZXRlTGVhZGVyYm9hcmQgPSBtb2RlbDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNtdWx0aUdhbWVMZWFkZXJib2FyZE1vZGFsJykub3Blbk1vZGFsKCk7XG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNtdWx0aUdhbWVMZWFkZXJib2FyZE1vZGFsQ29udGVudCcpLnNjcm9sbFRvcCgwKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb3BlblBsYXllck1vZGFsKGlucHV0UGxheWVyKSB7XG5cbiAgICAgICAgICAgIHZtLmZvY3VzUGxheWVyID0gaW5wdXRQbGF5ZXI7XG5cbiAgICAgICAgICAgIGV2ZW50U2VydmljZS5nZXRQbGF5ZXJTY29yZXModm0uZXZlbnROYW1lLCB2bS5nYW1lTGlzdCwgdm0uZm9jdXNQbGF5ZXIpLnRoZW4oZnVuY3Rpb24gdGhlbihtb2RlbCkge1xuICAgICAgICAgICAgICAgIHZtLnBsYXllclNjb3JlcyA9IG1vZGVsO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI3BsYXllck1vZGFsJykub3Blbk1vZGFsKCk7XG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNwbGF5ZXJNb2RhbENvbnRlbnQnKS5zY3JvbGxUb3AoMCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9wZW5HYW1lTW9kYWxGcm9tUGxheWVyTW9kYWwoaW5wdXRHYW1lKSB7XG5cbiAgICAgICAgICAgIGNsb3NlUGxheWVyTW9kYWwoKTtcblxuICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgb3BlbkdhbWVNb2RhbChpbnB1dEdhbWUpO1xuICAgICAgICAgICAgfSwgNDUwKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb3BlblBsYXllck1vZGFsRnJvbUdhbWVNb2RhbChpbnB1dFBsYXllcikge1xuXG4gICAgICAgICAgICBjbG9zZUdhbWVNb2RhbCgpO1xuXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBvcGVuUGxheWVyTW9kYWwoaW5wdXRQbGF5ZXIpO1xuICAgICAgICAgICAgfSwgNDUwKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb3BlblBsYXllck1vZGFsRnJvbUxlYWRlcmJvYXJkTW9kYWwoaW5wdXRQbGF5ZXIpIHtcblxuICAgICAgICAgICAgY2xvc2VNdWx0aUdhbWVMZWFkZXJib2FyZE1vZGFsKCk7XG5cbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIG9wZW5QbGF5ZXJNb2RhbChpbnB1dFBsYXllcik7XG4gICAgICAgICAgICB9LCA0NTApO1xuXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvcGVuUnVsZXNNb2RhbCgpIHtcbiAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI3J1bGVzTW9kYWwnKS5vcGVuTW9kYWwoKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59KSgpOyIsIihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ3ZnLmFwcCcpXG4gICAgICAgIC5zZXJ2aWNlKCd0ZWFtU2VydmljZScsIHRlYW1TZXJ2aWNlKTtcblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHRlYW1TZXJ2aWNlKCRxLCAkZmlyZWJhc2VBcnJheSwgJGZpcmViYXNlT2JqZWN0LCBGSVJFQkFTRURBVEEpIHtcblxuICAgIFx0dGhpcy5jcmVhdGVUZWFtID0gY3JlYXRlVGVhbTtcbiAgICAgICAgdGhpcy5nZXRUZWFtTGlzdCA9IGdldFRlYW1MaXN0O1xuXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVUZWFtKGlucHV0RXZlbnQsIGlucHV0TmV3VGVhbVByb3BlcnRpZXMpIHtcblxuICAgICAgICBcdHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgXHR2YXIgcmVmID0gbmV3IEZpcmViYXNlKEZJUkVCQVNFREFUQS5GQlVSTCk7XG4gICAgICAgIFx0dmFyIHRlYW1Qb29sID0gJGZpcmViYXNlT2JqZWN0KFxuICAgICAgICBcdFx0cmVmXG4gICAgICAgIFx0XHRcdC5jaGlsZCgnY29udGVzdHMnKVxuICAgICAgICBcdFx0XHQuY2hpbGQoaW5wdXRFdmVudClcbiAgICAgICAgXHRcdFx0LmNoaWxkKCd0ZWFtUG9vbCcpXG4gICAgICAgIFx0KTtcblxuICAgICAgICBcdHRlYW1Qb29sLiRsb2FkZWQoKS50aGVuKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIFx0XHR0ZWFtUG9vbFtpbnB1dE5ld1RlYW1Qcm9wZXJ0aWVzLnNob3J0TmFtZV0gPSB7XG4gICAgICAgIFx0XHRcdGZ1bGxOYW1lOiBpbnB1dE5ld1RlYW1Qcm9wZXJ0aWVzLmZvcm1hbE5hbWVcbiAgICAgICAgXHRcdH07XG4gICAgICAgIFx0XHR0ZWFtUG9vbC4kc2F2ZSgpO1xuICAgICAgICBcdFx0ZGVmZXJyZWQucmVzb2x2ZSgpO1xuXG4gICAgICAgIFx0fSk7XG5cbiAgICAgICAgXHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcblxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0VGVhbUxpc3QoaW5wdXRFdmVudCkge1xuXG4gICAgICAgIFx0dmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICBcdHZhciByZWYgPSBuZXcgRmlyZWJhc2UoRklSRUJBU0VEQVRBLkZCVVJMKTtcbiAgICAgICAgXHR2YXIgdGVhbUxpc3QgPSAkZmlyZWJhc2VBcnJheShcbiAgICAgICAgXHRcdHJlZlxuICAgICAgICBcdFx0XHQuY2hpbGQoJ2NvbnRlc3RzJylcbiAgICAgICAgXHRcdFx0LmNoaWxkKGlucHV0RXZlbnQpXG4gICAgICAgIFx0XHRcdC5jaGlsZCgndGVhbVBvb2wnKVxuICAgICAgICBcdCk7XG5cbiAgICAgICAgXHR0ZWFtTGlzdC4kbG9hZGVkKCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgXHRcdGRlZmVycmVkLnJlc29sdmUodGVhbUxpc3QpO1xuICAgICAgICBcdH0pO1xuXG4gICAgICAgIFx0cmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG5cbiAgICAgICAgfVxuICAgIH1cbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgndmcuYXBwJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0hlYWRlckNvbnRyb2xsZXInLCBIZWFkZXJDb250cm9sbGVyKTtcblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIEhlYWRlckNvbnRyb2xsZXIoJHRpbWVvdXQsICRyb290U2NvcGUsICR3aW5kb3csICRzdGF0ZSwgYXV0aFNlcnZpY2UpIHtcblxuICAgICAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XG4gICAgICAgIHZtLmxvZ091dCA9IGxvZ091dDtcblxuICAgICAgICBhY3RpdmF0ZSgpO1xuXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5kcm9wZG93bi1idXR0b24nKVxuICAgICAgICAgICAgICAgICAgICAuZHJvcGRvd24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5EdXJhdGlvbjogMzAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0RHVyYXRpb246IDIyNSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0cmFpbl93aWR0aDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBob3ZlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBndXR0ZXI6IC0xMTQsXG4gICAgICAgICAgICAgICAgICAgICAgICBiZWxvd09yaWdpbjogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIDQwMCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBsb2dPdXQoKSB7XG4gICAgICAgICAgICBhdXRoU2VydmljZS5sb2dPdXQoKTtcbiAgICAgICAgICAgICR3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgIH1cblxuICAgIH1cbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgndmcuYXBwJylcbiAgICAgICAgLmZpbHRlcignb3JkZXJPYmplY3RCeScsIG9yZGVyT2JqZWN0QnkpO1xuXG4gICAgZnVuY3Rpb24gb3JkZXJPYmplY3RCeSgpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGl0ZW1zLCBmaWVsZCwgcmV2ZXJzZSkge1xuICAgICAgICAgICAgdmFyIGZpbHRlcmVkID0gW107XG5cbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChpdGVtcywgZnVuY3Rpb24oaXRlbSwga2V5KSB7XG4gICAgICAgICAgICAgICAgaXRlbS5rZXkgPSBrZXk7XG4gICAgICAgICAgICAgICAgZmlsdGVyZWQucHVzaChpdGVtKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmaWx0ZXJlZC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChhW2ZpZWxkXSA+IGJbZmllbGRdID8gMSA6IC0xKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZihyZXZlcnNlKSBmaWx0ZXJlZC5yZXZlcnNlKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBmaWx0ZXJlZDtcbiAgICAgICAgfTtcbiAgICB9XG5cbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgndmcuYXBwJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0F2YXRhckNvbnRyb2xsZXInLCBBdmF0YXJDb250cm9sbGVyKTtcblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIEF2YXRhckNvbnRyb2xsZXIoJHJvb3RTY29wZSwgJHN0YXRlLCAkc3RhdGVQYXJhbXMsICR0aW1lb3V0LCBVcGxvYWQsIGltZ3VyLCBwcm9maWxlU2VydmljZSkge1xuXG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICAgICAgdmFyIHZtID0gdGhpcztcbiAgICAgICAgdm0udXBsb2FkQXZhdGFyID0gdXBsb2FkQXZhdGFyO1xuXG4gICAgICAgIGFjdGl2YXRlKCk7XG5cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgICBcdHByb2ZpbGVTZXJ2aWNlLmdldEF2YXRhckRhdGEoKS50aGVuKGZ1bmN0aW9uIHRoZW4obW9kZWwpIHtcbiAgICAgICAgICAgICAgICB2bS5hdmF0YXJEYXRhID0gbW9kZWw7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gRklYTUU6IFRoaXMgbmVlZHMgdG8gYmUgdHJpZ2dlcmVkIGJ5IGEgJHJvb3RTY29wZSBicm9hZGNhc3Qgb2Ygd2hlbiBpdCByZWNlaXZlcyBwcm9maWxlIGRhdGEuXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwcm9maWxlU2VydmljZS5nZXRCYWRnZXNEYXRhKCRyb290U2NvcGUucHJvZmlsZS51c2VyTmFtZSkudGhlbihmdW5jdGlvbiB0aGVuKG1vZGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZtLmJhZGdlc0RhdGEgPSBtb2RlbDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1cGxvYWRBdmF0YXIoKSB7XG5cbiAgICAgICAgXHR2bS5kaXNhYmxlQnV0dG9uID0gdHJ1ZTtcblxuICAgICAgICBcdGltZ3VyLnNldEFQSUtleSgnQ2xpZW50LUlEIGY1M2Q2ZDU4MzNiMDdiYycpO1xuICAgICAgICBcdGltZ3VyLnVwbG9hZCh2bS5maWxlKS50aGVuKGZ1bmN0aW9uIHRoZW4obW9kZWwpIHtcbiAgICAgICAgXHRcdHByb2ZpbGVTZXJ2aWNlLnNhdmVBdmF0YXJMaW5rKG1vZGVsWzBdLmxpbmssICRyb290U2NvcGUucHJvZmlsZS51c2VyTmFtZSk7XG4gICAgICAgIFx0XHRNYXRlcmlhbGl6ZS50b2FzdCgnWW91ciBhdmF0YXIgd2FzIHVwbG9hZGVkJywgNDAwMCk7XG5cbiAgICAgICAgXHRcdCR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBcdFx0XHQkc3RhdGUuZ28oJ2hvbWUnKTtcbiAgICAgICAgXHRcdH0sIDEwMDApO1xuICAgICAgICBcdH0pO1xuXG4gICAgICAgIH1cblxuICAgIH1cbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgndmcuYXBwJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0NoYW5nZVBhc3N3b3JkQ29udHJvbGxlcicsIENoYW5nZVBhc3N3b3JkQ29udHJvbGxlcik7XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBDaGFuZ2VQYXNzd29yZENvbnRyb2xsZXIoJHNjb3BlLCAkdGltZW91dCwgJHN0YXRlLCBBdXRoV3JhcHBlcikge1xuXG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICAgICAgdmFyIHZtID0gdGhpcztcbiAgICAgICAgXG4gICAgICAgIHZtLnN1Ym1pdENoYW5nZVBhc3N3b3JkID0gc3VibWl0Q2hhbmdlUGFzc3dvcmQ7XG5cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgZnVuY3Rpb24gc3VibWl0Q2hhbmdlUGFzc3dvcmQoKSB7XG5cbiAgICAgICAgICAgIGlmICgkc2NvcGUucHdDaGFuZ2VGb3JtLiR2YWxpZCkge1xuXG4gICAgICAgICAgICAgICAgQXV0aFdyYXBwZXIuJGNoYW5nZVBhc3N3b3JkKHtcbiAgICAgICAgICAgICAgICAgICAgZW1haWw6IEF1dGhXcmFwcGVyLiRnZXRBdXRoKCkucGFzc3dvcmQuZW1haWwsXG4gICAgICAgICAgICAgICAgICAgIG9sZFBhc3N3b3JkOiB2bS5pbnB1dEN1cnJlbnRQYXNzd29yZCxcbiAgICAgICAgICAgICAgICAgICAgbmV3UGFzc3dvcmQ6IHZtLmlucHV0TmV3UGFzc3dvcmRcbiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIE1hdGVyaWFsaXplLnRvYXN0KCdZb3VyIHBhc3N3b3JkIHdhcyBjaGFuZ2VkLicsIDQwMDApO1xuICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnaG9tZScpO1xuICAgICAgICAgICAgICAgICAgICB9LCAxMDAwKTtcblxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gJ0lOVkFMSURfUEFTU1dPUkQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5zaG93Q2hhbmdlUGFzc3dvcmRNZXNzYWdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9O1xuXG4gICAgfVxuXG59KSgpOyIsIihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ3ZnLmFwcCcpXG4gICAgICAgIC5jb250cm9sbGVyKCdIb21lQ29udHJvbGxlcicsIEhvbWVDb250cm9sbGVyKTtcblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIEhvbWVDb250cm9sbGVyKCRzY29wZSwgJHRpbWVvdXQpIHtcblxuICAgICAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XG5cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICB9XG5cbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgndmcuYXBwJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0xlYWRlcmJvYXJkQ29udHJvbGxlcicsIExlYWRlcmJvYXJkQ29udHJvbGxlcik7XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBMZWFkZXJib2FyZENvbnRyb2xsZXIoJHEsICR0aW1lb3V0LCAkZmlyZWJhc2VBcnJheSwgcHJvZmlsZVNlcnZpY2UsIEZJUkVCQVNFREFUQSkge1xuXG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICBcdHZhciB2bSA9IHRoaXM7XG5cbiAgICAgICAgYWN0aXZhdGUoKTtcblxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gICAgICAgICAgICBnZXRQcm9maWxlU2NvcmVzKCkudGhlbihmdW5jdGlvbiB0aGVuKG1vZGVsKSB7XG4gICAgICAgICAgICAgICAgdm0ucHJvZmlsZVNjb3JlRGF0YSA9IG1vZGVsO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHByb2ZpbGVTZXJ2aWNlLmdldEF2YXRhckRhdGEoKS50aGVuKGZ1bmN0aW9uIHRoZW4obW9kZWwpIHtcbiAgICAgICAgICAgICAgICB2bS5hdmF0YXJEYXRhID0gbW9kZWw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldFByb2ZpbGVTY29yZXMoKSB7XG5cbiAgICAgICAgXHR2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICBcdHZhciByZWYgPSBuZXcgRmlyZWJhc2UoRklSRUJBU0VEQVRBLkZCVVJMKTtcblxuICAgICAgICBcdHZhciBwcm9maWxlU2NvcmVEYXRhID0gJGZpcmViYXNlQXJyYXkoXG4gICAgICAgIFx0XHRyZWZcbiAgICAgICAgXHRcdFx0LmNoaWxkKCdiYWRnZXMnKVxuICAgICAgICBcdCk7XG5cbiAgICAgICAgXHRwcm9maWxlU2NvcmVEYXRhLiRsb2FkZWQoZnVuY3Rpb24oKSB7XG4gICAgICAgIFx0XHRkZWZlcnJlZC5yZXNvbHZlKHByb2ZpbGVTY29yZURhdGEpO1xuICAgICAgICBcdH0pO1xuXG4gICAgICAgIFx0cmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG5cbiAgICAgICAgfVxuXG4gICAgfVxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCd2Zy5hcHAnKVxuICAgICAgICAuY29udHJvbGxlcignUHJvZmlsZUNvbnRyb2xsZXInLCBQcm9maWxlQ29udHJvbGxlcik7XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBQcm9maWxlQ29udHJvbGxlcigkc2NvcGUsICRzdGF0ZVBhcmFtcywgJHEsICR0aW1lb3V0LCAkc3RhdGUsICRmaXJlYmFzZUFycmF5LCBhdXRoU2VydmljZSwgcHJvZmlsZVNlcnZpY2UsIGV2ZW50U2VydmljZSkge1xuXG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICAgICAgdmFyIHZtID0gdGhpcztcbiAgICAgICAgXG4gICAgICAgIGFjdGl2YXRlKCk7XG5cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG5cbiAgICAgICAgICAgIHByb2ZpbGVTZXJ2aWNlLmdldFVzZXJEYXRhKCRzdGF0ZVBhcmFtcy51c2VybmFtZSkudGhlbihmdW5jdGlvbiB0aGVuKG1vZGVsKSB7XG4gICAgICAgICAgICAgICAgdm0ucHJvZmlsZURhdGEgPSBtb2RlbDtcblxuICAgICAgICAgICAgICAgIHByb2ZpbGVTZXJ2aWNlLmdldFRvdXJuYW1lbnRIaXN0b3J5KHZtLnByb2ZpbGVEYXRhKS50aGVuKGZ1bmN0aW9uIHRoZW4obW9kZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvdXJuYW1lbnRIaXN0b3J5RGF0YSA9IG1vZGVsO1xuICAgICAgICAgICAgICAgICAgICB2bS5ldmVudFN0YW5kaW5ncyA9IHByb2ZpbGVTZXJ2aWNlLmdldFRvdXJuYW1lbnRTdGFuZGluZ3ModG91cm5hbWVudEhpc3RvcnlEYXRhLCAkc3RhdGVQYXJhbXMudXNlcm5hbWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgJCgnLmNvbGxhcHNpYmxlJykuY29sbGFwc2libGUoe1xuICAgICAgICAgICAgICAgICAgICBhY2NvcmRpb246IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBwcm9maWxlU2VydmljZS5nZXRBdmF0YXJEYXRhKCkudGhlbihmdW5jdGlvbiB0aGVuKG1vZGVsKSB7XG4gICAgICAgICAgICAgICAgdm0uYXZhdGFyRGF0YSA9IG1vZGVsO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHByb2ZpbGVTZXJ2aWNlLmdldEJhZGdlc0RhdGEoJHN0YXRlUGFyYW1zLnVzZXJuYW1lKS50aGVuKGZ1bmN0aW9uIHRoZW4obW9kZWwpIHtcbiAgICAgICAgICAgICAgICB2bS5iYWRnZXNEYXRhID0gbW9kZWw7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICB9XG5cbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgndmcuYXBwJylcbiAgICAgICAgLnNlcnZpY2UoJ3Byb2ZpbGVTZXJ2aWNlJywgcHJvZmlsZVNlcnZpY2UpO1xuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gcHJvZmlsZVNlcnZpY2UoJHJvb3RTY29wZSwgJHEsICRmaXJlYmFzZUFycmF5LCAkZmlyZWJhc2VPYmplY3QsIGV2ZW50U2VydmljZSwgRklSRUJBU0VEQVRBKSB7XG5cbiAgICBcdHRoaXMuZ2V0QXZhdGFyRGF0YSA9IGdldEF2YXRhckRhdGE7XG4gICAgICAgIHRoaXMuZ2V0QmFkZ2VzRGF0YSA9IGdldEJhZGdlc0RhdGE7XG4gICAgXHR0aGlzLmdldFRvdXJuYW1lbnRIaXN0b3J5ID0gZ2V0VG91cm5hbWVudEhpc3Rvcnk7XG4gICAgICAgIHRoaXMuZ2V0VG91cm5hbWVudFN0YW5kaW5ncyA9IGdldFRvdXJuYW1lbnRTdGFuZGluZ3M7XG4gICAgICAgIHRoaXMuZ2V0VXNlckRhdGEgPSBnZXRVc2VyRGF0YTtcbiAgICAgICAgdGhpcy5zYXZlQXZhdGFyTGluayA9IHNhdmVBdmF0YXJMaW5rO1xuXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICBmdW5jdGlvbiBnZXRBdmF0YXJEYXRhKCkge1xuXG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgdmFyIHJlZiA9IG5ldyBGaXJlYmFzZShGSVJFQkFTRURBVEEuRkJVUkwpO1xuXG4gICAgICAgICAgICB2YXIgYXZhdGFyRGF0YSA9ICRmaXJlYmFzZU9iamVjdChcbiAgICAgICAgICAgICAgICByZWZcbiAgICAgICAgICAgICAgICAgICAgLmNoaWxkKCdhdmF0YXJzJylcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGF2YXRhckRhdGEuJGxvYWRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGF2YXRhckRhdGEpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRCYWRnZXNEYXRhKGlucHV0VXNlcikge1xuXG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgdmFyIHJlZiA9IG5ldyBGaXJlYmFzZShGSVJFQkFTRURBVEEuRkJVUkwpO1xuXG4gICAgICAgICAgICB2YXIgYmFkZ2VzRGF0YSA9ICRmaXJlYmFzZU9iamVjdChcbiAgICAgICAgICAgICAgICByZWZcbiAgICAgICAgICAgICAgICAgICAgLmNoaWxkKCdiYWRnZXMnKVxuICAgICAgICAgICAgICAgICAgICAuY2hpbGQoaW5wdXRVc2VyKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgYmFkZ2VzRGF0YS4kbG9hZGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoYmFkZ2VzRGF0YSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldFRvdXJuYW1lbnRIaXN0b3J5KGlucHV0VXNlckRhdGEpIHtcblxuICAgICAgICBcdHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgIFx0dmFyIHJlZiA9IG5ldyBGaXJlYmFzZShGSVJFQkFTRURBVEEuRkJVUkwpO1xuXG4gICAgICAgIFx0Ly8gTG9vcCB0aHJvdWdoIGVhY2ggZXZlbnQgaW4gdGhlIHBsZWRnZWRUbyBvYmplY3QuXG4gICAgICAgIFx0dmFyIGV2ZW50c0FycmF5ID0gW107XG4gICAgICAgIFx0Zm9yICh2YXIga2V5IGluIGlucHV0VXNlckRhdGEucGxlZGdlZFRvKSB7XG4gICAgICAgIFx0XHRldmVudHNBcnJheS5wdXNoKGtleSk7XG4gICAgICAgIFx0fVxuXG4gICAgICAgIFx0ZGVmZXJyZWQucmVzb2x2ZShldmVudHNBcnJheSk7XG5cbiAgICAgICAgXHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcblxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0VG91cm5hbWVudFN0YW5kaW5ncyhpbnB1dFRvdXJuYW1lbnRIaXN0b3J5LCBpbnB1dFVzZXIpIHtcblxuICAgICAgICAgICAgdmFyIHJlZiA9IG5ldyBGaXJlYmFzZShGSVJFQkFTRURBVEEuRkJVUkwpO1xuXG4gICAgICAgICAgICAvLyBMb29wIHRocm91Z2ggZWFjaCBldmVudCBpbiB0aGUgdXNlcidzIGhpc3RvcnkuXG4gICAgICAgICAgICB2YXIgZXZlbnRTdGFuZGluZ3MgPSBbXTtcbiAgICAgICAgICAgIGlucHV0VG91cm5hbWVudEhpc3RvcnkuZm9yRWFjaChmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgICAgICAgICAgZXZlbnRTZXJ2aWNlLmdldEV2ZW50UHJvcGVydGllcyhldmVudCkudGhlbihmdW5jdGlvbihldmVudFByb3BlcnRpZXMpIHtcblxuICAgICAgICAgICAgICAgICAgICBldmVudFByb3BlcnRpZXMuJGxvYWRlZCgpLnRoZW4oZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIGNvbmNsdWRlZCwgZ2V0IHRoZSB1c2VyJ3Mgc3RhbmRpbmcuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnRQcm9wZXJ0aWVzLnN0YXRlID09PSAnY29uY2x1ZGVkJykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50U3RhbmRpbmdEYXRhID0gJGZpcmViYXNlT2JqZWN0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jaGlsZCgnc3RhbmRpbmdzJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jaGlsZChldmVudClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTdGFuZGluZ0RhdGEuJGxvYWRlZCgpLnRoZW4oZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50U3RhbmRpbmdEYXRhW2lucHV0VXNlcl0pIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTdGFuZGluZ3MucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogZXZlbnRQcm9wZXJ0aWVzLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlbWllcjogZXZlbnRQcm9wZXJ0aWVzLnByZW1pZXIgPyB0cnVlIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG9ydE5hbWU6IGV2ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiAnY29uY2x1ZGVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogZXZlbnRQcm9wZXJ0aWVzLmNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBldmVudFN0YW5kaW5nRGF0YVtpbnB1dFVzZXJdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFN0YW5kaW5ncy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBldmVudFByb3BlcnRpZXMubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVtaWVyOiBldmVudFByb3BlcnRpZXMucHJlbWllciA/IHRydWUgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3J0TmFtZTogZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6ICdjb25jbHVkZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBldmVudFByb3BlcnRpZXMuY29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IC0xXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudFByb3BlcnRpZXMuc3RhdGUgPT09ICdpbnByb2dyZXNzJyB8fCBldmVudFByb3BlcnRpZXMuc3RhdGUgPT09ICd1cGNvbWluZycpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U3RhbmRpbmdzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBldmVudFByb3BlcnRpZXMubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlbWllcjogZXZlbnRQcm9wZXJ0aWVzLnByZW1pZXIgPyB0cnVlIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvcnROYW1lOiBldmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGV2ZW50UHJvcGVydGllcy5jb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6IGV2ZW50UHJvcGVydGllcy5zdGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBldmVudFN0YW5kaW5ncztcblxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0VXNlckRhdGEoaW5wdXRVc2VyKSB7XG5cbiAgICAgICAgXHR2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICBcdHZhciByZWYgPSBuZXcgRmlyZWJhc2UoRklSRUJBU0VEQVRBLkZCVVJMKTtcblxuICAgICAgICBcdHZhciB1c2Vyc0RhdGEgPSAkZmlyZWJhc2VBcnJheShcbiAgICAgICAgXHRcdHJlZlxuICAgICAgICBcdFx0XHQuY2hpbGQoJ3VzZXJzJylcbiAgICAgICAgXHQpO1xuXG4gICAgICAgIFx0dXNlcnNEYXRhLiRsb2FkZWQoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgXHRcdHVzZXJzRGF0YS5mb3JFYWNoKGZ1bmN0aW9uKHVzZXIpIHtcbiAgICAgICAgXHRcdFx0aWYgKHVzZXIudXNlck5hbWUgPT09IGlucHV0VXNlcikge1xuICAgICAgICBcdFx0XHRcdGRlZmVycmVkLnJlc29sdmUodXNlcik7XG4gICAgICAgIFx0XHRcdH1cbiAgICAgICAgXHRcdH0pO1xuXG4gICAgICAgIFx0fSk7XG5cbiAgICAgICAgXHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcblxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRklYTUU6IE1ha2UgdGhpcyBzZXJ2ZXItc2lkZS5cbiAgICAgICAgZnVuY3Rpb24gc2F2ZUF2YXRhckxpbmsoaW5wdXRMaW5rLCBpbnB1dFVzZXIpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIHJlZiA9IG5ldyBGaXJlYmFzZShGSVJFQkFTRURBVEEuRkJVUkwpO1xuXG4gICAgICAgICAgICB2YXIgYXZhdGFyRGF0YSA9ICRmaXJlYmFzZU9iamVjdChcbiAgICAgICAgICAgICAgICByZWZcbiAgICAgICAgICAgICAgICAgICAgLmNoaWxkKCdhdmF0YXJzJylcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGF2YXRhckRhdGEuJGxvYWRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBhdmF0YXJEYXRhW2lucHV0VXNlcl0gPSBpbnB1dExpbms7XG4gICAgICAgICAgICAgICAgYXZhdGFyRGF0YS4kc2F2ZSgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgfVxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCd2Zy5hcHAnKVxuICAgICAgICAuY29udHJvbGxlcignUmVnQ29udHJvbGxlcicsIFJlZ0NvbnRyb2xsZXIpO1xuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gUmVnQ29udHJvbGxlcigkc2NvcGUsICRyb290U2NvcGUsICR0aW1lb3V0LCAkd2luZG93LCAkc3RhdGUsICRmaXJlYmFzZU9iamVjdCwgYXV0aFNlcnZpY2UsIEF1dGhXcmFwcGVyKSB7XG5cbiAgICAgICAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuXG4gICAgICAgIHZtLmxvZ2luVG9BY2NvdW50ID0gbG9naW5Ub0FjY291bnQ7XG4gICAgICAgIHZtLnBhc3N3b3JkUmVzZXQgPSBwYXNzd29yZFJlc2V0O1xuICAgICAgICB2bS5zdWJtaXROZXdBY2NvdW50ID0gc3VibWl0TmV3QWNjb3VudDtcblxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICBmdW5jdGlvbiBsb2dpblRvQWNjb3VudCgpIHtcblxuICAgICAgICAgICAgYXV0aFNlcnZpY2UubG9naW5Ub0FjY291bnQodm0ubG9naW5FbWFpbCwgdm0ubG9naW5QYXNzd29yZCkudGhlbihmdW5jdGlvbiB0aGVuKG1vZGVsKSB7XG5cbiAgICAgICAgICAgICAgICB2bS5zaG93SW52YWxpZFVzZXJFcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHZtLnNob3dJbnZhbGlkUGFzc3dvcmRFcnJvciA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1vZGVsID09PSAnTE9HSU5fU1VDQ0VTUycpIHtcblxuICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2hvbWUnKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobW9kZWwgPT09ICdJTlZBTElEX1VTRVInKSB7XG4gICAgICAgICAgICAgICAgICAgIHZtLnNob3dJbnZhbGlkVXNlckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobW9kZWwgPT09ICdJTlZBTElEX1BBU1NXT1JEJykge1xuICAgICAgICAgICAgICAgICAgICB2bS5zaG93SW52YWxpZFBhc3N3b3JkRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHBhc3N3b3JkUmVzZXQoKSB7XG5cbiAgICAgICAgICAgIGlmICghdm0ubG9naW5FbWFpbCkge1xuICAgICAgICAgICAgICAgIHZtLnNob3dQYXNzd29yZFJlc2V0RW1haWxNZXNzYWdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEF1dGhXcmFwcGVyLiRyZXNldFBhc3N3b3JkKHtcbiAgICAgICAgICAgICAgICBlbWFpbDogdm0ubG9naW5FbWFpbFxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2bS5zaG93UGFzc3dvcmRSZXNldEVtYWlsTWVzc2FnZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIE1hdGVyaWFsaXplLnRvYXN0KCdBIHBhc3N3b3JkIHJlc2V0IGVtYWlsIGhhcyBiZWVuIHNlbnQgdG8gJyArIHZtLmxvZ2luRW1haWwgKyAnLicsIDQwMDApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHN1Ym1pdE5ld0FjY291bnQoKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIERvZXMgdGhlIHVzZXIgZXhpc3Q/IElmIHNvLCBzaG93IGFuIGVycm9yIG1lc3NhZ2UuXG4gICAgICAgICAgICBhdXRoU2VydmljZS5jaGVja0lmVXNlckV4aXN0cyh2bS5uZXdVc2VybmFtZSkudGhlbihmdW5jdGlvbih1c2VyRXhpc3RzKSB7XG5cbiAgICAgICAgICAgICAgICB2bS5zaG93RHVwbGljYXRlVXNlckVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdm0uc2hvd0VtYWlsVGFrZW5FcnJvciA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgaWYgKHVzZXJFeGlzdHMpIHtcblxuICAgICAgICAgICAgICAgICAgICB2bS5zaG93RHVwbGljYXRlVXNlckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgLy8gVHJ5IHRvIGNyZWF0ZSB0aGUgbmV3IHVzZXIuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBhdXRoU2VydmljZS5jcmVhdGVOZXdVc2VyKHZtLm5ld0VtYWlsLCB2bS5uZXdQYXNzd29yZCwgdm0ubmV3VXNlcm5hbWUpLnRoZW4oZnVuY3Rpb24gdGhlbihtb2RlbCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9kZWwgPT09ICdFTUFJTF9UQUtFTicpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZtLnNob3dFbWFpbFRha2VuRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtb2RlbCA9PT0gJ0FDQ09VTlRfQ1JFQVRFRCcpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbygncHJvZmlsZScsIHt1c2VybmFtZTogdm0ubmV3VXNlcm5hbWV9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICB9XG5cbn0pKCk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9