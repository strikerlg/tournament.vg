!function(){"use strict";angular.module("vg.app",["ngAnimate","ui.router","firebase","validation.match","ordinal","ngFileUpload","ngImgur"])}(),function(){"use strict";function e(e,t){t.otherwise("/"),e.state("home",{url:"/",templateUrl:"app/home/home.htm",controller:"HomeController as home"}).state("registerOrLogin",{url:"/registerOrLogin",templateUrl:"/app/home/reg.htm",controller:"RegController as reg"}).state("profile",{url:"/profile/:username",templateUrl:"/app/home/profile.htm",controller:"ProfileController as profile"}).state("leaderboard",{url:"/leaderboard",templateUrl:"/app/home/leaderboard.htm",controller:"LeaderboardController as leaderboard"}).state("event",{url:"/event/:eventName/main",templateUrl:"/app/event/main.htm",controller:"EventMainController as event"}).state("customizeAvatar",{url:"/customizeAvatar",templateUrl:"/app/home/avatar.htm",controller:"AvatarController as avatar",resolve:{currentAuth:["AuthWrapper",function(e){return e.$requireAuth()}]}}).state("changePassword",{url:"/changePassword",templateUrl:"/app/home/changePassword.htm",controller:"ChangePasswordController as pwchange",resolve:{currentAuth:["AuthWrapper",function(e){return e.$requireAuth()}]}})}angular.module("vg.app").constant("FIREBASEDATA",{FBURL:"https://wolfscontests.firebaseio.com"}).config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e,t,n,r,o,a){e.$on("$stateChangeError",function(e,t,r,o,a,i){"AUTH_REQUIRED"===i&&n.go("registerOrLogin")}),e.$on("$stateChangeSuccess",function(){if(o.$getAuth()){var t=o.$getAuth(),n=new Firebase(a.FBURL),i=r(n.child("users").child(t.uid));i.$bindTo(e,"profile").then(function(t){e.unbindFunction=t})}})}angular.module("vg.app").run(e),e.$inject=["$rootScope","$location","$state","$firebaseObject","AuthWrapper","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,n,r,o,a){function i(t){var n=e.defer(),r=!1,o=new Firebase(a.FBURL+"/users");return o.once("value",function(e){e.forEach(function(e){e.val().userName===t&&(r=!0)}),n.resolve(r)}),n.promise}function s(t,n,r){var i=e.defer();return o.$createUser({email:t,password:n}).then(function(e){new Firebase(a.FBURL).child("users/"+e.uid).set({userName:r,role:"User"},function(e){return console.error(e),e.code}),new Firebase(a.FBURL).child("avatars").child(r).set("http://api.adorable.io/avatars/42/"+r),o.$authWithPassword({email:t,password:n}).then(function(){i.resolve("ACCOUNT_CREATED")})})["catch"](function(e){console.error(e),"EMAIL_TAKEN"===e.code&&i.resolve(e.code)}),i.promise}function l(t,n){var r=e.defer();return o.$authWithPassword({email:t,password:n}).then(function(e){r.resolve("LOGIN_SUCCESS")})["catch"](function(e){"INVALID_USER"===e.code?r.resolve("INVALID_USER"):"INVALID_PASSWORD"===e.code&&r.resolve("INVALID_PASSWORD")}),r.promise}function c(){o.$unauth(),t.unbindFunction()}this.checkIfUserExists=i,this.createNewUser=s,this.loginToAccount=l,this.logOut=c}angular.module("vg.app").service("authService",e),e.$inject=["$q","$rootScope","$state","$firebaseObject","AuthWrapper","FIREBASEDATA"]}(),function(){"use strict";function e(e,t){var n=new Firebase(t.FBURL);return e(n)}angular.module("vg.app").factory("AuthWrapper",e),e.$inject=["$firebaseAuth","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,n,r,o){function a(e){c(e).then(function(t){var r=new Firebase(o.FBURL),a=n(r.child("standings").child(e));a.$loaded().then(function(){t.forEach(function(e){a[e.key]=e.position}),a.$save()})})}function i(t){var r=e.defer(),a=new Firebase(o.FBURL),i=n(a.child("contests").child(t).child("properties"));return r.resolve(i),r.promise}function s(t,n){{var r=e.defer();new Firebase(o.FBURL)}return l(t).then(function(e){e.forEach(function(e){e.camelName===n&&r.resolve(e)})}),r.promise}function l(t){var n=e.defer(),a=new Firebase(o.FBURL),i=r(a.child("contests").child(t).child("activeGames"));return i.$loaded().then(function(){n.resolve(i)}),n.promise}function c(n){var r=e.defer(),o={};return l(n).then(function(e){var n=e;n.forEach(function(e){if(e.scores){var n=$.map(e.scores,function(e){return e});n=t("orderBy")(n,"-score");for(var r=12,a=0;a<n.length;a++)o[n[a].userName]||(o[n[a].userName]={points:0}),o[n[a].userName].points+=r,r>0&&(r-=1)}}),o=t("orderObjectBy")(o,"points",!0);for(var a=!1,i=0,s=0;s<o.length;s++)if(o[s-1]&&o[s].points&&o[s-1].points)o[s].position=o[s].points===o[s-1].points?o[s-1].position:s+1;else if(0===s)o[s].position=1;else{if(!a){var l=o[s-1].points;o.forEach(function(e){e.points===l&&(i+=1)}),a=!0}o[s].position=o.length+1-i}r.resolve(o)}),r.promise}function u(t){var n=e.defer(),a=new Firebase(o.FBURL),i=r(a.child("contests").child(t).child("scores"));return n.resolve(i),n.promise}function d(n,r,o){var a=e.defer(),i=[];return r.forEach(function(e){if(e.scores){var n=$.map(e.scores,function(e){return e});n=t("orderBy")(n,"-score");for(var r=12,a=0;a<n.length;a++){if(n[a].userName===o){var s=e;s.position=a+1,s.score=n[a].score,s.pointsEarned=r,s.inpUrl=n[a].inpUrl?n[a].inpUrl:null,s.twitchUrl=n[a].twitchUrl?n[a].twitchUrl:null,s.mameVersion=n[a].mameVersion?n[a].mameVersion:null,i.push(s),r=12;break}r>0&&(r-=1)}}}),a.resolve(i),a.promise}this.createMultiGameFinalStandings=a,this.getEventProperties=i,this.getGameData=s,this.getGamesList=l,this.getMultiGameLeaderboard=c,this.getSingleGameLeaderboard=u,this.getPlayerScores=d}angular.module("vg.app").service("eventService",e),e.$inject=["$q","$filter","$firebaseObject","$firebaseArray","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,n,r,o,a,i,s,l,c,u){function d(){angular.element("#gameModal").closeModal()}function m(){angular.element("#multiGameLeaderboardModal").closeModal()}function f(){angular.element("#playerModal").closeModal()}function p(){c.createTeam(D.eventName,D.newTeam).then(function(){Materialize.toast("Team "+D.newTeam.shortName+" created.",4e3),D.newTeam=null})}function h(e,n){var r;if(n>11)return r=0;r=12-n;var o=t("orderBy")(D.gameScores,"-score");return o[n-1]&&o[n-1].score===e.score&&(r+=1),r}function v(){D.gameList.forEach(function(e){if(e.scores){var n=$.map(e.scores,function(e){return e});n=t("orderBy")(n,"-score"),e.firstScore=n[0]}})}function g(e){angular.element("#playerModal").closeModal(),r.go("profile",{username:e})}function b(){o(function(){$(".collapsible").collapsible({accordion:!0}),$("ul.tabs").tabs()},1e3),o(function(){$(".collapsible").collapsible({accordion:!0}),$("ul.tabs").tabs()},3e3),i.getEventProperties(D.eventName).then(function(e){D.eventProperties=e,D.eventProperties.$loaded().then(function(){D.eventProperties.format.multiGame?(i.getGamesList(D.eventName).then(function(e){D.gameList=e,v()}),i.getMultiGameLeaderboard(D.eventName).then(function(e){var t=e;D.leaderboardLength=t.length,D.summarizedLeaderboard=t.slice(0,8)})):i.getSingleGameLeaderboard(D.eventName).then(function(e){var t=e;D.leaderboardLength=t.length,D.summarizedLeaderboard=t}),D.eventProperties.format.teamBased&&c.getTeamList(D.eventName).then(function(e){D.teamList=e})})}),l.getAvatarData().then(function(e){D.avatarData=e})}function w(){angular.element("#badgesModal").openModal(),angular.element("#badgesModalContent").scrollTop(0)}function A(e){var t=new Firebase(u.FBURL);i.getGameData(D.eventName,e).then(function(e){D.gameData=e,D.gameScores=a(t.child("contests").child(D.eventName).child("activeGames").child(D.gameData.$id).child("scores"))}),angular.element("#gameModal").openModal(),angular.element("#gameModalContent").scrollTop(0)}function E(){angular.element("#managementModal").openModal(),angular.element("#managementModalContent").scrollTop(0)}function L(){i.getMultiGameLeaderboard(D.eventName).then(function(e){D.completeLeaderboard=e}),angular.element("#multiGameLeaderboardModal").openModal(),angular.element("#multiGameLeaderboardModalContent").scrollTop(0)}function S(e){D.focusPlayer=e,i.getPlayerScores(D.eventName,D.gameList,D.focusPlayer).then(function(e){D.playerScores=e}),angular.element("#playerModal").openModal(),angular.element("#playerModalContent").scrollTop(0)}function U(e){f(),o(function(){A(e)},450)}function F(e){d(),o(function(){S(e)},450)}function M(e){m(),o(function(){S(e)},450)}function P(){angular.element("#rulesModal").openModal()}var D=this;D.eventName=n.eventName,D.closeGameModal=d,D.closeMultiGameLeaderboardModal=m,D.closePlayerModal=f,D.createTeam=p,D.determinePoints=h,D.getFirstPlaceScores=v,D.goToPlayerProfile=g,D.openBadgesModal=w,D.openGameModal=A,D.openGameModalFromPlayerModal=U,D.openManagementModal=E,D.openMultiGameLeaderboardModal=L,D.openPlayerModal=S,D.openPlayerModalFromGameModal=F,D.openPlayerModalFromLeaderboardModal=M,D.openRulesModal=P,b()}angular.module("vg.app").controller("EventMainController",e),e.$inject=["$scope","$filter","$stateParams","$state","$timeout","$firebaseArray","eventService","authService","profileService","teamService","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,n,r){function o(t,o){var a=e.defer(),i=new Firebase(r.FBURL),s=n(i.child("contests").child(t).child("teamPool"));return s.$loaded().then(function(){s[o.shortName]={fullName:o.formalName},s.$save(),a.resolve()}),a.promise}function a(n){var o=e.defer(),a=new Firebase(r.FBURL),i=t(a.child("contests").child(n).child("teamPool"));return i.$loaded().then(function(){o.resolve(i)}),o.promise}this.createTeam=o,this.getTeamList=a}angular.module("vg.app").service("teamService",e),e.$inject=["$q","$firebaseArray","$firebaseObject","FIREBASEDATA"]}(),function(){"use strict";function e(){function e(e,t,n){}var n={bindToController:!0,controller:t,controllerAs:"vm",link:e,restrict:"E",templateUrl:"./app/eventComponents/gamesList.directive.htm",scope:{data:"=",openGameFunction:"="}};return n}function t(){}angular.module("vg.app").directive("vgGamesList",e)}(),function(){"use strict";function e(){function e(e,t,n){}var n={bindToController:!0,controller:t,controllerAs:"vm",link:e,restrict:"E",templateUrl:"./app/eventComponents/multiGameLeaderboard.directive.htm",scope:{data:"=",avatarData:"=",completeLength:"=",openPlayerFunction:"=",openLeaderboardFunction:"="}};return n}function t(){}angular.module("vg.app").directive("vgMultiGameLeaderboard",e)}(),function(){"use strict";function e(){function e(e,t,n){}var n={bindToController:!0,controller:t,controllerAs:"vm",link:e,restrict:"E",templateUrl:"./app/eventComponents/singleGameLeaderboard.directive.htm",scope:{data:"=",avatarData:"=",completeLength:"=",openLeaderboardFunction:"="}};return n}function t(){}angular.module("vg.app").directive("vgSingleGameLeaderboard",e)}(),function(){"use strict";function e(){function e(e,t,n){}var n={bindToController:!0,controller:t,controllerAs:"vm",link:e,restrict:"E",templateUrl:"./app/eventComponents/stickyMessage.directive.htm",scope:{properties:"="}};return n}function t(e){}angular.module("vg.app").directive("vgStickyMessage",e),t.$inject=["$timeout"]}(),function(){"use strict";function e(e,t,n,r,o){function a(){e(function(){angular.element(".dropdown-button").dropdown({inDuration:300,outDuration:225,constrain_width:!1,hover:!1,gutter:-114,belowOrigin:!0})},400)}function i(){o.logOut(),n.location.reload()}var s=this;s.logOut=i,a()}angular.module("vg.app").controller("HeaderController",e),e.$inject=["$timeout","$rootScope","$window","$state","authService"]}(),function(){"use strict";function e(){return function(e,t,n){var r=[];return angular.forEach(e,function(e,t){e.key=t,r.push(e)}),r.sort(function(e,n){return e[t]>n[t]?1:-1}),n&&r.reverse(),r}}angular.module("vg.app").filter("orderObjectBy",e)}(),function(){"use strict";function e(e,t,n,r,o,a,i){function s(){i.getAvatarData().then(function(e){c.avatarData=e}),r(function(){i.getBadgesData(e.profile.userName).then(function(e){c.badgesData=e})},500)}function l(){c.disableButton=!0,a.setAPIKey("Client-ID f53d6d5833b07bc"),a.upload(c.file).then(function(n){i.saveAvatarLink(n[0].link,e.profile.userName),Materialize.toast("Your avatar was uploaded",4e3),r(function(){t.go("home")},1e3)})}var c=this;c.uploadAvatar=l,s()}angular.module("vg.app").controller("AvatarController",e),e.$inject=["$rootScope","$state","$stateParams","$timeout","Upload","imgur","profileService"]}(),function(){"use strict";function e(e,t,n,r){function o(){t(function(){angular.element("#contentView").css("opacity","1").css("position","inherit")},310)}function a(){e.pwChangeForm.$valid&&r.$changePassword({email:r.$getAuth().password.email,oldPassword:i.inputCurrentPassword,newPassword:i.inputNewPassword}).then(function(){Materialize.toast("Your password was changed.",4e3),t(function(){n.go("home")},1e3)})["catch"](function(e){"INVALID_PASSWORD"===e.code&&(i.showChangePasswordMessage=!0)})}var i=this;i.submitChangePassword=a,o()}angular.module("vg.app").controller("ChangePasswordController",e),e.$inject=["$scope","$timeout","$state","AuthWrapper"]}(),function(){"use strict";function e(e,t){function n(){t(function(){angular.element("#contentView").css("opacity","1").css("position","inherit")},310)}n()}angular.module("vg.app").controller("HomeController",e),e.$inject=["$scope","$timeout"]}(),function(){"use strict";function e(e,t,n,r,o){function a(){t(function(){angular.element("#contentView").css("opacity","1").css("position","inherit")},310),i().then(function(e){s.profileScoreData=e}),r.getAvatarData().then(function(e){s.avatarData=e})}function i(){var t=e.defer(),r=new Firebase(o.FBURL),a=n(r.child("badges"));return a.$loaded(function(){t.resolve(a)}),t.promise}var s=this;a()}angular.module("vg.app").controller("LeaderboardController",e),e.$inject=["$q","$timeout","$firebaseArray","profileService","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,n,r,o,a,i,s,l){function c(){r(function(){angular.element("#contentView").css("opacity","1").css("position","inherit"),$(".collapsible").collapsible({accordion:!0})},410),s.getUserData(t.username).then(function(e){u.profileData=e,s.getTournamentHistory(u.profileData).then(function(e){var n=e;u.eventStandings=s.getTournamentStandings(n,t.username)})}),s.getAvatarData().then(function(e){u.avatarData=e}),s.getBadgesData(t.username).then(function(e){u.badgesData=e})}var u=this;c()}angular.module("vg.app").controller("ProfileController",e),e.$inject=["$scope","$stateParams","$q","$timeout","$state","$firebaseArray","authService","profileService","eventService"]}(),function(){"use strict";function e(e,t,n,r,o,a){function i(){var e=t.defer(),n=new Firebase(a.FBURL),o=r(n.child("avatars"));return o.$loaded(function(){e.resolve(o)}),e.promise}function s(e){var n=t.defer(),o=new Firebase(a.FBURL),i=r(o.child("badges").child(e));return i.$loaded(function(){n.resolve(i)}),n.promise}function l(e){var n=t.defer(),r=(new Firebase(a.FBURL),[]);for(var o in e.pledgedTo)r.push(o);return n.resolve(r),n.promise}function c(e,t){var n=new Firebase(a.FBURL),i=[];return e.forEach(function(e){o.getEventProperties(e).then(function(o){o.$loaded().then(function(){if("concluded"===o.state){var a=r(n.child("standings").child(e));a.$loaded().then(function(){i.push(a[t]?{name:o.name,premier:o.premier?!0:null,shortName:e,state:"concluded",color:o.color,position:a[t]}:{name:o.name,premier:o.premier?!0:null,shortName:e,state:"concluded",color:o.color,position:-1})})}else("inprogress"===o.state||"upcoming"===o.state)&&i.push({name:o.name,premier:o.premier?!0:null,shortName:e,color:o.color,state:o.state})})})}),i}function u(e){var r=t.defer(),o=new Firebase(a.FBURL),i=n(o.child("users"));return i.$loaded(function(){i.forEach(function(t){t.userName===e&&r.resolve(t)})}),r.promise}function d(e,t){var n=new Firebase(a.FBURL),o=r(n.child("avatars"));o.$loaded(function(){o[t]=e,o.$save()})}this.getAvatarData=i,this.getBadgesData=s,this.getTournamentHistory=l,this.getTournamentStandings=c,this.getUserData=u,this.saveAvatarLink=d}angular.module("vg.app").service("profileService",e),e.$inject=["$rootScope","$q","$firebaseArray","$firebaseObject","eventService","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,n,r,o,a,i,s){function l(){n(function(){angular.element("#contentView").css("opacity","1").css("position","inherit")},410)}function c(){i.loginToAccount(m.loginEmail,m.loginPassword).then(function(e){if(m.showInvalidUserError=!1,m.showInvalidPasswordError=!1,"LOGIN_SUCCESS"===e)o.go("home");else{if("INVALID_USER"===e)return void(m.showInvalidUserError=!0);"INVALID_PASSWORD"===e&&(m.showInvalidPasswordError=!0)}})}function u(){return m.loginEmail?void s.$resetPassword({email:m.loginEmail}).then(function(){m.showPasswordResetEmailMessage=!1,Materialize.toast("A password reset email has been sent to "+m.loginEmail+".",4e3)}):void(m.showPasswordResetEmailMessage=!0)}function d(){i.checkIfUserExists(m.newUsername).then(function(e){return m.showDuplicateUserError=!1,m.showEmailTakenError=!1,e?void(m.showDuplicateUserError=!0):void i.createNewUser(m.newEmail,m.newPassword,m.newUsername).then(function(e){return"EMAIL_TAKEN"===e?void(m.showEmailTakenError=!0):void("ACCOUNT_CREATED"===e&&o.go("profile",{username:m.newUsername}))})})}var m=this;m.loginToAccount=c,m.passwordReset=u,m.submitNewAccount=d,l()}angular.module("vg.app").controller("RegController",e),e.$inject=["$scope","$rootScope","$timeout","$window","$state","$firebaseObject","authService","AuthWrapper"]}();
//# sourceMappingURL=data:application/json;base64,