!function(){"use strict";angular.module("vg.app",["ngAnimate","ui.router","firebase","validation.match","ordinal","ngFileUpload","ngImgur"])}(),function(){"use strict";function e(e,t){t.otherwise("/"),e.state("home",{url:"/",templateUrl:"app/home/home.htm",controller:"HomeController as home"}).state("registerOrLogin",{url:"/registerOrLogin",templateUrl:"/app/home/reg.htm",controller:"RegController as reg"}).state("profile",{url:"/profile/:username",templateUrl:"/app/home/profile.htm",controller:"ProfileController as profile"}).state("leaderboard",{url:"/leaderboard",templateUrl:"/app/home/leaderboard.htm",controller:"LeaderboardController as leaderboard"}).state("event",{url:"/event/:eventName/main",templateUrl:"/app/event/main.htm",controller:"EventMainController as event"}).state("customizeAvatar",{url:"/customizeAvatar",templateUrl:"/app/home/avatar.htm",controller:"AvatarController as avatar",resolve:{currentAuth:["AuthWrapper",function(e){return e.$requireAuth()}]}}).state("changePassword",{url:"/changePassword",templateUrl:"/app/home/changePassword.htm",controller:"ChangePasswordController as pwchange",resolve:{currentAuth:["AuthWrapper",function(e){return e.$requireAuth()}]}})}angular.module("vg.app").constant("FIREBASEDATA",{FBURL:"https://wolfscontests.firebaseio.com"}).config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e,t,r,n,o,a){e.$on("$stateChangeError",function(e,t,n,o,a,i){"AUTH_REQUIRED"===i&&r.go("registerOrLogin")}),e.$on("$stateChangeSuccess",function(){if(o.$getAuth()){var t=o.$getAuth(),r=new Firebase(a.FBURL),i=n(r.child("users").child(t.uid));i.$bindTo(e,"profile").then(function(t){e.unbindFunction=t})}})}angular.module("vg.app").run(e),e.$inject=["$rootScope","$location","$state","$firebaseObject","AuthWrapper","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,r,n,o,a,i,s){function c(t){var r=e.defer(),a=!1,i=new n.Firebase(s.FBURL+"/users");return i.once("value",function(e){o(function(){e.forEach(function(e){e.val().userName===t&&(a=!0)}),r.resolve(a)})}),r.promise}function l(t,r,n){var o=e.defer();return i.$createUser({email:t,password:r}).then(function(e){new Firebase(s.FBURL).child("users/"+e.uid).set({userName:n,role:"User"},function(e){return console.error(e),e.code}),new Firebase(s.FBURL).child("avatars").child(n).set("http://api.adorable.io/avatars/42/"+n),i.$authWithPassword({email:t,password:r}).then(function(){o.resolve("ACCOUNT_CREATED")})})["catch"](function(e){console.error(e),"EMAIL_TAKEN"===e.code&&o.resolve(e.code)}),o.promise}function u(t,r){var n=e.defer();return i.$authWithPassword({email:t,password:r}).then(function(e){n.resolve("LOGIN_SUCCESS")})["catch"](function(e){"INVALID_USER"===e.code?n.resolve("INVALID_USER"):"INVALID_PASSWORD"===e.code&&n.resolve("INVALID_PASSWORD")}),n.promise}function d(){i.$unauth(),t.unbindFunction()}this.testData="hello world!",this.checkIfUserExists=c,this.createNewUser=l,this.loginToAccount=u,this.logOut=d}angular.module("vg.app").service("authService",e),e.$inject=["$q","$rootScope","$state","$window","$timeout","$firebaseObject","AuthWrapper","FIREBASEDATA"]}(),function(){"use strict";function e(e,t){var r=new Firebase(t.FBURL);return e(r)}angular.module("vg.app").factory("AuthWrapper",e),e.$inject=["$firebaseAuth","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,r,n,o,a){function i(e){p(e).then(function(t){var n=new Firebase(o.FBURL),a=r(n.child("standings").child(e));a.$loaded().then(function(){t.forEach(function(e){a[e.key]=e.position}),a.$save()})})}function s(t){var n=e.defer(),a=new Firebase(o.FBURL),i=r(a.child("contests").child(t).child("properties"));return n.resolve(i),n.promise}function c(){return A}function l(){E.forEach(function(e){if(e.scores){var r=$.map(e.scores,function(e){return e});r=t("orderBy")(r,"-score"),e.firstScore=r[0]}})}function u(t,r){{var n=e.defer();new Firebase(o.FBURL)}return f(t).then(function(e){e.forEach(function(e){e.camelName===r&&n.resolve(e)})}),n.promise}function d(){return E}function f(t){var r=e.defer(),a=new Firebase(o.FBURL),i=n(a.child("contests").child(t).child("activeGames"));return i.$loaded().then(function(){r.resolve(i)}),r.promise}function m(){return L}function p(r){var n=e.defer(),o={};return f(r).then(function(e){var r=e;r.forEach(function(e){if(e.scores){var r=$.map(e.scores,function(e){return e});r=t("orderBy")(r,"-score");for(var n=12,a=0;a<r.length;a++)o[r[a].userName]||(o[r[a].userName]={points:0}),o[r[a].userName].points+=n,n>0&&(n-=1)}}),o=t("orderObjectBy")(o,"points",!0);for(var a=!1,i=0,s=0;s<o.length;s+=1)if(o[s-1]&&o[s].points&&o[s-1].points)o[s].position=o[s].points===o[s-1].points?o[s-1].position:s+1;else if(0===s)o[s].position=1;else{if(!a){for(var c=o[s-1].points,l=0;l<o.length;l+=1)o[l].points===c&&(i+=1);a=!0}o[s].position=o.length+1-i}n.resolve(o)}),n.promise}function h(t){var r=e.defer(),a=new Firebase(o.FBURL),i=n(a.child("contests").child(t).child("scores"));return r.resolve(i),r.promise}function v(){return S}function g(){return U}function b(r,n,o){var a=e.defer(),i=[];return n.forEach(function(e){if(e.scores){var r=$.map(e.scores,function(e){return e});r=t("orderBy")(r,"-score");for(var n=12,a=0;a<r.length;a++){if(r[a].userName===o){var s=e;s.position=a+1,s.score=r[a].score,s.pointsEarned=n,s.inpUrl=r[a].inpUrl?r[a].inpUrl:null,s.twitchUrl=r[a].twitchUrl?r[a].twitchUrl:null,s.mameVersion=r[a].mameVersion?r[a].mameVersion:null,i.push(s),n=12;break}n>0&&(n-=1)}}}),a.resolve(i),a.promise}function w(e){var t=new Firebase(o.FBURL),n=r(t.child("contests").child(e).child("properties"));n.$loaded().then(function(){A=n,A.format.multiGame?(f(e).then(function(e){E=e,l()}),p(e).then(function(e){var t=e;L=t.length,S=t.slice(0,8)})):h(e).then(function(e){var t=e;L=t.length,S=t}),A.format.teamBased&&a.getTeamList(e).then(function(e){U=e})})}var A=null,E=null,L=null,S=null,U=null;this.createMultiGameFinalStandings=i,this.getEventProperties=s,this.getEventPropertiesObject=c,this.getGameData=u,this.getGameListObject=d,this.getGamesList=f,this.getLeaderboardLengthValue=m,this.getMultiGameLeaderboard=p,this.getPlayerScores=b,this.getSingleGameLeaderboard=h,this.getSummarizedLeaderboardObject=v,this.getTeamListObject=g,this.loadEventProperties=w}angular.module("vg.app").service("eventService",e),e.$inject=["$q","$filter","$firebaseObject","$firebaseArray","FIREBASEDATA","teamService"]}(),function(){"use strict";function e(e,t,r,n,o,a,i,s,c,l,u){function d(){angular.element(".modal").closeModal()}function f(){l.createTeam(w.eventName,w.newTeam).then(function(){Materialize.toast("Team "+w.newTeam.shortName+" created.",4e3),w.newTeam=null})}function m(e,r){var n;if(r>11)return n=0;n=12-r;var o=t("orderBy")(w.gameScores,"-score");return o[r-1]&&o[r-1].score===e.score&&(n+=1),n}function p(e){d(),n.go("profile",{username:e})}function h(){i.loadEventProperties(w.eventName),c.getAvatarData().then(function(e){w.avatarData=e}),e.$watchCollection(function(){return i.getEventPropertiesObject()},function(e){w.eventProperties=e},!0),e.$watchCollection(function(){return i.getTeamListObject()},function(e){w.teamList=e,console.debug(w.teamList)},!0),o(function(){angular.element("ul.tabs").tabs(),angular.element("select").material_select()},600)}function v(e){1===angular.element("#lean-overlay").length?(d(),o(function(){angular.element(e).openModal(),angular.element(e+"Content").scrollTop(0)},450)):(angular.element(e).openModal(),angular.element(e+"Content").scrollTop(0))}function g(e){var t=new Firebase(u.FBURL);i.getGameData(w.eventName,e).then(function(e){w.gameData=e,w.gameScores=a(t.child("contests").child(w.eventName).child("activeGames").child(w.gameData.$id).child("scores"))}),v("#gameModal")}function $(){i.getMultiGameLeaderboard(w.eventName).then(function(e){w.completeLeaderboard=e}),v("#multiGameLeaderboardModal")}function b(e){w.focusPlayer=e,i.getPlayerScores(w.eventName,w.gameList,w.focusPlayer).then(function(e){w.playerScores=e}),v("#playerModal")}var w=this;w.eventName=r.eventName,w.createTeam=f,w.determinePoints=m,w.goToPlayerProfile=p,w.openGameModal=g,w.openModal=v,w.openMultiGameLeaderboardModal=$,w.openPlayerModal=b,h()}angular.module("vg.app").controller("EventMainController",e),e.$inject=["$scope","$filter","$stateParams","$state","$timeout","$firebaseArray","eventService","authService","profileService","teamService","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,r,n){function o(t,o){var a=e.defer(),i=new Firebase(n.FBURL),s=r(i.child("contests").child(t).child("teamPool"));return s.$loaded().then(function(){s[o.shortName]={fullName:o.formalName},s.$save(),a.resolve()}),a.promise}function a(r){var o=e.defer(),a=new Firebase(n.FBURL),i=t(a.child("contests").child(r).child("teamPool"));return i.$loaded().then(function(){o.resolve(i)}),o.promise}this.createTeam=o,this.getTeamList=a}angular.module("vg.app").service("teamService",e),e.$inject=["$q","$firebaseArray","$firebaseObject","FIREBASEDATA"]}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"E",templateUrl:"./app/eventComponents/gamesList.directive.htm",scope:!1,transclude:!1};return e}function t(e,t){e.$watchCollection(function(){return t.getGameListObject()},function(t){e.$parent.$parent.event.gameList=t},!0)}angular.module("vg.app").directive("vgGamesList",e),t.$inject=["$scope","eventService"]}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"E",templateUrl:"./app/eventComponents/multiGameLeaderboard.directive.htm",scope:!1,transclude:!1};return e}function t(e,t){e.$watchCollection(function(){return t.getLeaderboardLengthValue()},function(t){e.$parent.$parent.event.leaderboardLength=t},!0),e.$watchCollection(function(){return t.getSummarizedLeaderboardObject()},function(t){e.$parent.$parent.event.summarizedLeaderboard=t},!0)}angular.module("vg.app").directive("vgMultiGameLeaderboard",e),t.$inject=["$scope","eventService"]}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"E",templateUrl:"./app/eventComponents/rulesDisplay.directive.htm",scope:!1,transclude:!1};return e}function t(e){e(function(){angular.element(".collapsible").collapsible({accordion:!1})},600)}angular.module("vg.app").directive("vgRulesDisplay",e),t.$inject=["$timeout"]}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"E",templateUrl:"./app/eventComponents/singleGameLeaderboard.directive.htm",scope:!1,transclude:!1};return e}function t(e,t){e.$watchCollection(function(){return t.getLeaderboardLengthValue()},function(t){e.$parent.$parent.event.leaderboardLength=t},!0),e.$watchCollection(function(){return t.getSummarizedLeaderboardObject()},function(t){e.$parent.$parent.event.summarizedLeaderboard=t},!0)}angular.module("vg.app").directive("vgSingleGameLeaderboard",e),t.$inject=["$scope","eventService"]}(),function(){"use strict";function e(){var e={bindToController:!0,controller:t,controllerAs:"vm",restrict:"E",templateUrl:"./app/eventComponents/stickyMessage.directive.htm",scope:{properties:"="}};return e}function t(e){}angular.module("vg.app").directive("vgStickyMessage",e),t.$inject=["$timeout"]}(),function(){"use strict";function e(e,t,r,n,o){function a(){e(function(){angular.element(".dropdown-button").dropdown({inDuration:300,outDuration:225,constrain_width:!1,hover:!1,gutter:-114,belowOrigin:!0})},400),e(function(){angular.element(".dropdown-button").dropdown({inDuration:300,outDuration:225,constrain_width:!1,hover:!1,gutter:-114,belowOrigin:!0})},1e3)}function i(){o.logOut(),r.location.reload()}var s=this;s.logOut=i,a()}angular.module("vg.app").controller("HeaderController",e),e.$inject=["$timeout","$rootScope","$window","$state","authService"]}(),function(){"use strict";function e(){return function(e,t,r){var n=[];return angular.forEach(e,function(e,t){e.key=t,n.push(e)}),n.sort(function(e,r){return e[t]>r[t]?1:-1}),r&&n.reverse(),n}}angular.module("vg.app").filter("orderObjectBy",e)}(),function(){"use strict";function e(e,t,r,n,o,a,i){function s(){i.getAvatarData().then(function(e){l.avatarData=e}),n(function(){i.getBadgesData(e.profile.userName).then(function(e){l.badgesData=e})},500)}function c(){l.disableButton=!0,a.setAPIKey("Client-ID f53d6d5833b07bc"),a.upload(l.file).then(function(r){i.saveAvatarLink(r[0].link,e.profile.userName),Materialize.toast("Your avatar was uploaded",4e3),n(function(){t.go("home")},1e3)})}var l=this;l.uploadAvatar=c,s()}angular.module("vg.app").controller("AvatarController",e),e.$inject=["$rootScope","$state","$stateParams","$timeout","Upload","imgur","profileService"]}(),function(){"use strict";function e(e,t,r,n){function o(){e.pwChangeForm.$valid&&n.$changePassword({email:n.$getAuth().password.email,oldPassword:a.inputCurrentPassword,newPassword:a.inputNewPassword}).then(function(){Materialize.toast("Your password was changed.",4e3),t(function(){r.go("home")},1e3)})["catch"](function(e){"INVALID_PASSWORD"===e.code&&(a.showChangePasswordMessage=!0)})}var a=this;a.submitChangePassword=o}angular.module("vg.app").controller("ChangePasswordController",e),e.$inject=["$scope","$timeout","$state","AuthWrapper"]}(),function(){"use strict";function e(e,t){}angular.module("vg.app").controller("HomeController",e),e.$inject=["$scope","$timeout"]}(),function(){"use strict";function e(e,t,r,n,o){function a(){i().then(function(e){s.profileScoreData=e}),n.getAvatarData().then(function(e){s.avatarData=e})}function i(){var t=e.defer(),n=new Firebase(o.FBURL),a=r(n.child("badges"));return a.$loaded(function(){t.resolve(a)}),t.promise}var s=this;a()}angular.module("vg.app").controller("LeaderboardController",e),e.$inject=["$q","$timeout","$firebaseArray","profileService","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,r,n,o,a,i,s,c){function l(){s.getUserData(t.username).then(function(e){u.profileData=e,s.getTournamentHistory(u.profileData).then(function(e){var r=e;u.eventStandings=s.getTournamentStandings(r,t.username)})}),s.getAvatarData().then(function(e){u.avatarData=e}),s.getBadgesData(t.username).then(function(e){u.badgesData=e,n(function(){angular.element(".collapsible").collapsible({accordion:!0})},200)})}var u=this;l()}angular.module("vg.app").controller("ProfileController",e),e.$inject=["$scope","$stateParams","$q","$timeout","$state","$firebaseArray","authService","profileService","eventService"]}(),function(){"use strict";function e(e,t,r,n,o,a){function i(){var e=t.defer(),r=new Firebase(a.FBURL),o=n(r.child("avatars"));return o.$loaded(function(){e.resolve(o)}),e.promise}function s(e){var r=t.defer(),o=new Firebase(a.FBURL),i=n(o.child("badges").child(e));return i.$loaded(function(){r.resolve(i)}),r.promise}function c(e){var r=t.defer(),n=(new Firebase(a.FBURL),[]);for(var o in e.pledgedTo)n.push(o);return r.resolve(n),r.promise}function l(e,t){var r=new Firebase(a.FBURL),i=[];return e.forEach(function(e){o.getEventProperties(e).then(function(o){o.$loaded().then(function(){if("concluded"===o.state){var a=n(r.child("standings").child(e));a.$loaded().then(function(){i.push(a[t]?{name:o.name,premier:o.premier?!0:null,shortName:e,state:"concluded",color:o.color,position:a[t]}:{name:o.name,premier:o.premier?!0:null,shortName:e,state:"concluded",color:o.color,position:-1})})}else("inprogress"===o.state||"upcoming"===o.state)&&i.push({name:o.name,premier:o.premier?!0:null,shortName:e,color:o.color,state:o.state})})})}),i}function u(e){var n=t.defer(),o=new Firebase(a.FBURL),i=r(o.child("users"));return i.$loaded(function(){i.forEach(function(t){t.userName===e&&n.resolve(t)})}),n.promise}function d(e,t){var r=new Firebase(a.FBURL),o=n(r.child("avatars"));o.$loaded(function(){o[t]=e,o.$save()})}this.getAvatarData=i,this.getBadgesData=s,this.getTournamentHistory=c,this.getTournamentStandings=l,this.getUserData=u,this.saveAvatarLink=d}angular.module("vg.app").service("profileService",e),e.$inject=["$rootScope","$q","$firebaseArray","$firebaseObject","eventService","FIREBASEDATA"]}(),function(){"use strict";function e(e,t,r,n,o,a,i,s){function c(){i.loginToAccount(d.loginEmail,d.loginPassword).then(function(e){if(d.showInvalidUserError=!1,d.showInvalidPasswordError=!1,"LOGIN_SUCCESS"===e)o.go("home");else{if("INVALID_USER"===e)return void(d.showInvalidUserError=!0);"INVALID_PASSWORD"===e&&(d.showInvalidPasswordError=!0)}})}function l(){return d.loginEmail?void s.$resetPassword({email:d.loginEmail}).then(function(){d.showPasswordResetEmailMessage=!1,Materialize.toast("A password reset email has been sent to "+d.loginEmail+".",4e3)}):void(d.showPasswordResetEmailMessage=!0)}function u(){i.checkIfUserExists(d.newUsername).then(function(e){return d.showDuplicateUserError=!1,d.showEmailTakenError=!1,e?void(d.showDuplicateUserError=!0):void i.createNewUser(d.newEmail,d.newPassword,d.newUsername).then(function(e){return"EMAIL_TAKEN"===e?void(d.showEmailTakenError=!0):void("ACCOUNT_CREATED"===e&&o.go("profile",{username:d.newUsername}))})})}var d=this;d.loginToAccount=c,d.passwordReset=l,d.submitNewAccount=u}angular.module("vg.app").controller("RegController",e),e.$inject=["$scope","$rootScope","$timeout","$window","$state","$firebaseObject","authService","AuthWrapper"]}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5tb2R1bGUuanMiLCJhcHAuY29uZmlnLmpzIiwiYXBwLm1pbi5qcyIsImFwcC5ydW4uanMiLCJhdXRoL2F1dGguc2VydmljZS5qcyIsImF1dGgvYXV0aHdyYXBwZXIuZmFjdG9yeS5qcyIsImV2ZW50L2V2ZW50LnNlcnZpY2UuanMiLCJldmVudC9tYWluLmNvbnRyb2xsZXIuanMiLCJldmVudC90ZWFtLnNlcnZpY2UuanMiLCJldmVudENvbXBvbmVudHMvZ2FtZXNMaXN0LmRpcmVjdGl2ZS5qcyIsImV2ZW50Q29tcG9uZW50cy9tdWx0aUdhbWVMZWFkZXJib2FyZC5kaXJlY3RpdmUuanMiLCJldmVudENvbXBvbmVudHMvcnVsZXNEaXNwbGF5LmRpcmVjdGl2ZS5qcyIsImV2ZW50Q29tcG9uZW50cy9zaW5nbGVHYW1lTGVhZGVyYm9hcmQuZGlyZWN0aXZlLmpzIiwiZXZlbnRDb21wb25lbnRzL3N0aWNreU1lc3NhZ2UuZGlyZWN0aXZlLmpzIiwiaGVhZGVyL2hlYWRlci5jb250cm9sbGVyLmpzIiwiaGVscGVycy9vcmRlck9iamVjdEJ5LmZpbHRlci5qcyIsImhvbWUvYXZhdGFyLmNvbnRyb2xsZXIuanMiLCJob21lL2NoYW5nZVBhc3N3b3JkLmNvbnRyb2xsZXIuanMiLCJob21lL2hvbWUuY29udHJvbGxlci5qcyIsImhvbWUvbGVhZGVyYm9hcmQuY29udHJvbGxlci5qcyIsImhvbWUvcHJvZmlsZS5jb250cm9sbGVyLmpzIiwiaG9tZS9wcm9maWxlLnNlcnZpY2UuanMiLCJob21lL3JlZy5jb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkc3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsIm90aGVyd2lzZSIsInN0YXRlIiwidXJsIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwicmVzb2x2ZSIsImN1cnJlbnRBdXRoIiwiQXV0aFdyYXBwZXIiLCIkcmVxdWlyZUF1dGgiLCJjb25zdGFudCIsIkZCVVJMIiwiJGluamVjdCIsInJ1biIsIiRyb290U2NvcGUiLCIkbG9jYXRpb24iLCIkc3RhdGUiLCIkZmlyZWJhc2VPYmplY3QiLCJGSVJFQkFTRURBVEEiLCIkb24iLCJldmVudCIsInRvU3RhdGUiLCJ0b1BhcmFtcyIsImZyb21TdGF0ZSIsImZyb21QYXJhbXMiLCJlcnJvciIsImdvIiwiJGdldEF1dGgiLCJhdXRoRGF0YSIsInJlZiIsIkZpcmViYXNlIiwicHJvZmlsZURhdGEiLCJjaGlsZCIsInVpZCIsIiRiaW5kVG8iLCJ0aGVuIiwidW5iaW5kIiwidW5iaW5kRnVuY3Rpb24iLCJhdXRoU2VydmljZSIsIiRxIiwiJHdpbmRvdyIsIiR0aW1lb3V0IiwiY2hlY2tJZlVzZXJFeGlzdHMiLCJpbnB1dFVzZXJuYW1lIiwiZGVmZXJyZWQiLCJkZWZlciIsImRvZXNVc2VyRXhpc3QiLCJ1c2Vyc1JlZiIsIm9uY2UiLCJkYXRhU25hcHNob3QiLCJmb3JFYWNoIiwidXNlciIsInZhbCIsInVzZXJOYW1lIiwicHJvbWlzZSIsImNyZWF0ZU5ld1VzZXIiLCJpbnB1dEVtYWlsIiwiaW5wdXRQYXNzd29yZCIsIiRjcmVhdGVVc2VyIiwiZW1haWwiLCJwYXNzd29yZCIsInVzZXJEYXRhIiwic2V0Iiwicm9sZSIsImVycm9yRGF0YSIsImNvbnNvbGUiLCJjb2RlIiwiJGF1dGhXaXRoUGFzc3dvcmQiLCJsb2dpblRvQWNjb3VudCIsImxvZ091dCIsIiR1bmF1dGgiLCJ0aGlzIiwidGVzdERhdGEiLCJzZXJ2aWNlIiwiJGZpcmViYXNlQXV0aCIsImZhY3RvcnkiLCJldmVudFNlcnZpY2UiLCIkZmlsdGVyIiwiJGZpcmViYXNlQXJyYXkiLCJ0ZWFtU2VydmljZSIsImNyZWF0ZU11bHRpR2FtZUZpbmFsU3RhbmRpbmdzIiwiaW5wdXRFdmVudCIsImdldE11bHRpR2FtZUxlYWRlcmJvYXJkIiwibW9kZWwiLCJpbnB1dEV2ZW50U3RhbmRpbmdzIiwiJGxvYWRlZCIsInN0YW5kaW5nIiwia2V5IiwicG9zaXRpb24iLCIkc2F2ZSIsImdldEV2ZW50UHJvcGVydGllcyIsImV2ZW50UHJvcGVydGllcyIsImdldEV2ZW50UHJvcGVydGllc09iamVjdCIsIl9ldmVudFByb3BlcnRpZXMiLCJnZXRGaXJzdFBsYWNlU2NvcmVzIiwiX2dhbWVMaXN0IiwiZ2FtZSIsInNjb3JlcyIsInNjb3Jlc0FycmF5IiwiJCIsIm1hcCIsImVsIiwiZmlyc3RTY29yZSIsImdldEdhbWVEYXRhIiwiaW5wdXRHYW1lIiwiZ2V0R2FtZXNMaXN0IiwiZ2FtZXNMaXN0IiwiY2FtZWxOYW1lIiwiZ2V0R2FtZUxpc3RPYmplY3QiLCJnZXRMZWFkZXJib2FyZExlbmd0aFZhbHVlIiwiX2xlYWRlcmJvYXJkTGVuZ3RoIiwicGxheWVyUG9pbnRzIiwidG90YWxBd2FyZCIsImkiLCJsZW5ndGgiLCJwb2ludHMiLCJoYXZlQm90dG9tU2NvcmVyc0Zsb29yIiwiZmxvb3JSYW5nZSIsImdldFNjb3JlQ291bnRPZiIsImoiLCJnZXRTaW5nbGVHYW1lTGVhZGVyYm9hcmQiLCJsZWFkZXJib2FyZERhdGEiLCJnZXRTdW1tYXJpemVkTGVhZGVyYm9hcmRPYmplY3QiLCJfc3VtbWFyaXplZExlYWRlcmJvYXJkIiwiZ2V0VGVhbUxpc3RPYmplY3QiLCJfdGVhbUxpc3QiLCJnZXRQbGF5ZXJTY29yZXMiLCJpbnB1dEdhbWVzTGlzdCIsImlucHV0UGxheWVyIiwiZGlzcGxheVNjb3JlcyIsIm5ld1Njb3JlT2JqZWN0Iiwic2NvcmUiLCJwb2ludHNFYXJuZWQiLCJpbnBVcmwiLCJ0d2l0Y2hVcmwiLCJtYW1lVmVyc2lvbiIsInB1c2giLCJsb2FkRXZlbnRQcm9wZXJ0aWVzIiwiaW5wdXRFdmVudFByb3BlcnRpZXMiLCJmb3JtYXQiLCJtdWx0aUdhbWUiLCJsZWFkZXJib2FyZCIsInNsaWNlIiwidGVhbUJhc2VkIiwiZ2V0VGVhbUxpc3QiLCJFdmVudE1haW5Db250cm9sbGVyIiwiJHNjb3BlIiwiJHN0YXRlUGFyYW1zIiwicHJvZmlsZVNlcnZpY2UiLCJjbG9zZU1vZGFsIiwiZWxlbWVudCIsImNyZWF0ZVRlYW0iLCJ2bSIsImV2ZW50TmFtZSIsIm5ld1RlYW0iLCJNYXRlcmlhbGl6ZSIsInRvYXN0Iiwic2hvcnROYW1lIiwiZGV0ZXJtaW5lUG9pbnRzIiwiaW5wdXRTY29yZURhdGEiLCJpbnB1dEluZGV4IiwidXNlckdhbWVQb2ludHMiLCJzb3J0ZWRTY29yZXMiLCJnYW1lU2NvcmVzIiwiZ29Ub1BsYXllclByb2ZpbGUiLCJ1c2VybmFtZSIsImluaXRFdmVudCIsImdldEF2YXRhckRhdGEiLCJhdmF0YXJEYXRhIiwiJHdhdGNoQ29sbGVjdGlvbiIsInRlYW1MaXN0IiwiZGVidWciLCJ0YWJzIiwibWF0ZXJpYWxfc2VsZWN0Iiwib3Blbk1vZGFsIiwiaW5wdXRNb2RhbCIsInNjcm9sbFRvcCIsIm9wZW5HYW1lTW9kYWwiLCJpbnB1dEdhbWVOYW1lIiwiZ2FtZURhdGEiLCIkaWQiLCJvcGVuTXVsdGlHYW1lTGVhZGVyYm9hcmRNb2RhbCIsImNvbXBsZXRlTGVhZGVyYm9hcmQiLCJvcGVuUGxheWVyTW9kYWwiLCJmb2N1c1BsYXllciIsImdhbWVMaXN0IiwicGxheWVyU2NvcmVzIiwiaW5wdXROZXdUZWFtUHJvcGVydGllcyIsInRlYW1Qb29sIiwiZnVsbE5hbWUiLCJmb3JtYWxOYW1lIiwidmdHYW1lc0xpc3QiLCJkaXJlY3RpdmUiLCJiaW5kVG9Db250cm9sbGVyIiwiR2FtZXNMaXN0Q29udHJvbGxlciIsImNvbnRyb2xsZXJBcyIsInJlc3RyaWN0Iiwic2NvcGUiLCJ0cmFuc2NsdWRlIiwiJHBhcmVudCIsInZnTXVsdGlHYW1lTGVhZGVyYm9hcmQiLCJNdWx0aUdhbWVMZWFkZXJib2FyZENvbnRyb2xsZXIiLCJsZWFkZXJib2FyZExlbmd0aCIsInN1bW1hcml6ZWRMZWFkZXJib2FyZCIsInZnUnVsZXNEaXNwbGF5IiwiUnVsZXNEaXNwbGF5Q29udHJvbGxlciIsImNvbGxhcHNpYmxlIiwiYWNjb3JkaW9uIiwidmdTaW5nbGVHYW1lTGVhZGVyYm9hcmQiLCJTaW5nbGVHYW1lTGVhZGVyYm9hcmRDb250cm9sbGVyIiwidmdTdGlja3lNZXNzYWdlIiwiU3RpY2t5TWVzc2FnZUNvbnRyb2xsZXIiLCJwcm9wZXJ0aWVzIiwiSGVhZGVyQ29udHJvbGxlciIsImFjdGl2YXRlIiwiZHJvcGRvd24iLCJpbkR1cmF0aW9uIiwib3V0RHVyYXRpb24iLCJjb25zdHJhaW5fd2lkdGgiLCJob3ZlciIsImd1dHRlciIsImJlbG93T3JpZ2luIiwibG9jYXRpb24iLCJyZWxvYWQiLCJvcmRlck9iamVjdEJ5IiwiaXRlbXMiLCJmaWVsZCIsInJldmVyc2UiLCJmaWx0ZXJlZCIsIml0ZW0iLCJzb3J0IiwiYSIsImIiLCJmaWx0ZXIiLCJBdmF0YXJDb250cm9sbGVyIiwiVXBsb2FkIiwiaW1ndXIiLCJnZXRCYWRnZXNEYXRhIiwicHJvZmlsZSIsImJhZGdlc0RhdGEiLCJ1cGxvYWRBdmF0YXIiLCJkaXNhYmxlQnV0dG9uIiwic2V0QVBJS2V5IiwidXBsb2FkIiwiZmlsZSIsInNhdmVBdmF0YXJMaW5rIiwibGluayIsIkNoYW5nZVBhc3N3b3JkQ29udHJvbGxlciIsInN1Ym1pdENoYW5nZVBhc3N3b3JkIiwicHdDaGFuZ2VGb3JtIiwiJHZhbGlkIiwiJGNoYW5nZVBhc3N3b3JkIiwib2xkUGFzc3dvcmQiLCJpbnB1dEN1cnJlbnRQYXNzd29yZCIsIm5ld1Bhc3N3b3JkIiwiaW5wdXROZXdQYXNzd29yZCIsInNob3dDaGFuZ2VQYXNzd29yZE1lc3NhZ2UiLCJIb21lQ29udHJvbGxlciIsIkxlYWRlcmJvYXJkQ29udHJvbGxlciIsImdldFByb2ZpbGVTY29yZXMiLCJwcm9maWxlU2NvcmVEYXRhIiwiUHJvZmlsZUNvbnRyb2xsZXIiLCJnZXRVc2VyRGF0YSIsImdldFRvdXJuYW1lbnRIaXN0b3J5IiwidG91cm5hbWVudEhpc3RvcnlEYXRhIiwiZXZlbnRTdGFuZGluZ3MiLCJnZXRUb3VybmFtZW50U3RhbmRpbmdzIiwiaW5wdXRVc2VyIiwiaW5wdXRVc2VyRGF0YSIsImV2ZW50c0FycmF5IiwicGxlZGdlZFRvIiwiaW5wdXRUb3VybmFtZW50SGlzdG9yeSIsImV2ZW50U3RhbmRpbmdEYXRhIiwibmFtZSIsInByZW1pZXIiLCJjb2xvciIsInVzZXJzRGF0YSIsImlucHV0TGluayIsIlJlZ0NvbnRyb2xsZXIiLCJsb2dpbkVtYWlsIiwibG9naW5QYXNzd29yZCIsInNob3dJbnZhbGlkVXNlckVycm9yIiwic2hvd0ludmFsaWRQYXNzd29yZEVycm9yIiwicGFzc3dvcmRSZXNldCIsIiRyZXNldFBhc3N3b3JkIiwic2hvd1Bhc3N3b3JkUmVzZXRFbWFpbE1lc3NhZ2UiLCJzdWJtaXROZXdBY2NvdW50IiwibmV3VXNlcm5hbWUiLCJ1c2VyRXhpc3RzIiwic2hvd0R1cGxpY2F0ZVVzZXJFcnJvciIsInNob3dFbWFpbFRha2VuRXJyb3IiLCJuZXdFbWFpbCJdLCJtYXBwaW5ncyI6IkNBQUEsV0FDQSxZQUVBQSxTQUNBQyxPQUFBLFVBRUEsWUFHQSxZQUNBLFdBQ0EsbUJBQ0EsVUFDQSxlQUNBLGVDZEEsV0FDQSxZQVVBLFNBQUFDLEdBQUFDLEVBQUFDLEdBR0FBLEVBQUFDLFVBQUEsS0FFQUYsRUFDQUcsTUFBQSxRQUNBQyxJQUFBLElBQ0FDLFlBQUEsb0JBQ0FDLFdBQUEsMkJBR0FILE1BQUEsbUJBQ0FDLElBQUEsbUJBQ0FDLFlBQUEsb0JBQ0FDLFdBQUEseUJBR0FILE1BQUEsV0FDQUMsSUFBQSxxQkFDQUMsWUFBQSx3QkFDQUMsV0FBQSxpQ0FHQUgsTUFBQSxlQUNBQyxJQUFBLGVBQ0FDLFlBQUEsNEJBQ0FDLFdBQUEseUNBR0FILE1BQUEsU0FDQUMsSUFBQSx5QkFDQUMsWUFBQSxzQkFDQUMsV0FBQSxpQ0FHQUgsTUFBQSxtQkFDQUMsSUFBQSxtQkFDQUMsWUFBQSx1QkFDQUMsV0FBQSw2QkFFQUMsU0FDQUMsYUFBQSxjQUFBLFNBQUFDLEdBQ0EsTUFBQUEsR0FBQUMsb0JBS0FQLE1BQUEsa0JBQ0FDLElBQUEsa0JBQ0FDLFlBQUEsK0JBQ0FDLFdBQUEsdUNBRUFDLFNBQ0FDLGFBQUEsY0FBQSxTQUFBQyxHQUNBLE1BQUFBLEdBQUFDLG9CQS9EQWIsUUFDQUMsT0FBQSxVQUNBYSxTQUFBLGdCQUNBQyxNQUFBLHlDQUVBYixPQUFBQSxHQytFQ0EsRUFBT2MsU0FBVyxpQkFBa0IseUJDdkZyQyxXQUNBLFlBTUEsU0FBQUMsR0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQVQsRUFBQVUsR0FFQUosRUFBQUssSUFBQSxvQkFBQSxTQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBLGtCQUFBQSxHQUNBVCxFQUFBVSxHQUFBLHFCQUlBWixFQUFBSyxJQUFBLHNCQUFBLFdBSUEsR0FBQVgsRUFBQW1CLFdBQUEsQ0FFQSxHQUFBQyxHQUFBcEIsRUFBQW1CLFdBQ0FFLEVBQUEsR0FBQUMsVUFBQVosRUFBQVAsT0FFQW9CLEVBQUFkLEVBQUFZLEVBQUFHLE1BQUEsU0FBQUEsTUFBQUosRUFBQUssS0FDQUYsR0FBQUcsUUFBQXBCLEVBQUEsV0FBQXFCLEtBQUEsU0FBQUMsR0FDQXRCLEVBQUF1QixlQUFBRCxPQXZCQXhDLFFBQ0FDLE9BQUEsVUFDQWdCLElBQUFBLEdEcUhJQSxFQUFJRCxTQUFXLGFBQWMsWUFBYSxTQUFVLGtCQUFtQixjQUFlLG1CRTFIMUYsV0FDQSxZQU9BLFNBQUEwQixHQUFBQyxFQUFBekIsRUFBQUUsRUFBQXdCLEVBQUFDLEVBQUF4QixFQUFBVCxFQUFBVSxHQVdBLFFBQUF3QixHQUFBQyxHQUVBLEdBQUFDLEdBQUFMLEVBQUFNLFFBRUFDLEdBQUEsRUFDQUMsRUFBQSxHQUFBUCxHQUFBVixTQUFBWixFQUFBUCxNQUFBLFNBZ0JBLE9BZEFvQyxHQUFBQyxLQUFBLFFBQUEsU0FBQUMsR0FFQVIsRUFBQSxXQUNBUSxFQUFBQyxRQUFBLFNBQUFDLEdBQ0FBLEVBQUFDLE1BQUFDLFdBQUFWLElBQ0FHLEdBQUEsS0FJQUYsRUFBQXRDLFFBQUF3QyxPQUtBRixFQUFBVSxRQUlBLFFBQUFDLEdBQUFDLEVBQUFDLEVBQUFkLEdBRUEsR0FBQUMsR0FBQUwsRUFBQU0sT0F1Q0EsT0FyQ0FyQyxHQUFBa0QsYUFDQUMsTUFBQUgsRUFDQUksU0FBQUgsSUFDQXRCLEtBQUEsU0FBQTBCLEdBR0EsR0FBQS9CLFVBQUFaLEVBQUFQLE9BQUFxQixNQUFBLFNBQUE2QixFQUFBNUIsS0FBQTZCLEtBRUFULFNBQUFWLEVBQ0FvQixLQUFBLFFBRUEsU0FBQUMsR0FFQSxNQURBQyxTQUFBeEMsTUFBQXVDLEdBQ0FBLEVBQUFFLE9BSUEsR0FBQXBDLFVBQUFaLEVBQUFQLE9BQUFxQixNQUFBLFdBQUFBLE1BQUFXLEdBQUFtQixJQUFBLHFDQUFBbkIsR0FHQW5DLEVBQUEyRCxtQkFDQVIsTUFBQUgsRUFDQUksU0FBQUgsSUFDQXRCLEtBQUEsV0FDQVMsRUFBQXRDLFFBQUEsdUJBeEJBRSxTQTJCQSxTQUFBd0QsR0FFQUMsUUFBQXhDLE1BQUF1QyxHQUVBLGdCQUFBQSxFQUFBRSxNQUNBdEIsRUFBQXRDLFFBQUEwRCxFQUFBRSxRQUtBdEIsRUFBQVUsUUFJQSxRQUFBYyxHQUFBWixFQUFBQyxHQUVBLEdBQUFiLEdBQUFMLEVBQUFNLE9BbUJBLE9BakJBckMsR0FBQTJELG1CQUNBUixNQUFBSCxFQUNBSSxTQUFBSCxJQUNBdEIsS0FBQSxTQUFBUCxHQUVBZ0IsRUFBQXRDLFFBQUEsbUJBTEFFLFNBT0EsU0FBQXdELEdBRUEsaUJBQUFBLEVBQUFFLEtBQ0F0QixFQUFBdEMsUUFBQSxnQkFDQSxxQkFBQTBELEVBQUFFLE1BQ0F0QixFQUFBdEMsUUFBQSxzQkFLQXNDLEVBQUFVLFFBSUEsUUFBQWUsS0FDQTdELEVBQUE4RCxVQUNBeEQsRUFBQXVCLGlCQTFHQWtDLEtBQUFDLFNBQUEsZUFFQUQsS0FBQTdCLGtCQUFBQSxFQUNBNkIsS0FBQWhCLGNBQUFBLEVBQ0FnQixLQUFBSCxlQUFBQSxFQUNBRyxLQUFBRixPQUFBQSxFQVpBekUsUUFDQUMsT0FBQSxVQUNBNEUsUUFBQSxjQUFBbkMsR0YrT0lBLEVBQVkxQixTQUFXLEtBQU0sYUFBYyxTQUFVLFVBQVcsV0FBWSxrQkFBbUIsY0FBZSxtQkdwUGxILFdBQ0EsWUFPQSxTQUFBSixHQUFBa0UsRUFBQXhELEdBRUEsR0FBQVcsR0FBQSxHQUFBQyxVQUFBWixFQUFBUCxNQUNBLE9BQUErRCxHQUFBN0MsR0FSQWpDLFFBQ0FDLE9BQUEsVUFDQThFLFFBQUEsY0FBQW5FLEdIOFBJQSxFQUFZSSxTQUFXLGdCQUFpQixtQkluUTVDLFdBQ0EsWUFPQSxTQUFBZ0UsR0FBQXJDLEVBQUFzQyxFQUFBNUQsRUFBQTZELEVBQUE1RCxFQUFBNkQsR0F3QkEsUUFBQUMsR0FBQUMsR0FHQUMsRUFBQUQsR0FBQTlDLEtBQUEsU0FBQWdELEdBRUEsR0FBQXRELEdBQUEsR0FBQUMsVUFBQVosRUFBQVAsT0FDQXlFLEVBQUFuRSxFQUNBWSxFQUNBRyxNQUFBLGFBQ0FBLE1BQUFpRCxHQUdBRyxHQUFBQyxVQUFBbEQsS0FBQSxXQUVBZ0QsRUFBQWpDLFFBQUEsU0FBQW9DLEdBQ0FGLEVBQUFFLEVBQUFDLEtBQUFELEVBQUFFLFdBR0FKLEVBQUFLLFlBUUEsUUFBQUMsR0FBQVQsR0FFQSxHQUFBckMsR0FBQUwsRUFBQU0sUUFFQWhCLEVBQUEsR0FBQUMsVUFBQVosRUFBQVAsT0FDQWdGLEVBQUExRSxFQUNBWSxFQUNBRyxNQUFBLFlBQ0FBLE1BQUFpRCxHQUNBakQsTUFBQSxjQUtBLE9BRkFZLEdBQUF0QyxRQUFBcUYsR0FFQS9DLEVBQUFVLFFBSUEsUUFBQXNDLEtBQ0EsTUFBQUMsR0FHQSxRQUFBQyxLQUVBQyxFQUFBN0MsUUFBQSxTQUFBOEMsR0FHQSxHQUFBQSxFQUFBQyxPQUFBLENBRUEsR0FBQUMsR0FBQUMsRUFBQUMsSUFBQUosRUFBQUMsT0FBQSxTQUFBSSxHQUFBLE1BQUFBLElBQ0FILEdBQUFyQixFQUFBLFdBQUFxQixFQUFBLFVBQ0FGLEVBQUFNLFdBQUFKLEVBQUEsTUFRQSxRQUFBSyxHQUFBdEIsRUFBQXVCLEdBRUEsQ0FBQSxHQUFBNUQsR0FBQUwsRUFBQU0sT0FFQSxJQUFBZixVQUFBWixFQUFBUCxPQWNBLE1BWkE4RixHQUFBeEIsR0FBQTlDLEtBQUEsU0FBQXVFLEdBRUFBLEVBQUF4RCxRQUFBLFNBQUE4QyxHQUVBQSxFQUFBVyxZQUFBSCxHQUNBNUQsRUFBQXRDLFFBQUEwRixPQU9BcEQsRUFBQVUsUUFJQSxRQUFBc0QsS0FDQSxNQUFBYixHQUdBLFFBQUFVLEdBQUF4QixHQUVBLEdBQUFyQyxHQUFBTCxFQUFBTSxRQUVBaEIsRUFBQSxHQUFBQyxVQUFBWixFQUFBUCxPQUNBK0YsRUFBQTVCLEVBQ0FqRCxFQUNBRyxNQUFBLFlBQ0FBLE1BQUFpRCxHQUNBakQsTUFBQSxlQU9BLE9BSkEwRSxHQUFBckIsVUFBQWxELEtBQUEsV0FDQVMsRUFBQXRDLFFBQUFvRyxLQUdBOUQsRUFBQVUsUUFJQSxRQUFBdUQsS0FDQSxNQUFBQyxHQUdBLFFBQUE1QixHQUFBRCxHQUVBLEdBQUFyQyxHQUFBTCxFQUFBTSxRQUdBa0UsSUFnRkEsT0E5RUFOLEdBQUF4QixHQUFBOUMsS0FBQSxTQUFBZ0QsR0FFQSxHQUFBdUIsR0FBQXZCLENBQ0F1QixHQUFBeEQsUUFBQSxTQUFBOEMsR0FFQSxHQUFBQSxFQUFBQyxPQUFBLENBR0EsR0FBQUMsR0FBQUMsRUFBQUMsSUFBQUosRUFBQUMsT0FBQSxTQUFBSSxHQUFBLE1BQUFBLElBQ0FILEdBQUFyQixFQUFBLFdBQUFxQixFQUFBLFNBS0EsS0FBQSxHQUhBYyxHQUFBLEdBR0FDLEVBQUEsRUFBQUEsRUFBQWYsRUFBQWdCLE9BQUFELElBRUFGLEVBQUFiLEVBQUFlLEdBQUE1RCxZQUNBMEQsRUFBQWIsRUFBQWUsR0FBQTVELFdBQ0E4RCxPQUFBLElBSUFKLEVBQUFiLEVBQUFlLEdBQUE1RCxVQUFBOEQsUUFBQUgsRUFFQUEsRUFBQSxJQUNBQSxHQUFBLE1BVUFELEVBQUFsQyxFQUFBLGlCQUFBa0MsRUFBQSxVQUFBLEVBR0EsS0FBQSxHQUZBSyxJQUFBLEVBQ0FDLEVBQUEsRUFDQUosRUFBQSxFQUFBQSxFQUFBRixFQUFBRyxPQUFBRCxHQUFBLEVBRUEsR0FBQUYsRUFBQUUsRUFBQSxJQUFBRixFQUFBRSxHQUFBRSxRQUFBSixFQUFBRSxFQUFBLEdBQUFFLE9BR0FKLEVBQUFFLEdBQUF6QixTQURBdUIsRUFBQUUsR0FBQUUsU0FBQUosRUFBQUUsRUFBQSxHQUFBRSxPQUNBSixFQUFBRSxFQUFBLEdBQUF6QixTQUVBeUIsRUFBQSxNQUtBLElBQUEsSUFBQUEsRUFDQUYsRUFBQUUsR0FBQXpCLFNBQUEsTUFDQSxDQUVBLElBQUE0QixFQUFBLENBSUEsSUFBQSxHQUZBRSxHQUFBUCxFQUFBRSxFQUFBLEdBQUFFLE9BRUFJLEVBQUEsRUFBQUEsRUFBQVIsRUFBQUcsT0FBQUssR0FBQSxFQUNBUixFQUFBUSxHQUFBSixTQUFBRyxJQUNBRCxHQUFBLEVBSUFELElBQUEsRUFHQUwsRUFBQUUsR0FBQXpCLFNBQUF1QixFQUFBRyxPQUFBLEVBQUFHLEVBT0F6RSxFQUFBdEMsUUFBQXlHLEtBSUFuRSxFQUFBVSxRQUlBLFFBQUFrRSxHQUFBdkMsR0FFQSxHQUFBckMsR0FBQUwsRUFBQU0sUUFFQWhCLEVBQUEsR0FBQUMsVUFBQVosRUFBQVAsT0FDQThHLEVBQUEzQyxFQUNBakQsRUFDQUcsTUFBQSxZQUNBQSxNQUFBaUQsR0FDQWpELE1BQUEsVUFLQSxPQUZBWSxHQUFBdEMsUUFBQW1ILEdBRUE3RSxFQUFBVSxRQUlBLFFBQUFvRSxLQUNBLE1BQUFDLEdBR0EsUUFBQUMsS0FDQSxNQUFBQyxHQUdBLFFBQUFDLEdBQUE3QyxFQUFBOEMsRUFBQUMsR0FFQSxHQUFBcEYsR0FBQUwsRUFBQU0sUUFFQW9GLElBNkNBLE9BMUNBRixHQUFBN0UsUUFBQSxTQUFBOEMsR0FFQSxHQUFBQSxFQUFBQyxPQUFBLENBR0EsR0FBQUMsR0FBQUMsRUFBQUMsSUFBQUosRUFBQUMsT0FBQSxTQUFBSSxHQUFBLE1BQUFBLElBQ0FILEdBQUFyQixFQUFBLFdBQUFxQixFQUFBLFNBS0EsS0FBQSxHQUhBYyxHQUFBLEdBR0FDLEVBQUEsRUFBQUEsRUFBQWYsRUFBQWdCLE9BQUFELElBQUEsQ0FHQSxHQUFBZixFQUFBZSxHQUFBNUQsV0FBQTJFLEVBQUEsQ0FFQSxHQUFBRSxHQUFBbEMsQ0FDQWtDLEdBQUExQyxTQUFBeUIsRUFBQSxFQUNBaUIsRUFBQUMsTUFBQWpDLEVBQUFlLEdBQUFrQixNQUNBRCxFQUFBRSxhQUFBcEIsRUFDQWtCLEVBQUFHLE9BQUFuQyxFQUFBZSxHQUFBb0IsT0FBQW5DLEVBQUFlLEdBQUFvQixPQUFBLEtBQ0FILEVBQUFJLFVBQUFwQyxFQUFBZSxHQUFBcUIsVUFBQXBDLEVBQUFlLEdBQUFxQixVQUFBLEtBQ0FKLEVBQUFLLFlBQUFyQyxFQUFBZSxHQUFBc0IsWUFBQXJDLEVBQUFlLEdBQUFzQixZQUFBLEtBRUFOLEVBQUFPLEtBQUFOLEdBQ0FsQixFQUFBLEVBQ0EsT0FHQUEsRUFBQSxJQUNBQSxHQUFBLE9BVUFwRSxFQUFBdEMsUUFBQTJILEdBRUFyRixFQUFBVSxRQUlBLFFBQUFtRixHQUFBeEQsR0FFQSxHQUFBcEQsR0FBQSxHQUFBQyxVQUFBWixFQUFBUCxPQUNBK0gsRUFBQXpILEVBQ0FZLEVBQ0FHLE1BQUEsWUFDQUEsTUFBQWlELEdBQ0FqRCxNQUFBLGNBR0EwRyxHQUFBckQsVUFBQWxELEtBQUEsV0FDQTBELEVBQUE2QyxFQUdBN0MsRUFBQThDLE9BQUFDLFdBRUFuQyxFQUFBeEIsR0FBQTlDLEtBQUEsU0FBQWdELEdBQ0FZLEVBQUFaLEVBQ0FXLE1BR0FaLEVBQUFELEdBQUE5QyxLQUFBLFNBQUFnRCxHQUNBLEdBQUEwRCxHQUFBMUQsQ0FDQTJCLEdBQUErQixFQUFBM0IsT0FDQVMsRUFBQWtCLEVBQUFDLE1BQUEsRUFBQSxNQU1BdEIsRUFBQXZDLEdBQUE5QyxLQUFBLFNBQUFnRCxHQUNBLEdBQUEwRCxHQUFBMUQsQ0FDQTJCLEdBQUErQixFQUFBM0IsT0FDQVMsRUFBQWtCLElBTUFoRCxFQUFBOEMsT0FBQUksV0FFQWhFLEVBQUFpRSxZQUFBL0QsR0FBQTlDLEtBQUEsU0FBQWdELEdBQ0EwQyxFQUFBMUMsTUEzVkEsR0FBQVUsR0FBQSxLQUNBRSxFQUFBLEtBQ0FlLEVBQUEsS0FDQWEsRUFBQSxLQUNBRSxFQUFBLElBRUF0RCxNQUFBUyw4QkFBQUEsRUFDQVQsS0FBQW1CLG1CQUFBQSxFQUNBbkIsS0FBQXFCLHlCQUFBQSxFQUNBckIsS0FBQWdDLFlBQUFBLEVBQ0FoQyxLQUFBcUMsa0JBQUFBLEVBQ0FyQyxLQUFBa0MsYUFBQUEsRUFDQWxDLEtBQUFzQywwQkFBQUEsRUFDQXRDLEtBQUFXLHdCQUFBQSxFQUNBWCxLQUFBdUQsZ0JBQUFBLEVBQ0F2RCxLQUFBaUQseUJBQUFBLEVBQ0FqRCxLQUFBbUQsK0JBQUFBLEVBQ0FuRCxLQUFBcUQsa0JBQUFBLEVBQ0FyRCxLQUFBa0Usb0JBQUFBLEVBekJBN0ksUUFDQUMsT0FBQSxVQUNBNEUsUUFBQSxlQUFBRyxHSittQklBLEVBQWFoRSxTQUFXLEtBQU0sVUFBVyxrQkFBbUIsaUJBQWtCLGVBQWdCLGtCS3BuQmxHLFdBQ0EsWUFPQSxTQUFBcUksR0FBQUMsRUFBQXJFLEVBQUFzRSxFQUFBbkksRUFBQXlCLEVBQUFxQyxFQUFBRixFQUFBdEMsRUFBQThHLEVBQUFyRSxFQUFBN0QsR0FtQkEsUUFBQW1JLEtBQ0F6SixRQUFBMEosUUFBQSxVQUFBRCxhQUdBLFFBQUFFLEtBQ0F4RSxFQUFBd0UsV0FBQUMsRUFBQUMsVUFBQUQsRUFBQUUsU0FBQXZILEtBQUEsV0FDQXdILFlBQUFDLE1BQUEsUUFBQUosRUFBQUUsUUFBQUcsVUFBQSxZQUFBLEtBQ0FMLEVBQUFFLFFBQUEsT0FJQSxRQUFBSSxHQUFBQyxFQUFBQyxHQUVBLEdBQUFDLEVBR0EsSUFBQUQsRUFBQSxHQUVBLE1BREFDLEdBQUEsQ0FJQUEsR0FBQSxHQUFBRCxDQUVBLElBQUFFLEdBQUFyRixFQUFBLFdBQUEyRSxFQUFBVyxXQUFBLFNBVUEsT0FQQUQsR0FBQUYsRUFBQSxJQUVBRSxFQUFBRixFQUFBLEdBQUE3QixRQUFBNEIsRUFBQTVCLFFBQ0E4QixHQUFBLEdBSUFBLEVBSUEsUUFBQUcsR0FBQXBDLEdBRUFxQixJQUNBckksRUFBQVUsR0FBQSxXQUFBMkksU0FBQXJDLElBSUEsUUFBQXNDLEtBRUExRixFQUFBNkQsb0JBQUFlLEVBQUFDLFdBRUFMLEVBQUFtQixnQkFBQXBJLEtBQUEsU0FBQWdELEdBQ0FxRSxFQUFBZ0IsV0FBQXJGLElBR0ErRCxFQUFBdUIsaUJBQUEsV0FBQSxNQUFBN0YsR0FBQWdCLDRCQUFBLFNBQUFULEdBQ0FxRSxFQUFBN0QsZ0JBQUFSLElBQ0EsR0FFQStELEVBQUF1QixpQkFBQSxXQUFBLE1BQUE3RixHQUFBZ0QscUJBQUEsU0FBQXpDLEdBQ0FxRSxFQUFBa0IsU0FBQXZGLEVBQ0FsQixRQUFBMEcsTUFBQW5CLEVBQUFrQixZQUNBLEdBR0FqSSxFQUFBLFdBQ0E3QyxRQUFBMEosUUFBQSxXQUFBc0IsT0FDQWhMLFFBQUEwSixRQUFBLFVBQUF1QixtQkFDQSxLQUlBLFFBQUFDLEdBQUFDLEdBR0EsSUFBQW5MLFFBQUEwSixRQUFBLGlCQUFBcEMsUUFFQW1DLElBQ0E1RyxFQUFBLFdBQ0E3QyxRQUFBMEosUUFBQXlCLEdBQUFELFlBQ0FsTCxRQUFBMEosUUFBQXlCLEVBQUEsV0FBQUMsVUFBQSxJQUNBLE9BSUFwTCxRQUFBMEosUUFBQXlCLEdBQUFELFlBQ0FsTCxRQUFBMEosUUFBQXlCLEVBQUEsV0FBQUMsVUFBQSxJQU1BLFFBQUFDLEdBQUFDLEdBRUEsR0FBQXJKLEdBQUEsR0FBQUMsVUFBQVosRUFBQVAsTUFFQWlFLEdBQUEyQixZQUFBaUQsRUFBQUMsVUFBQXlCLEdBQUEvSSxLQUFBLFNBQUFnRCxHQUNBcUUsRUFBQTJCLFNBQUFoRyxFQUVBcUUsRUFBQVcsV0FBQXJGLEVBQ0FqRCxFQUNBRyxNQUFBLFlBQ0FBLE1BQUF3SCxFQUFBQyxXQUNBekgsTUFBQSxlQUNBQSxNQUFBd0gsRUFBQTJCLFNBQUFDLEtBQ0FwSixNQUFBLGFBSUE4SSxFQUFBLGNBSUEsUUFBQU8sS0FFQXpHLEVBQUFNLHdCQUFBc0UsRUFBQUMsV0FBQXRILEtBQUEsU0FBQWdELEdBQ0FxRSxFQUFBOEIsb0JBQUFuRyxJQUdBMkYsRUFBQSw4QkFJQSxRQUFBUyxHQUFBdkQsR0FFQXdCLEVBQUFnQyxZQUFBeEQsRUFFQXBELEVBQUFrRCxnQkFBQTBCLEVBQUFDLFVBQUFELEVBQUFpQyxTQUFBakMsRUFBQWdDLGFBQUFySixLQUFBLFNBQUFnRCxHQUNBcUUsRUFBQWtDLGFBQUF2RyxJQUdBMkYsRUFBQSxnQkFoSkEsR0FBQXRCLEdBQUFqRixJQUVBaUYsR0FBQUMsVUFBQU4sRUFBQU0sVUFFQUQsRUFBQUQsV0FBQUEsRUFDQUMsRUFBQU0sZ0JBQUFBLEVBQ0FOLEVBQUFZLGtCQUFBQSxFQUNBWixFQUFBeUIsY0FBQUEsRUFDQXpCLEVBQUFzQixVQUFBQSxFQUNBdEIsRUFBQTZCLDhCQUFBQSxFQUNBN0IsRUFBQStCLGdCQUFBQSxFQUVBakIsSUFwQkExSyxRQUNBQyxPQUFBLFVBQ0FRLFdBQUEsc0JBQUE0SSxHTGd4QklBLEVBQW9CckksU0FBVyxTQUFVLFVBQVcsZUFBZ0IsU0FBVSxXQUFZLGlCQUFrQixlQUFnQixjQUFlLGlCQUFrQixjQUFlLG1CTXJ4QmhMLFdBQ0EsWUFPQSxTQUFBbUUsR0FBQXhDLEVBQUF1QyxFQUFBN0QsRUFBQUMsR0FPQSxRQUFBcUksR0FBQXRFLEVBQUEwRyxHQUVBLEdBQUEvSSxHQUFBTCxFQUFBTSxRQUVBaEIsRUFBQSxHQUFBQyxVQUFBWixFQUFBUCxPQUNBaUwsRUFBQTNLLEVBQ0FZLEVBQ0FHLE1BQUEsWUFDQUEsTUFBQWlELEdBQ0FqRCxNQUFBLFlBYUEsT0FWQTRKLEdBQUF2RyxVQUFBbEQsS0FBQSxXQUVBeUosRUFBQUQsRUFBQTlCLFlBQ0FnQyxTQUFBRixFQUFBRyxZQUVBRixFQUFBbkcsUUFDQTdDLEVBQUF0QyxZQUlBc0MsRUFBQVUsUUFJQSxRQUFBMEYsR0FBQS9ELEdBRUEsR0FBQXJDLEdBQUFMLEVBQUFNLFFBRUFoQixFQUFBLEdBQUFDLFVBQUFaLEVBQUFQLE9BQ0ErSixFQUFBNUYsRUFDQWpELEVBQ0FHLE1BQUEsWUFDQUEsTUFBQWlELEdBQ0FqRCxNQUFBLFlBT0EsT0FKQTBJLEdBQUFyRixVQUFBbEQsS0FBQSxXQUNBUyxFQUFBdEMsUUFBQW9LLEtBR0E5SCxFQUFBVSxRQS9DQWlCLEtBQUFnRixXQUFBQSxFQUNBaEYsS0FBQXlFLFlBQUFBLEVBUkFwSixRQUNBQyxPQUFBLFVBQ0E0RSxRQUFBLGNBQUFNLEdOKzBCSUEsRUFBWW5FLFNBQVcsS0FBTSxpQkFBa0Isa0JBQW1CLG1CT3AxQnRFLFdBQ0EsWUFPQSxTQUFBbUwsS0FDQSxHQUFBQyxJQUNBQyxrQkFBQSxFQUNBNUwsV0FBQTZMLEVBQ0FDLGFBQUEsS0FDQUMsU0FBQSxJQUNBaE0sWUFBQSxnREFDQWlNLE9BQUEsRUFDQUMsWUFBQSxFQUVBLE9BQUFOLEdBSUEsUUFBQUUsR0FBQWhELEVBQUF0RSxHQUlBc0UsRUFBQXVCLGlCQUFBLFdBQUEsTUFBQTdGLEdBQUFnQyxxQkFBQSxTQUFBekIsR0FDQStELEVBQUFxRCxRQUFBQSxRQUFBbkwsTUFBQXFLLFNBQUF0RyxJQUNBLEdBekJBdkYsUUFDQUMsT0FBQSxVQUNBbU0sVUFBQSxjQUFBRCxHUDgyQklHLEVBQW9CdEwsU0FBVyxTQUFVLG1CUW4zQjdDLFdBQ0EsWUFPQSxTQUFBNEwsS0FDQSxHQUFBUixJQUNBQyxrQkFBQSxFQUNBNUwsV0FBQW9NLEVBQ0FOLGFBQUEsS0FDQUMsU0FBQSxJQUNBaE0sWUFBQSwyREFDQWlNLE9BQUEsRUFDQUMsWUFBQSxFQUVBLE9BQUFOLEdBSUEsUUFBQVMsR0FBQXZELEVBQUF0RSxHQUlBc0UsRUFBQXVCLGlCQUFBLFdBQUEsTUFBQTdGLEdBQUFpQyw2QkFBQSxTQUFBMUIsR0FDQStELEVBQUFxRCxRQUFBQSxRQUFBbkwsTUFBQXNMLGtCQUFBdkgsSUFDQSxHQUVBK0QsRUFBQXVCLGlCQUFBLFdBQUEsTUFBQTdGLEdBQUE4QyxrQ0FBQSxTQUFBdkMsR0FDQStELEVBQUFxRCxRQUFBQSxRQUFBbkwsTUFBQXVMLHNCQUFBeEgsSUFDQSxHQTdCQXZGLFFBQ0FDLE9BQUEsVUFDQW1NLFVBQUEseUJBQUFRLEdSaTVCSUMsRUFBK0I3TCxTQUFXLFNBQVUsbUJTdDVCeEQsV0FDQSxZQU9BLFNBQUFnTSxLQUNBLEdBQUFaLElBQ0FDLGtCQUFBLEVBQ0E1TCxXQUFBd00sRUFDQVYsYUFBQSxLQUNBQyxTQUFBLElBQ0FoTSxZQUFBLG1EQUNBaU0sT0FBQSxFQUNBQyxZQUFBLEVBRUEsT0FBQU4sR0FJQSxRQUFBYSxHQUFBcEssR0FLQUEsRUFBQSxXQUNBN0MsUUFBQTBKLFFBQUEsZ0JBQUF3RCxhQUNBQyxXQUFBLEtBRUEsS0E1QkFuTixRQUNBQyxPQUFBLFVBQ0FtTSxVQUFBLGlCQUFBWSxHVG03QklDLEVBQXVCak0sU0FBVyxlVXg3QnRDLFdBQ0EsWUFPQSxTQUFBb00sS0FDQSxHQUFBaEIsSUFDQUMsa0JBQUEsRUFDQTVMLFdBQUE0TSxFQUNBZCxhQUFBLEtBQ0FDLFNBQUEsSUFDQWhNLFlBQUEsNERBQ0FpTSxPQUFBLEVBQ0FDLFlBQUEsRUFFQSxPQUFBTixHQUlBLFFBQUFpQixHQUFBL0QsRUFBQXRFLEdBSUFzRSxFQUFBdUIsaUJBQUEsV0FBQSxNQUFBN0YsR0FBQWlDLDZCQUFBLFNBQUExQixHQUNBK0QsRUFBQXFELFFBQUFBLFFBQUFuTCxNQUFBc0wsa0JBQUF2SCxJQUNBLEdBRUErRCxFQUFBdUIsaUJBQUEsV0FBQSxNQUFBN0YsR0FBQThDLGtDQUFBLFNBQUF2QyxHQUNBK0QsRUFBQXFELFFBQUFBLFFBQUFuTCxNQUFBdUwsc0JBQUF4SCxJQUNBLEdBN0JBdkYsUUFDQUMsT0FBQSxVQUNBbU0sVUFBQSwwQkFBQWdCLEdWczlCSUMsRUFBZ0NyTSxTQUFXLFNBQVUsbUJXMzlCekQsV0FDQSxZQU9BLFNBQUFzTSxLQUNBLEdBQUFsQixJQUNBQyxrQkFBQSxFQUNBNUwsV0FBQThNLEVBQ0FoQixhQUFBLEtBQ0FDLFNBQUEsSUFDQWhNLFlBQUEsb0RBQ0FpTSxPQUNBZSxXQUFBLEtBR0EsT0FBQXBCLEdBSUEsUUFBQW1CLEdBQUExSyxJQXBCQTdDLFFBQ0FDLE9BQUEsVUFDQW1NLFVBQUEsa0JBQUFrQixHWGsvQklDLEVBQXdCdk0sU0FBVyxlWXYvQnZDLFdBQ0EsWUFPQSxTQUFBeU0sR0FBQTVLLEVBQUEzQixFQUFBMEIsRUFBQXhCLEVBQUFzQixHQVVBLFFBQUFnTCxLQUlBN0ssRUFBQSxXQUNBN0MsUUFBQTBKLFFBQUEsb0JBQ0FpRSxVQUNBQyxXQUFBLElBQ0FDLFlBQUEsSUFDQUMsaUJBQUEsRUFDQUMsT0FBQSxFQUNBQyxPQUFBLEtBQ0FDLGFBQUEsS0FFQSxLQUVBcEwsRUFBQSxXQUNBN0MsUUFBQTBKLFFBQUEsb0JBQ0FpRSxVQUNBQyxXQUFBLElBQ0FDLFlBQUEsSUFDQUMsaUJBQUEsRUFDQUMsT0FBQSxFQUNBQyxPQUFBLEtBQ0FDLGFBQUEsS0FFQSxLQUdBLFFBQUF4SixLQUNBL0IsRUFBQStCLFNBQ0E3QixFQUFBc0wsU0FBQUMsU0F0Q0EsR0FBQXZFLEdBQUFqRixJQUNBaUYsR0FBQW5GLE9BQUFBLEVBRUFpSixJQVhBMU4sUUFDQUMsT0FBQSxVQUNBUSxXQUFBLG1CQUFBZ04sR1p3aUNJQSxFQUFpQnpNLFNBQVcsV0FBWSxhQUFjLFVBQVcsU0FBVSxrQmE3aUMvRSxXQUNBLFlBTUEsU0FBQW9OLEtBQ0EsTUFBQSxVQUFBQyxFQUFBQyxFQUFBQyxHQUNBLEdBQUFDLEtBYUEsT0FYQXhPLFNBQUFzRCxRQUFBK0ssRUFBQSxTQUFBSSxFQUFBOUksR0FDQThJLEVBQUE5SSxJQUFBQSxFQUNBNkksRUFBQTVGLEtBQUE2RixLQUdBRCxFQUFBRSxLQUFBLFNBQUFDLEVBQUFDLEdBQ0EsTUFBQUQsR0FBQUwsR0FBQU0sRUFBQU4sR0FBQSxFQUFBLEtBR0FDLEdBQUFDLEVBQUFELFVBRUFDLEdBbkJBeE8sUUFDQUMsT0FBQSxVQUNBNE8sT0FBQSxnQkFBQVQsTUNMQSxXQUNBLFlBT0EsU0FBQVUsR0FBQTVOLEVBQUFFLEVBQUFtSSxFQUFBMUcsRUFBQWtNLEVBQUFDLEVBQUF4RixHQVVBLFFBQUFrRSxLQUNBbEUsRUFBQW1CLGdCQUFBcEksS0FBQSxTQUFBZ0QsR0FDQXFFLEVBQUFnQixXQUFBckYsSUFJQTFDLEVBQUEsV0FDQTJHLEVBQUF5RixjQUFBL04sRUFBQWdPLFFBQUF6TCxVQUFBbEIsS0FBQSxTQUFBZ0QsR0FDQXFFLEVBQUF1RixXQUFBNUosS0FFQSxLQUdBLFFBQUE2SixLQUVBeEYsRUFBQXlGLGVBQUEsRUFFQUwsRUFBQU0sVUFBQSw2QkFDQU4sRUFBQU8sT0FBQTNGLEVBQUE0RixNQUFBak4sS0FBQSxTQUFBZ0QsR0FDQWlFLEVBQUFpRyxlQUFBbEssRUFBQSxHQUFBbUssS0FBQXhPLEVBQUFnTyxRQUFBekwsVUFDQXNHLFlBQUFDLE1BQUEsMkJBQUEsS0FFQW5ILEVBQUEsV0FDQXpCLEVBQUFVLEdBQUEsU0FDQSxPQS9CQSxHQUFBOEgsR0FBQWpGLElBQ0FpRixHQUFBd0YsYUFBQUEsRUFFQTFCLElBWEExTixRQUNBQyxPQUFBLFVBQ0FRLFdBQUEsbUJBQUFxTyxHZG1uQ0lBLEVBQWlCOU4sU0FBVyxhQUFjLFNBQVUsZUFBZ0IsV0FBWSxTQUFVLFFBQVMscUJleG5DdkcsV0FDQSxZQU9BLFNBQUEyTyxHQUFBckcsRUFBQXpHLEVBQUF6QixFQUFBUixHQVNBLFFBQUFnUCxLQUVBdEcsRUFBQXVHLGFBQUFDLFFBRUFsUCxFQUFBbVAsaUJBQ0FoTSxNQUFBbkQsRUFBQW1CLFdBQUFpQyxTQUFBRCxNQUNBaU0sWUFBQXBHLEVBQUFxRyxxQkFDQUMsWUFBQXRHLEVBQUF1RyxtQkFDQTVOLEtBQUEsV0FFQXdILFlBQUFDLE1BQUEsNkJBQUEsS0FDQW5ILEVBQUEsV0FDQXpCLEVBQUFVLEdBQUEsU0FDQSxPQVRBbEIsU0FXQSxTQUFBaUIsR0FFQSxxQkFBQUEsRUFBQXlDLE9BQ0FzRixFQUFBd0csMkJBQUEsS0F4QkEsR0FBQXhHLEdBQUFqRixJQUVBaUYsR0FBQWdHLHFCQUFBQSxFQVZBNVAsUUFDQUMsT0FBQSxVQUNBUSxXQUFBLDJCQUFBa1AsR2ZpcUNJQSxFQUF5QjNPLFNBQVcsU0FBVSxXQUFZLFNBQVUsa0JnQnRxQ3hFLFdBQ0EsWUFPQSxTQUFBcVAsR0FBQS9HLEVBQUF6RyxJQUxBN0MsUUFDQUMsT0FBQSxVQUNBUSxXQUFBLGlCQUFBNFAsR2hCbXJDSUEsRUFBZXJQLFNBQVcsU0FBVSxlaUJ4ckN4QyxXQUNBLFlBT0EsU0FBQXNQLEdBQUEzTixFQUFBRSxFQUFBcUMsRUFBQXNFLEVBQUFsSSxHQVNBLFFBQUFvTSxLQUNBNkMsSUFBQWhPLEtBQUEsU0FBQWdELEdBQ0FxRSxFQUFBNEcsaUJBQUFqTCxJQUdBaUUsRUFBQW1CLGdCQUFBcEksS0FBQSxTQUFBZ0QsR0FDQXFFLEVBQUFnQixXQUFBckYsSUFJQSxRQUFBZ0wsS0FFQSxHQUFBdk4sR0FBQUwsRUFBQU0sUUFDQWhCLEVBQUEsR0FBQUMsVUFBQVosRUFBQVAsT0FFQXlQLEVBQUF0TCxFQUNBakQsRUFDQUcsTUFBQSxVQU9BLE9BSkFvTyxHQUFBL0ssUUFBQSxXQUNBekMsRUFBQXRDLFFBQUE4UCxLQUdBeE4sRUFBQVUsUUE5QkEsR0FBQWtHLEdBQUFqRixJQUVBK0ksS0FWQTFOLFFBQ0FDLE9BQUEsVUFDQVEsV0FBQSx3QkFBQTZQLEdqQm11Q0lBLEVBQXNCdFAsU0FBVyxLQUFNLFdBQVksaUJBQWtCLGlCQUFrQixtQmtCeHVDM0YsV0FDQSxZQU9BLFNBQUF5UCxHQUFBbkgsRUFBQUMsRUFBQTVHLEVBQUFFLEVBQUF6QixFQUFBOEQsRUFBQXhDLEVBQUE4RyxFQUFBeEUsR0FTQSxRQUFBMEksS0FFQWxFLEVBQUFrSCxZQUFBbkgsRUFBQWtCLFVBQUFsSSxLQUFBLFNBQUFnRCxHQUNBcUUsRUFBQXpILFlBQUFvRCxFQUVBaUUsRUFBQW1ILHFCQUFBL0csRUFBQXpILGFBQUFJLEtBQUEsU0FBQWdELEdBQ0EsR0FBQXFMLEdBQUFyTCxDQUNBcUUsR0FBQWlILGVBQUFySCxFQUFBc0gsdUJBQUFGLEVBQUFySCxFQUFBa0IsY0FJQWpCLEVBQUFtQixnQkFBQXBJLEtBQUEsU0FBQWdELEdBQ0FxRSxFQUFBZ0IsV0FBQXJGLElBR0FpRSxFQUFBeUYsY0FBQTFGLEVBQUFrQixVQUFBbEksS0FBQSxTQUFBZ0QsR0FDQXFFLEVBQUF1RixXQUFBNUosRUFFQTFDLEVBQUEsV0FFQTdDLFFBQUEwSixRQUFBLGdCQUFBd0QsYUFDQUMsV0FBQSxLQUdBLE9BOUJBLEdBQUF2RCxHQUFBakYsSUFFQStJLEtBVkExTixRQUNBQyxPQUFBLFVBQ0FRLFdBQUEsb0JBQUFnUSxHbEJteENJQSxFQUFrQnpQLFNBQVcsU0FBVSxlQUFnQixLQUFNLFdBQVksU0FBVSxpQkFBa0IsY0FBZSxpQkFBa0IsbUJtQnh4QzFJLFdBQ0EsWUFPQSxTQUFBd0ksR0FBQXRJLEVBQUF5QixFQUFBdUMsRUFBQTdELEVBQUEyRCxFQUFBMUQsR0FXQSxRQUFBcUosS0FFQSxHQUFBM0gsR0FBQUwsRUFBQU0sUUFDQWhCLEVBQUEsR0FBQUMsVUFBQVosRUFBQVAsT0FFQTZKLEVBQUF2SixFQUNBWSxFQUNBRyxNQUFBLFdBT0EsT0FKQXdJLEdBQUFuRixRQUFBLFdBQ0F6QyxFQUFBdEMsUUFBQWtLLEtBR0E1SCxFQUFBVSxRQUlBLFFBQUF1TCxHQUFBOEIsR0FFQSxHQUFBL04sR0FBQUwsRUFBQU0sUUFDQWhCLEVBQUEsR0FBQUMsVUFBQVosRUFBQVAsT0FFQW9PLEVBQUE5TixFQUNBWSxFQUNBRyxNQUFBLFVBQ0FBLE1BQUEyTyxHQU9BLE9BSkE1QixHQUFBMUosUUFBQSxXQUNBekMsRUFBQXRDLFFBQUF5TyxLQUdBbk0sRUFBQVUsUUFJQSxRQUFBaU4sR0FBQUssR0FFQSxHQUFBaE8sR0FBQUwsRUFBQU0sUUFJQWdPLEdBSEEsR0FBQS9PLFVBQUFaLEVBQUFQLFVBSUEsS0FBQSxHQUFBNEUsS0FBQXFMLEdBQUFFLFVBQ0FELEVBQUFySSxLQUFBakQsRUFLQSxPQUZBM0MsR0FBQXRDLFFBQUF1USxHQUVBak8sRUFBQVUsUUFJQSxRQUFBb04sR0FBQUssRUFBQUosR0FFQSxHQUFBOU8sR0FBQSxHQUFBQyxVQUFBWixFQUFBUCxPQUdBOFAsSUE4REEsT0E3REFNLEdBQUE3TixRQUFBLFNBQUE5QixHQUVBd0QsRUFBQWMsbUJBQUF0RSxHQUFBZSxLQUFBLFNBQUF3RCxHQUVBQSxFQUFBTixVQUFBbEQsS0FBQSxXQUdBLEdBQUEsY0FBQXdELEVBQUF6RixNQUFBLENBRUEsR0FBQThRLEdBQUEvUCxFQUNBWSxFQUNBRyxNQUFBLGFBQ0FBLE1BQUFaLEdBR0E0UCxHQUFBM0wsVUFBQWxELEtBQUEsV0FJQXNPLEVBQUFqSSxLQUZBd0ksRUFBQUwsSUFHQU0sS0FBQXRMLEVBQUFzTCxLQUNBQyxRQUFBdkwsRUFBQXVMLFNBQUEsRUFBQSxLQUNBckgsVUFBQXpJLEVBQ0FsQixNQUFBLFlBQ0FpUixNQUFBeEwsRUFBQXdMLE1BQ0EzTCxTQUFBd0wsRUFBQUwsS0FNQU0sS0FBQXRMLEVBQUFzTCxLQUNBQyxRQUFBdkwsRUFBQXVMLFNBQUEsRUFBQSxLQUNBckgsVUFBQXpJLEVBQ0FsQixNQUFBLFlBQ0FpUixNQUFBeEwsRUFBQXdMLE1BQ0EzTCxTQUFBLFlBT0EsZUFBQUcsRUFBQXpGLE9BQUEsYUFBQXlGLEVBQUF6RixRQUVBdVEsRUFBQWpJLE1BQ0F5SSxLQUFBdEwsRUFBQXNMLEtBQ0FDLFFBQUF2TCxFQUFBdUwsU0FBQSxFQUFBLEtBQ0FySCxVQUFBekksRUFDQStQLE1BQUF4TCxFQUFBd0wsTUFDQWpSLE1BQUF5RixFQUFBekYsY0FXQXVRLEVBSUEsUUFBQUgsR0FBQUssR0FFQSxHQUFBL04sR0FBQUwsRUFBQU0sUUFDQWhCLEVBQUEsR0FBQUMsVUFBQVosRUFBQVAsT0FFQXlRLEVBQUF0TSxFQUNBakQsRUFDQUcsTUFBQSxTQWFBLE9BVkFvUCxHQUFBL0wsUUFBQSxXQUVBK0wsRUFBQWxPLFFBQUEsU0FBQUMsR0FDQUEsRUFBQUUsV0FBQXNOLEdBQ0EvTixFQUFBdEMsUUFBQTZDLE9BTUFQLEVBQUFVLFFBS0EsUUFBQStMLEdBQUFnQyxFQUFBVixHQUVBLEdBQUE5TyxHQUFBLEdBQUFDLFVBQUFaLEVBQUFQLE9BRUE2SixFQUFBdkosRUFDQVksRUFDQUcsTUFBQSxXQUdBd0ksR0FBQW5GLFFBQUEsV0FDQW1GLEVBQUFtRyxHQUFBVSxFQUNBN0csRUFBQS9FLFVBMUtBbEIsS0FBQWdHLGNBQUFBLEVBQ0FoRyxLQUFBc0ssY0FBQUEsRUFDQXRLLEtBQUFnTSxxQkFBQUEsRUFDQWhNLEtBQUFtTSx1QkFBQUEsRUFDQW5NLEtBQUErTCxZQUFBQSxFQUNBL0wsS0FBQThLLGVBQUFBLEVBWkF6UCxRQUNBQyxPQUFBLFVBQ0E0RSxRQUFBLGlCQUFBMkUsR25CKzhDSUEsRUFBZXhJLFNBQVcsYUFBYyxLQUFNLGlCQUFrQixrQkFBbUIsZUFBZ0IsbUJvQnA5Q3ZHLFdBQ0EsWUFPQSxTQUFBMFEsR0FBQXBJLEVBQUFwSSxFQUFBMkIsRUFBQUQsRUFBQXhCLEVBQUFDLEVBQUFxQixFQUFBOUIsR0FXQSxRQUFBNEQsS0FFQTlCLEVBQUE4QixlQUFBb0YsRUFBQStILFdBQUEvSCxFQUFBZ0ksZUFBQXJQLEtBQUEsU0FBQWdELEdBS0EsR0FIQXFFLEVBQUFpSSxzQkFBQSxFQUNBakksRUFBQWtJLDBCQUFBLEVBRUEsa0JBQUF2TSxFQUVBbkUsRUFBQVUsR0FBQSxZQUVBLENBQUEsR0FBQSxpQkFBQXlELEVBRUEsWUFEQXFFLEVBQUFpSSxzQkFBQSxFQUVBLHNCQUFBdE0sSUFDQXFFLEVBQUFrSSwwQkFBQSxNQU9BLFFBQUFDLEtBRUEsTUFBQW5JLEdBQUErSCxlQUtBL1EsR0FBQW9SLGdCQUNBak8sTUFBQTZGLEVBQUErSCxhQUNBcFAsS0FBQSxXQUNBcUgsRUFBQXFJLCtCQUFBLEVBQ0FsSSxZQUFBQyxNQUFBLDJDQUFBSixFQUFBK0gsV0FBQSxJQUFBLFlBUkEvSCxFQUFBcUksK0JBQUEsR0FhQSxRQUFBQyxLQUdBeFAsRUFBQUksa0JBQUE4RyxFQUFBdUksYUFBQTVQLEtBQUEsU0FBQTZQLEdBS0EsTUFIQXhJLEdBQUF5SSx3QkFBQSxFQUNBekksRUFBQTBJLHFCQUFBLEVBRUFGLE9BRUF4SSxFQUFBeUksd0JBQUEsT0FNQTNQLEdBQUFpQixjQUFBaUcsRUFBQTJJLFNBQUEzSSxFQUFBc0csWUFBQXRHLEVBQUF1SSxhQUFBNVAsS0FBQSxTQUFBZ0QsR0FFQSxNQUFBLGdCQUFBQSxPQUVBcUUsRUFBQTBJLHFCQUFBLFFBR0Esb0JBQUEvTSxHQUVBbkUsRUFBQVUsR0FBQSxXQUFBMkksU0FBQWIsRUFBQXVJLG1CQXZFQSxHQUFBdkksR0FBQWpGLElBRUFpRixHQUFBcEYsZUFBQUEsRUFDQW9GLEVBQUFtSSxjQUFBQSxFQUNBbkksRUFBQXNJLGlCQUFBQSxFQVpBbFMsUUFDQUMsT0FBQSxVQUNBUSxXQUFBLGdCQUFBaVIsR3BCK2lESUEsRUFBYzFRLFNBQVcsU0FBVSxhQUFjLFdBQVksVUFBVyxTQUFVLGtCQUFtQixjQUFlIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCd2Zy5hcHAnLCBbXG4gICAgICAgICAgICAvKiBBbmd1bGFyIG1vZHVsZXMgKi9cbiAgICAgICAgICAgICduZ0FuaW1hdGUnLFxuICAgICAgICAgICAgLyogQXBwIG1vZHVsZXMgKi9cbiAgICAgICAgICAgIC8qIFRoaXJkLXBhcnR5IG1vZHVsZXMgKi9cbiAgICAgICAgICAgICd1aS5yb3V0ZXInLFxuICAgICAgICAgICAgJ2ZpcmViYXNlJyxcbiAgICAgICAgICAgICd2YWxpZGF0aW9uLm1hdGNoJyxcbiAgICAgICAgICAgICdvcmRpbmFsJyxcbiAgICAgICAgICAgICduZ0ZpbGVVcGxvYWQnLFxuICAgICAgICAgICAgJ25nSW1ndXInXG4gICAgICAgIF0pO1xufSkoKTsiLCIoZnVuY3Rpb24oKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgndmcuYXBwJylcblx0XHQuY29uc3RhbnQoJ0ZJUkVCQVNFREFUQScsIHtcblx0XHRcdCdGQlVSTCc6ICdodHRwczovL3dvbGZzY29udGVzdHMuZmlyZWJhc2Vpby5jb20nXG5cdFx0fSlcblx0XHQuY29uZmlnKGNvbmZpZyk7XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGNvbmZpZygkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyKSB7XG5cblx0XHQvLyBSZWRpcmVjdCBhbnkgdW5tYXRjaGVkIFVSTCB0byAvLlxuXHRcdCR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy8nKTtcblxuXHRcdCRzdGF0ZVByb3ZpZGVyXG5cdFx0ICAgIC5zdGF0ZSgnaG9tZScsIHtcblx0XHQgICAgXHR1cmw6ICcvJyxcblx0XHQgICAgXHR0ZW1wbGF0ZVVybDogJ2FwcC9ob21lL2hvbWUuaHRtJyxcblx0XHQgICAgXHRjb250cm9sbGVyOiAnSG9tZUNvbnRyb2xsZXIgYXMgaG9tZSdcblx0XHQgICAgfSlcblxuXHRcdCAgICAuc3RhdGUoJ3JlZ2lzdGVyT3JMb2dpbicsIHtcblx0XHQgICAgXHR1cmw6ICcvcmVnaXN0ZXJPckxvZ2luJyxcblx0XHQgICAgXHR0ZW1wbGF0ZVVybDogJy9hcHAvaG9tZS9yZWcuaHRtJyxcblx0XHQgICAgXHRjb250cm9sbGVyOiAnUmVnQ29udHJvbGxlciBhcyByZWcnXG5cdFx0ICAgIH0pXG5cblx0XHQgICAgLnN0YXRlKCdwcm9maWxlJywge1xuXHRcdCAgICBcdHVybDogJy9wcm9maWxlLzp1c2VybmFtZScsXG5cdFx0ICAgIFx0dGVtcGxhdGVVcmw6ICcvYXBwL2hvbWUvcHJvZmlsZS5odG0nLFxuXHRcdCAgICBcdGNvbnRyb2xsZXI6ICdQcm9maWxlQ29udHJvbGxlciBhcyBwcm9maWxlJ1xuXHRcdCAgICB9KVxuXG5cdFx0ICAgIC5zdGF0ZSgnbGVhZGVyYm9hcmQnLCB7XG5cdFx0ICAgIFx0dXJsOiAnL2xlYWRlcmJvYXJkJyxcblx0XHQgICAgXHR0ZW1wbGF0ZVVybDogJy9hcHAvaG9tZS9sZWFkZXJib2FyZC5odG0nLFxuXHRcdCAgICBcdGNvbnRyb2xsZXI6ICdMZWFkZXJib2FyZENvbnRyb2xsZXIgYXMgbGVhZGVyYm9hcmQnXG5cdFx0ICAgIH0pXG5cblx0XHQgICAgLnN0YXRlKCdldmVudCcsIHtcblx0XHQgICAgXHR1cmw6ICcvZXZlbnQvOmV2ZW50TmFtZS9tYWluJyxcblx0XHQgICAgXHR0ZW1wbGF0ZVVybDogJy9hcHAvZXZlbnQvbWFpbi5odG0nLFxuXHRcdCAgICBcdGNvbnRyb2xsZXI6ICdFdmVudE1haW5Db250cm9sbGVyIGFzIGV2ZW50J1xuXHRcdCAgICB9KVxuXG5cdFx0ICAgIC5zdGF0ZSgnY3VzdG9taXplQXZhdGFyJywge1xuXHRcdCAgICBcdHVybDogJy9jdXN0b21pemVBdmF0YXInLFxuXHRcdCAgICBcdHRlbXBsYXRlVXJsOiAnL2FwcC9ob21lL2F2YXRhci5odG0nLFxuXHRcdCAgICBcdGNvbnRyb2xsZXI6ICdBdmF0YXJDb250cm9sbGVyIGFzIGF2YXRhcicsXG5cblx0XHQgICAgXHRyZXNvbHZlOiB7XG5cdFx0ICAgIFx0XHQnY3VycmVudEF1dGgnOiBbJ0F1dGhXcmFwcGVyJywgZnVuY3Rpb24oQXV0aFdyYXBwZXIpIHtcblx0XHQgICAgXHRcdFx0cmV0dXJuIEF1dGhXcmFwcGVyLiRyZXF1aXJlQXV0aCgpO1xuXHRcdCAgICBcdFx0fV1cblx0XHQgICAgXHR9XG5cdFx0ICAgIH0pXG5cblx0XHQgICAgLnN0YXRlKCdjaGFuZ2VQYXNzd29yZCcsIHtcblx0XHQgICAgXHR1cmw6ICcvY2hhbmdlUGFzc3dvcmQnLFxuXHRcdCAgICBcdHRlbXBsYXRlVXJsOiAnL2FwcC9ob21lL2NoYW5nZVBhc3N3b3JkLmh0bScsXG5cdFx0ICAgIFx0Y29udHJvbGxlcjogJ0NoYW5nZVBhc3N3b3JkQ29udHJvbGxlciBhcyBwd2NoYW5nZScsXG5cblx0XHQgICAgXHRyZXNvbHZlOiB7XG5cdFx0ICAgIFx0XHQnY3VycmVudEF1dGgnOiBbJ0F1dGhXcmFwcGVyJywgZnVuY3Rpb24oQXV0aFdyYXBwZXIpIHtcblx0XHQgICAgXHRcdFx0cmV0dXJuIEF1dGhXcmFwcGVyLiRyZXF1aXJlQXV0aCgpO1xuXHRcdCAgICBcdFx0fV1cblx0XHQgICAgXHR9XG5cdFx0ICAgIH0pO1xuXHR9XG59KSgpOyIsbnVsbCwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgndmcuYXBwJylcbiAgICAgICAgLnJ1bihydW4pO1xuXG4gICAgZnVuY3Rpb24gcnVuKCRyb290U2NvcGUsICRsb2NhdGlvbiwgJHN0YXRlLCAkZmlyZWJhc2VPYmplY3QsIEF1dGhXcmFwcGVyLCBGSVJFQkFTRURBVEEpIHtcblxuICAgICAgICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlRXJyb3InLCBmdW5jdGlvbihldmVudCwgdG9TdGF0ZSwgdG9QYXJhbXMsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcywgZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChlcnJvciA9PT0gJ0FVVEhfUkVRVUlSRUQnKSB7XG4gICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdyZWdpc3Rlck9yTG9naW4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZVN1Y2Nlc3MnLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgLy8gSWYgdXNlciBpcyBsb2dnZWQgaW4sIGRvd25sb2FkIHRoZWlyIHByb2ZpbGUgZGF0YSB0byBhbiBvYmplY3QgaW4gJHJvb3RTY29wZS5cbiAgICAgICAgICAgIC8vIEZJWE1FOiBXZSBzaG91bGRuJ3QgbmVlZCB0byBkbyB0aGlzIGV2ZXJ5IHN1Y2Nlc3NmdWwgc3RhdGUgY2hhbmdlLlxuICAgICAgICAgICAgaWYgKEF1dGhXcmFwcGVyLiRnZXRBdXRoKCkpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgYXV0aERhdGEgPSBBdXRoV3JhcHBlci4kZ2V0QXV0aCgpO1xuICAgICAgICAgICAgICAgIHZhciByZWYgPSBuZXcgRmlyZWJhc2UoRklSRUJBU0VEQVRBLkZCVVJMKTtcblxuICAgICAgICAgICAgICAgIHZhciBwcm9maWxlRGF0YSA9ICRmaXJlYmFzZU9iamVjdChyZWYuY2hpbGQoJ3VzZXJzJykuY2hpbGQoYXV0aERhdGEudWlkKSk7XG4gICAgICAgICAgICAgICAgcHJvZmlsZURhdGEuJGJpbmRUbygkcm9vdFNjb3BlLCAncHJvZmlsZScpLnRoZW4oZnVuY3Rpb24odW5iaW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUudW5iaW5kRnVuY3Rpb24gPSB1bmJpbmQ7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KTtcblxuICAgIH1cblxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCd2Zy5hcHAnKVxuICAgICAgICAuc2VydmljZSgnYXV0aFNlcnZpY2UnLCBhdXRoU2VydmljZSk7XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBhdXRoU2VydmljZSgkcSwgJHJvb3RTY29wZSwgJHN0YXRlLCAkd2luZG93LCAkdGltZW91dCwgJGZpcmViYXNlT2JqZWN0LCBBdXRoV3JhcHBlciwgRklSRUJBU0VEQVRBKSB7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnRlc3REYXRhID0gJ2hlbGxvIHdvcmxkISc7XG5cbiAgICBcdHRoaXMuY2hlY2tJZlVzZXJFeGlzdHMgPSBjaGVja0lmVXNlckV4aXN0cztcbiAgICBcdHRoaXMuY3JlYXRlTmV3VXNlciA9IGNyZWF0ZU5ld1VzZXI7XG4gICAgICAgIHRoaXMubG9naW5Ub0FjY291bnQgPSBsb2dpblRvQWNjb3VudDtcbiAgICAgICAgdGhpcy5sb2dPdXQgPSBsb2dPdXQ7XG5cbiAgICBcdC8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIFx0ZnVuY3Rpb24gY2hlY2tJZlVzZXJFeGlzdHMoaW5wdXRVc2VybmFtZSkge1xuXG4gICAgXHRcdHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICBcdFx0dmFyIGRvZXNVc2VyRXhpc3QgPSBmYWxzZTtcbiAgICBcdFx0dmFyIHVzZXJzUmVmID0gbmV3ICR3aW5kb3cuRmlyZWJhc2UoRklSRUJBU0VEQVRBLkZCVVJMICsgJy91c2VycycpO1xuXG4gICAgXHRcdHVzZXJzUmVmLm9uY2UoJ3ZhbHVlJywgZnVuY3Rpb24oZGF0YVNuYXBzaG90KSB7XG5cbiAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVNuYXBzaG90LmZvckVhY2goZnVuY3Rpb24odXNlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXIudmFsKCkudXNlck5hbWUgPT09IGlucHV0VXNlcm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2VzVXNlckV4aXN0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShkb2VzVXNlckV4aXN0KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgIFx0XHR9KTtcblxuICAgIFx0XHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcblxuICAgIFx0fVxuXG4gICAgXHRmdW5jdGlvbiBjcmVhdGVOZXdVc2VyKGlucHV0RW1haWwsIGlucHV0UGFzc3dvcmQsIGlucHV0VXNlcm5hbWUpIHtcblxuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcblxuICAgIFx0XHRBdXRoV3JhcHBlci4kY3JlYXRlVXNlcih7XG4gICAgXHRcdFx0ZW1haWw6IGlucHV0RW1haWwsXG4gICAgXHRcdFx0cGFzc3dvcmQ6IGlucHV0UGFzc3dvcmRcbiAgICBcdFx0fSkudGhlbihmdW5jdGlvbih1c2VyRGF0YSkge1xuXG4gICAgXHRcdFx0Ly8gQ3JlYXRlIGEgZGF0YSBlbnRyeSBmb3IgdGhlIG5ldyB1c2VybmFtZS5cbiAgICBcdFx0XHRuZXcgRmlyZWJhc2UoRklSRUJBU0VEQVRBLkZCVVJMKS5jaGlsZCgndXNlcnMvJyArIHVzZXJEYXRhLnVpZCkuc2V0KHtcblxuICAgIFx0XHRcdFx0dXNlck5hbWU6IGlucHV0VXNlcm5hbWUsXG4gICAgXHRcdFx0XHRyb2xlOiAnVXNlcidcblxuICAgIFx0XHRcdH0sIGZ1bmN0aW9uKGVycm9yRGF0YSkge1xuICAgIFx0XHRcdFx0Y29uc29sZS5lcnJvcihlcnJvckRhdGEpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3JEYXRhLmNvZGU7XG4gICAgXHRcdFx0fSk7XG5cbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBkYXRhIGVudHJ5IGZvciB0aGUgdXNlcidzIGF2YXRhci5cbiAgICAgICAgICAgICAgICBuZXcgRmlyZWJhc2UoRklSRUJBU0VEQVRBLkZCVVJMKS5jaGlsZCgnYXZhdGFycycpLmNoaWxkKGlucHV0VXNlcm5hbWUpLnNldCgnaHR0cDovL2FwaS5hZG9yYWJsZS5pby9hdmF0YXJzLzQyLycgKyBpbnB1dFVzZXJuYW1lKTtcblxuICAgIFx0XHRcdC8vIExvZyB0aGUgdXNlciBpbi5cbiAgICBcdFx0XHRBdXRoV3JhcHBlci4kYXV0aFdpdGhQYXNzd29yZCh7XG4gICAgXHRcdFx0XHRlbWFpbDogaW5wdXRFbWFpbCxcbiAgICBcdFx0XHRcdHBhc3N3b3JkOiBpbnB1dFBhc3N3b3JkXG4gICAgXHRcdFx0fSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgnQUNDT1VOVF9DUkVBVEVEJyk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICBcdFx0fSkuY2F0Y2goZnVuY3Rpb24oZXJyb3JEYXRhKSB7XG5cbiAgICBcdFx0XHRjb25zb2xlLmVycm9yKGVycm9yRGF0YSk7XG5cbiAgICBcdFx0XHRpZiAoZXJyb3JEYXRhLmNvZGUgPT09ICdFTUFJTF9UQUtFTicpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShlcnJvckRhdGEuY29kZSk7XG4gICAgXHRcdFx0fVxuXG4gICAgXHRcdH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcblxuICAgIFx0fVxuXG4gICAgICAgIGZ1bmN0aW9uIGxvZ2luVG9BY2NvdW50KGlucHV0RW1haWwsIGlucHV0UGFzc3dvcmQpIHtcblxuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgQXV0aFdyYXBwZXIuJGF1dGhXaXRoUGFzc3dvcmQoe1xuICAgICAgICAgICAgICAgIGVtYWlsOiBpbnB1dEVtYWlsLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBpbnB1dFBhc3N3b3JkXG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKGF1dGhEYXRhKSB7XG5cbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCdMT0dJTl9TVUNDRVNTJyk7XG5cbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yRGF0YSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKGVycm9yRGF0YS5jb2RlID09PSAnSU5WQUxJRF9VU0VSJykge1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCdJTlZBTElEX1VTRVInKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yRGF0YS5jb2RlID09PSAnSU5WQUxJRF9QQVNTV09SRCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgnSU5WQUxJRF9QQVNTV09SRCcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBsb2dPdXQoKSB7XG4gICAgICAgICAgICBBdXRoV3JhcHBlci4kdW5hdXRoKCk7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLnVuYmluZEZ1bmN0aW9uKCk7XG4gICAgICAgIH1cblxuICAgIH1cbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgndmcuYXBwJylcbiAgICAgICAgLmZhY3RvcnkoJ0F1dGhXcmFwcGVyJywgQXV0aFdyYXBwZXIpO1xuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gQXV0aFdyYXBwZXIoJGZpcmViYXNlQXV0aCwgRklSRUJBU0VEQVRBKSB7XG5cbiAgICAgICAgdmFyIHJlZiA9IG5ldyBGaXJlYmFzZShGSVJFQkFTRURBVEEuRkJVUkwpO1xuICAgICAgICByZXR1cm4gJGZpcmViYXNlQXV0aChyZWYpO1xuXG4gICAgfVxuICAgIFxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCd2Zy5hcHAnKVxuICAgICAgICAuc2VydmljZSgnZXZlbnRTZXJ2aWNlJywgZXZlbnRTZXJ2aWNlKTtcblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGV2ZW50U2VydmljZSgkcSwgJGZpbHRlciwgJGZpcmViYXNlT2JqZWN0LCAkZmlyZWJhc2VBcnJheSwgRklSRUJBU0VEQVRBLCB0ZWFtU2VydmljZSkge1xuXG4gICAgICAgIHZhciBfZXZlbnRQcm9wZXJ0aWVzID0gbnVsbDtcbiAgICAgICAgdmFyIF9nYW1lTGlzdCA9IG51bGw7XG4gICAgICAgIHZhciBfbGVhZGVyYm9hcmRMZW5ndGggPSBudWxsO1xuICAgICAgICB2YXIgX3N1bW1hcml6ZWRMZWFkZXJib2FyZCA9IG51bGw7XG4gICAgICAgIHZhciBfdGVhbUxpc3QgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlTXVsdGlHYW1lRmluYWxTdGFuZGluZ3MgPSBjcmVhdGVNdWx0aUdhbWVGaW5hbFN0YW5kaW5ncztcbiAgICAgICAgdGhpcy5nZXRFdmVudFByb3BlcnRpZXMgPSBnZXRFdmVudFByb3BlcnRpZXM7XG4gICAgICAgIHRoaXMuZ2V0RXZlbnRQcm9wZXJ0aWVzT2JqZWN0ID0gZ2V0RXZlbnRQcm9wZXJ0aWVzT2JqZWN0O1xuICAgICAgICB0aGlzLmdldEdhbWVEYXRhID0gZ2V0R2FtZURhdGE7XG4gICAgICAgIHRoaXMuZ2V0R2FtZUxpc3RPYmplY3QgPSBnZXRHYW1lTGlzdE9iamVjdDtcbiAgICAgICAgdGhpcy5nZXRHYW1lc0xpc3QgPSBnZXRHYW1lc0xpc3Q7XG4gICAgICAgIHRoaXMuZ2V0TGVhZGVyYm9hcmRMZW5ndGhWYWx1ZSA9IGdldExlYWRlcmJvYXJkTGVuZ3RoVmFsdWU7XG4gICAgICAgIHRoaXMuZ2V0TXVsdGlHYW1lTGVhZGVyYm9hcmQgPSBnZXRNdWx0aUdhbWVMZWFkZXJib2FyZDtcbiAgICAgICAgdGhpcy5nZXRQbGF5ZXJTY29yZXMgPSBnZXRQbGF5ZXJTY29yZXM7XG4gICAgICAgIHRoaXMuZ2V0U2luZ2xlR2FtZUxlYWRlcmJvYXJkID0gZ2V0U2luZ2xlR2FtZUxlYWRlcmJvYXJkO1xuICAgICAgICB0aGlzLmdldFN1bW1hcml6ZWRMZWFkZXJib2FyZE9iamVjdCA9IGdldFN1bW1hcml6ZWRMZWFkZXJib2FyZE9iamVjdDtcbiAgICAgICAgdGhpcy5nZXRUZWFtTGlzdE9iamVjdCA9IGdldFRlYW1MaXN0T2JqZWN0O1xuICAgICAgICB0aGlzLmxvYWRFdmVudFByb3BlcnRpZXMgPSBsb2FkRXZlbnRQcm9wZXJ0aWVzO1xuXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVNdWx0aUdhbWVGaW5hbFN0YW5kaW5ncyhpbnB1dEV2ZW50KSB7XG5cbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgZmluYWwgc3RhbmRpbmdzIG9mIHRoZSBldmVudC5cbiAgICAgICAgICAgIGdldE11bHRpR2FtZUxlYWRlcmJvYXJkKGlucHV0RXZlbnQpLnRoZW4oZnVuY3Rpb24gdGhlbihtb2RlbCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHJlZiA9IG5ldyBGaXJlYmFzZShGSVJFQkFTRURBVEEuRkJVUkwpO1xuICAgICAgICAgICAgICAgIHZhciBpbnB1dEV2ZW50U3RhbmRpbmdzID0gJGZpcmViYXNlT2JqZWN0KFxuICAgICAgICAgICAgICAgICAgICByZWZcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jaGlsZCgnc3RhbmRpbmdzJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jaGlsZChpbnB1dEV2ZW50KVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBpbnB1dEV2ZW50U3RhbmRpbmdzLiRsb2FkZWQoKS50aGVuKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLmZvckVhY2goZnVuY3Rpb24oc3RhbmRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0RXZlbnRTdGFuZGluZ3Nbc3RhbmRpbmcua2V5XSA9IHN0YW5kaW5nLnBvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBpbnB1dEV2ZW50U3RhbmRpbmdzLiRzYXZlKCk7XG5cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldEV2ZW50UHJvcGVydGllcyhpbnB1dEV2ZW50KSB7XG5cbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgXHR2YXIgcmVmID0gbmV3IEZpcmViYXNlKEZJUkVCQVNFREFUQS5GQlVSTCk7XG4gICAgICAgIFx0dmFyIGV2ZW50UHJvcGVydGllcyA9ICRmaXJlYmFzZU9iamVjdChcbiAgICAgICAgXHRcdHJlZlxuICAgICAgICBcdFx0XHQuY2hpbGQoJ2NvbnRlc3RzJylcbiAgICAgICAgXHRcdFx0LmNoaWxkKGlucHV0RXZlbnQpXG4gICAgICAgIFx0XHRcdC5jaGlsZCgncHJvcGVydGllcycpXG4gICAgICAgIFx0KTtcblxuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShldmVudFByb3BlcnRpZXMpO1xuXG4gICAgICAgIFx0cmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldEV2ZW50UHJvcGVydGllc09iamVjdCgpIHtcbiAgICAgICAgICAgIHJldHVybiBfZXZlbnRQcm9wZXJ0aWVzO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0Rmlyc3RQbGFjZVNjb3JlcygpIHtcblxuICAgICAgICAgICAgX2dhbWVMaXN0LmZvckVhY2goZnVuY3Rpb24oZ2FtZSkge1xuXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIHNjb3JlcywgZ2V0IHRoZSB0b3Agb25lLlxuICAgICAgICAgICAgICAgIGlmIChnYW1lLnNjb3Jlcykge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzY29yZXNBcnJheSA9ICQubWFwKGdhbWUuc2NvcmVzLCBmdW5jdGlvbihlbCkgeyByZXR1cm4gZWw7IH0pO1xuICAgICAgICAgICAgICAgICAgICBzY29yZXNBcnJheSA9ICRmaWx0ZXIoJ29yZGVyQnknKShzY29yZXNBcnJheSwgJy1zY29yZScpO1xuICAgICAgICAgICAgICAgICAgICBnYW1lLmZpcnN0U2NvcmUgPSBzY29yZXNBcnJheVswXTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldEdhbWVEYXRhKGlucHV0RXZlbnQsIGlucHV0R2FtZSkge1xuXG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICB2YXIgcmVmID0gbmV3IEZpcmViYXNlKEZJUkVCQVNFREFUQS5GQlVSTCk7XG5cbiAgICAgICAgICAgIGdldEdhbWVzTGlzdChpbnB1dEV2ZW50KS50aGVuKGZ1bmN0aW9uKGdhbWVzTGlzdCkge1xuXG4gICAgICAgICAgICAgICAgZ2FtZXNMaXN0LmZvckVhY2goZnVuY3Rpb24oZ2FtZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChnYW1lLmNhbWVsTmFtZSA9PT0gaW5wdXRHYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGdhbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRHYW1lTGlzdE9iamVjdCgpIHtcbiAgICAgICAgICAgIHJldHVybiBfZ2FtZUxpc3Q7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRHYW1lc0xpc3QoaW5wdXRFdmVudCkge1xuXG4gICAgICAgIFx0dmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICBcdHZhciByZWYgPSBuZXcgRmlyZWJhc2UoRklSRUJBU0VEQVRBLkZCVVJMKTtcbiAgICAgICAgXHR2YXIgZ2FtZXNMaXN0ID0gJGZpcmViYXNlQXJyYXkoXG4gICAgICAgIFx0XHRyZWZcbiAgICAgICAgXHRcdFx0LmNoaWxkKCdjb250ZXN0cycpXG4gICAgICAgIFx0XHRcdC5jaGlsZChpbnB1dEV2ZW50KVxuICAgICAgICBcdFx0XHQuY2hpbGQoJ2FjdGl2ZUdhbWVzJylcbiAgICAgICAgXHQpO1xuXG4gICAgICAgIFx0Z2FtZXNMaXN0LiRsb2FkZWQoKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICBcdFx0ZGVmZXJyZWQucmVzb2x2ZShnYW1lc0xpc3QpO1xuICAgICAgICBcdH0pO1xuXG4gICAgICAgIFx0cmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldExlYWRlcmJvYXJkTGVuZ3RoVmFsdWUoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2xlYWRlcmJvYXJkTGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0TXVsdGlHYW1lTGVhZGVyYm9hcmQoaW5wdXRFdmVudCkge1xuXG4gICAgICAgIFx0dmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICBcdC8vIFdlIG5lZWQgdG8gZ2V0IHRoZSB0b3AgMTIgcGxheWVycyBmb3IgZXZlcnkgZ2FtZS5cbiAgICAgICAgXHR2YXIgcGxheWVyUG9pbnRzID0ge307XG5cbiAgICAgICAgXHRnZXRHYW1lc0xpc3QoaW5wdXRFdmVudCkudGhlbihmdW5jdGlvbiB0aGVuKG1vZGVsKSB7XG5cbiAgICAgICAgXHRcdHZhciBnYW1lc0xpc3QgPSBtb2RlbDtcbiAgICAgICAgXHRcdGdhbWVzTGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGdhbWUpIHtcblxuICAgICAgICBcdFx0XHRpZiAoZ2FtZS5zY29yZXMpIHtcblxuICAgICAgICBcdFx0XHRcdC8vIENvbnZlcnQgdGhlIGdhbWUncyBzY29yZXMgdG8gYW4gYXJyYXkuXG4gICAgICAgIFx0XHRcdFx0dmFyIHNjb3Jlc0FycmF5ID0gJC5tYXAoZ2FtZS5zY29yZXMsIGZ1bmN0aW9uKGVsKSB7IHJldHVybiBlbDsgfSk7XG4gICAgICAgIFx0XHRcdFx0c2NvcmVzQXJyYXkgPSAkZmlsdGVyKCdvcmRlckJ5Jykoc2NvcmVzQXJyYXksICctc2NvcmUnKTtcblxuICAgICAgICBcdFx0XHRcdHZhciB0b3RhbEF3YXJkID0gMTI7XG5cbiAgICAgICAgXHRcdFx0XHQvLyBJdGVyYXRlIHRocm91Z2ggdGhlIHRvcCBzY29yZXMgYXdhcmRpbmcgcG9pbnRzLlxuICAgICAgICBcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc2NvcmVzQXJyYXkubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICBcdFx0XHRcdFx0aWYgKCFwbGF5ZXJQb2ludHNbc2NvcmVzQXJyYXlbaV0udXNlck5hbWVdKSB7XG4gICAgICAgIFx0XHRcdFx0XHRcdHBsYXllclBvaW50c1tzY29yZXNBcnJheVtpXS51c2VyTmFtZV0gPSB7XG4gICAgICAgIFx0XHRcdFx0XHRcdFx0cG9pbnRzOiAwXG4gICAgICAgIFx0XHRcdFx0XHRcdH07XG4gICAgICAgIFx0XHRcdFx0XHR9XG5cbiAgICAgICAgXHRcdFx0XHRcdHBsYXllclBvaW50c1tzY29yZXNBcnJheVtpXS51c2VyTmFtZV0ucG9pbnRzICs9IHRvdGFsQXdhcmQ7XG5cbiAgICAgICAgXHRcdFx0XHRcdGlmICh0b3RhbEF3YXJkID4gMCkge1xuICAgICAgICBcdFx0XHRcdFx0XHR0b3RhbEF3YXJkIC09IDE7XG4gICAgICAgIFx0XHRcdFx0XHR9XG5cbiAgICAgICAgXHRcdFx0XHR9XG5cbiAgICAgICAgXHRcdFx0fVxuXG4gICAgICAgIFx0XHR9KTtcblxuICAgICAgICBcdFx0Ly8gRmluZCBhbmQgcmVzb2x2ZSB0aWVzLlxuICAgICAgICBcdFx0cGxheWVyUG9pbnRzID0gJGZpbHRlcignb3JkZXJPYmplY3RCeScpKHBsYXllclBvaW50cywgJ3BvaW50cycsIHRydWUpO1xuICAgICAgICAgICAgICAgIHZhciBoYXZlQm90dG9tU2NvcmVyc0Zsb29yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIGZsb29yUmFuZ2UgPSAwO1xuICAgICAgICBcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwbGF5ZXJQb2ludHMubGVuZ3RoOyBpICs9IDEpIHtcblxuICAgICAgICBcdFx0XHRpZiAocGxheWVyUG9pbnRzW2ktMV0gJiYgcGxheWVyUG9pbnRzW2ldLnBvaW50cyAmJiBwbGF5ZXJQb2ludHNbaS0xXS5wb2ludHMpIHtcblxuICAgICAgICBcdFx0XHRcdGlmIChwbGF5ZXJQb2ludHNbaV0ucG9pbnRzID09PSBwbGF5ZXJQb2ludHNbaS0xXS5wb2ludHMpIHtcbiAgICAgICAgXHRcdFx0XHRcdHBsYXllclBvaW50c1tpXS5wb3NpdGlvbiA9IHBsYXllclBvaW50c1tpLTFdLnBvc2l0aW9uO1xuICAgICAgICBcdFx0XHRcdH0gZWxzZSB7XG4gICAgICAgIFx0XHRcdFx0XHRwbGF5ZXJQb2ludHNbaV0ucG9zaXRpb24gPSAoaSsxKTtcbiAgICAgICAgXHRcdFx0XHR9XG5cbiAgICAgICAgXHRcdFx0fSBlbHNlIHtcblxuICAgICAgICBcdFx0XHRcdGlmIChpID09PSAwKSB7XG4gICAgICAgIFx0XHRcdFx0XHRwbGF5ZXJQb2ludHNbaV0ucG9zaXRpb24gPSAxO1xuICAgICAgICBcdFx0XHRcdH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWhhdmVCb3R0b21TY29yZXJzRmxvb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0IGNvdW50IG9mIHBsYXllcnMgaW4gb25lIHBvc2l0aW9uIGhpZ2hlci5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdldFNjb3JlQ291bnRPZiA9IHBsYXllclBvaW50c1tpLTFdLnBvaW50cztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHBsYXllclBvaW50cy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBsYXllclBvaW50c1tqXS5wb2ludHMgPT09IGdldFNjb3JlQ291bnRPZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsb29yUmFuZ2UgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhdmVCb3R0b21TY29yZXJzRmxvb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICBcdFx0XHRcdFx0cGxheWVyUG9pbnRzW2ldLnBvc2l0aW9uID0gKHBsYXllclBvaW50cy5sZW5ndGggKyAxKSAtIGZsb29yUmFuZ2U7XG4gICAgICAgIFx0XHRcdFx0fVxuXG4gICAgICAgIFx0XHRcdH1cblxuICAgICAgICBcdFx0fVxuXG4gICAgICAgIFx0XHRkZWZlcnJlZC5yZXNvbHZlKHBsYXllclBvaW50cyk7XG5cbiAgICAgICAgXHR9KTtcblxuXHRcdFx0cmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldFNpbmdsZUdhbWVMZWFkZXJib2FyZChpbnB1dEV2ZW50KSB7XG5cbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgIHZhciByZWYgPSBuZXcgRmlyZWJhc2UoRklSRUJBU0VEQVRBLkZCVVJMKTtcbiAgICAgICAgICAgIHZhciBsZWFkZXJib2FyZERhdGEgPSAkZmlyZWJhc2VBcnJheShcbiAgICAgICAgICAgICAgICByZWZcbiAgICAgICAgICAgICAgICAgICAgLmNoaWxkKCdjb250ZXN0cycpXG4gICAgICAgICAgICAgICAgICAgIC5jaGlsZChpbnB1dEV2ZW50KVxuICAgICAgICAgICAgICAgICAgICAuY2hpbGQoJ3Njb3JlcycpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGxlYWRlcmJvYXJkRGF0YSk7XG5cbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRTdW1tYXJpemVkTGVhZGVyYm9hcmRPYmplY3QoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1bW1hcml6ZWRMZWFkZXJib2FyZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldFRlYW1MaXN0T2JqZWN0KCkge1xuICAgICAgICAgICAgcmV0dXJuIF90ZWFtTGlzdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldFBsYXllclNjb3JlcyhpbnB1dEV2ZW50LCBpbnB1dEdhbWVzTGlzdCwgaW5wdXRQbGF5ZXIpIHtcblxuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgdmFyIGRpc3BsYXlTY29yZXMgPSBbXTtcblxuICAgICAgICAgICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGV2ZXJ5IGdhbWUuXG4gICAgICAgICAgICBpbnB1dEdhbWVzTGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGdhbWUpIHtcblxuICAgICAgICAgICAgICAgIGlmIChnYW1lLnNjb3Jlcykge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENvbnZlcnQgdGhlIGdhbWUncyBzY29yZXMgdG8gYW4gYXJyYXkuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzY29yZXNBcnJheSA9ICQubWFwKGdhbWUuc2NvcmVzLCBmdW5jdGlvbihlbCkgeyByZXR1cm4gZWw7IH0pO1xuICAgICAgICAgICAgICAgICAgICBzY29yZXNBcnJheSA9ICRmaWx0ZXIoJ29yZGVyQnknKShzY29yZXNBcnJheSwgJy1zY29yZScpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciB0b3RhbEF3YXJkID0gMTI7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSXRlcmF0ZSB0aHJvdWdoIHRoZSBzY29yZXMgc3RhcnRpbmcgZnJvbSB0aGUgdG9wIGFuZCBmaW5kIG91ciB1c2VyLlxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjb3Jlc0FycmF5Lmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvdW5kIG91ciBwbGF5ZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2NvcmVzQXJyYXlbaV0udXNlck5hbWUgPT09IGlucHV0UGxheWVyKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3U2NvcmVPYmplY3QgPSBnYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1Njb3JlT2JqZWN0LnBvc2l0aW9uID0gaSsxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1Njb3JlT2JqZWN0LnNjb3JlID0gc2NvcmVzQXJyYXlbaV0uc2NvcmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3U2NvcmVPYmplY3QucG9pbnRzRWFybmVkID0gdG90YWxBd2FyZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdTY29yZU9iamVjdC5pbnBVcmwgPSBzY29yZXNBcnJheVtpXS5pbnBVcmwgPyBzY29yZXNBcnJheVtpXS5pbnBVcmwgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1Njb3JlT2JqZWN0LnR3aXRjaFVybCA9IHNjb3Jlc0FycmF5W2ldLnR3aXRjaFVybCA/IHNjb3Jlc0FycmF5W2ldLnR3aXRjaFVybCA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3U2NvcmVPYmplY3QubWFtZVZlcnNpb24gPSBzY29yZXNBcnJheVtpXS5tYW1lVmVyc2lvbiA/IHNjb3Jlc0FycmF5W2ldLm1hbWVWZXJzaW9uIDogbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlTY29yZXMucHVzaChuZXdTY29yZU9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxBd2FyZCA9IDEyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b3RhbEF3YXJkID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbEF3YXJkIC09IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZGlzcGxheVNjb3Jlcyk7XG5cbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBsb2FkRXZlbnRQcm9wZXJ0aWVzKGlucHV0RXZlbnQpIHtcblxuICAgICAgICAgICAgdmFyIHJlZiA9IG5ldyBGaXJlYmFzZShGSVJFQkFTRURBVEEuRkJVUkwpO1xuICAgICAgICAgICAgdmFyIGlucHV0RXZlbnRQcm9wZXJ0aWVzID0gJGZpcmViYXNlT2JqZWN0KFxuICAgICAgICAgICAgICAgIHJlZlxuICAgICAgICAgICAgICAgICAgICAuY2hpbGQoJ2NvbnRlc3RzJylcbiAgICAgICAgICAgICAgICAgICAgLmNoaWxkKGlucHV0RXZlbnQpXG4gICAgICAgICAgICAgICAgICAgIC5jaGlsZCgncHJvcGVydGllcycpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpbnB1dEV2ZW50UHJvcGVydGllcy4kbG9hZGVkKCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfZXZlbnRQcm9wZXJ0aWVzID0gaW5wdXRFdmVudFByb3BlcnRpZXM7XG5cbiAgICAgICAgICAgICAgICAvLyBJZiB0aGlzIGlzIGEgbXVsdGlnYW1lIGV2ZW50LCBnZXQgdGhlIGRhdGEgbmVlZGVkIGZvciBtdWx0aWdhbWUgY29tcG9uZW50cy5cbiAgICAgICAgICAgICAgICBpZiAoX2V2ZW50UHJvcGVydGllcy5mb3JtYXQubXVsdGlHYW1lKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0R2FtZXNMaXN0KGlucHV0RXZlbnQpLnRoZW4oZnVuY3Rpb24gdGhlbihtb2RlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2dhbWVMaXN0ID0gbW9kZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRGaXJzdFBsYWNlU2NvcmVzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGdldE11bHRpR2FtZUxlYWRlcmJvYXJkKGlucHV0RXZlbnQpLnRoZW4oZnVuY3Rpb24gdGhlbihtb2RlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxlYWRlcmJvYXJkID0gbW9kZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICBfbGVhZGVyYm9hcmRMZW5ndGggPSBsZWFkZXJib2FyZC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VtbWFyaXplZExlYWRlcmJvYXJkID0gbGVhZGVyYm9hcmQuc2xpY2UoMCwgOCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBhIHNpbmdsZSBnYW1lIGV2ZW50LCBnZXQgdGhlIGRhdGEgbmVlZGVkIGZvciBzaW5nbGUgZ2FtZSBjb21wb25lbnRzLlxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0U2luZ2xlR2FtZUxlYWRlcmJvYXJkKGlucHV0RXZlbnQpLnRoZW4oZnVuY3Rpb24gdGhlbihtb2RlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxlYWRlcmJvYXJkID0gbW9kZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICBfbGVhZGVyYm9hcmRMZW5ndGggPSBsZWFkZXJib2FyZC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3VtbWFyaXplZExlYWRlcmJvYXJkID0gbGVhZGVyYm9hcmQ7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBhIHRlYW0tYmFzZWQgZXZlbnQsIGdldCB0aGUgZGF0YSBuZWVkZWQgZm9yIHRlYW0gZXZlbnQgY29tcG9uZW50cy5cbiAgICAgICAgICAgICAgICBpZiAoX2V2ZW50UHJvcGVydGllcy5mb3JtYXQudGVhbUJhc2VkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdGVhbVNlcnZpY2UuZ2V0VGVhbUxpc3QoaW5wdXRFdmVudCkudGhlbihmdW5jdGlvbiB0aGVuKG1vZGVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGVhbUxpc3QgPSBtb2RlbDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgIH1cbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgndmcuYXBwJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0V2ZW50TWFpbkNvbnRyb2xsZXInLCBFdmVudE1haW5Db250cm9sbGVyKTtcblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIEV2ZW50TWFpbkNvbnRyb2xsZXIoJHNjb3BlLCAkZmlsdGVyLCAkc3RhdGVQYXJhbXMsICRzdGF0ZSwgJHRpbWVvdXQsICRmaXJlYmFzZUFycmF5LCBldmVudFNlcnZpY2UsIGF1dGhTZXJ2aWNlLCBwcm9maWxlU2VydmljZSwgdGVhbVNlcnZpY2UsIEZJUkVCQVNFREFUQSkge1xuXG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICAgICAgdmFyIHZtID0gdGhpcztcblxuICAgICAgICB2bS5ldmVudE5hbWUgPSAkc3RhdGVQYXJhbXMuZXZlbnROYW1lO1xuXG4gICAgICAgIHZtLmNyZWF0ZVRlYW0gPSBjcmVhdGVUZWFtO1xuICAgICAgICB2bS5kZXRlcm1pbmVQb2ludHMgPSBkZXRlcm1pbmVQb2ludHM7XG4gICAgICAgIHZtLmdvVG9QbGF5ZXJQcm9maWxlID0gZ29Ub1BsYXllclByb2ZpbGU7XG4gICAgICAgIHZtLm9wZW5HYW1lTW9kYWwgPSBvcGVuR2FtZU1vZGFsO1xuICAgICAgICB2bS5vcGVuTW9kYWwgPSBvcGVuTW9kYWw7XG4gICAgICAgIHZtLm9wZW5NdWx0aUdhbWVMZWFkZXJib2FyZE1vZGFsID0gb3Blbk11bHRpR2FtZUxlYWRlcmJvYXJkTW9kYWw7XG4gICAgICAgIHZtLm9wZW5QbGF5ZXJNb2RhbCA9IG9wZW5QbGF5ZXJNb2RhbDtcblxuICAgICAgICBpbml0RXZlbnQoKTtcblxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICBmdW5jdGlvbiBjbG9zZU1vZGFsKCkge1xuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcubW9kYWwnKS5jbG9zZU1vZGFsKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVUZWFtKCkge1xuICAgICAgICAgICAgdGVhbVNlcnZpY2UuY3JlYXRlVGVhbSh2bS5ldmVudE5hbWUsIHZtLm5ld1RlYW0pLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgTWF0ZXJpYWxpemUudG9hc3QoJ1RlYW0gJyArIHZtLm5ld1RlYW0uc2hvcnROYW1lICsgJyBjcmVhdGVkLicsIDQwMDApO1xuICAgICAgICAgICAgICAgIHZtLm5ld1RlYW0gPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBkZXRlcm1pbmVQb2ludHMoaW5wdXRTY29yZURhdGEsIGlucHV0SW5kZXgpIHtcblxuICAgICAgICAgICAgdmFyIHVzZXJHYW1lUG9pbnRzO1xuXG4gICAgICAgICAgICAvLyBObyBwb3NpdGlvbiBncmVhdGVyIHRoYW4gMTIgZ2V0cyBwb2ludHMuXG4gICAgICAgICAgICBpZiAoaW5wdXRJbmRleCA+IDExKSB7XG4gICAgICAgICAgICAgICAgdXNlckdhbWVQb2ludHMgPSAwO1xuICAgICAgICAgICAgICAgIHJldHVybiB1c2VyR2FtZVBvaW50cztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdXNlckdhbWVQb2ludHMgPSAxMiAtIGlucHV0SW5kZXg7XG5cbiAgICAgICAgICAgIHZhciBzb3J0ZWRTY29yZXMgPSAkZmlsdGVyKCdvcmRlckJ5Jykodm0uZ2FtZVNjb3JlcywgJy1zY29yZScpO1xuXG4gICAgICAgICAgICAvLyBBbSBJIHRpZWQgd2l0aCB0aGUgcGVyc29uIGFib3ZlIG1lPyBJZiBzbywgbWF0Y2ggdGhlaXIgcG9pbnRzLlxuICAgICAgICAgICAgaWYgKHNvcnRlZFNjb3Jlc1tpbnB1dEluZGV4IC0gMV0pIHtcblxuICAgICAgICAgICAgICAgIGlmIChzb3J0ZWRTY29yZXNbaW5wdXRJbmRleCAtIDFdLnNjb3JlID09PSBpbnB1dFNjb3JlRGF0YS5zY29yZSkge1xuICAgICAgICAgICAgICAgICAgICB1c2VyR2FtZVBvaW50cyArPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHVzZXJHYW1lUG9pbnRzO1xuXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnb1RvUGxheWVyUHJvZmlsZShpbnB1dFBsYXllcikge1xuXG4gICAgICAgICAgICBjbG9zZU1vZGFsKCk7XG4gICAgICAgICAgICAkc3RhdGUuZ28oJ3Byb2ZpbGUnLCB7dXNlcm5hbWU6IGlucHV0UGxheWVyfSk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGluaXRFdmVudCgpIHtcblxuICAgICAgICAgICAgZXZlbnRTZXJ2aWNlLmxvYWRFdmVudFByb3BlcnRpZXModm0uZXZlbnROYW1lKTtcblxuICAgICAgICAgICAgcHJvZmlsZVNlcnZpY2UuZ2V0QXZhdGFyRGF0YSgpLnRoZW4oZnVuY3Rpb24gdGhlbihtb2RlbCkge1xuICAgICAgICAgICAgICAgIHZtLmF2YXRhckRhdGEgPSBtb2RlbDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkc2NvcGUuJHdhdGNoQ29sbGVjdGlvbihmdW5jdGlvbigpIHsgcmV0dXJuIGV2ZW50U2VydmljZS5nZXRFdmVudFByb3BlcnRpZXNPYmplY3QoKTsgfSwgZnVuY3Rpb24obW9kZWwpIHtcbiAgICAgICAgICAgICAgICB2bS5ldmVudFByb3BlcnRpZXMgPSBtb2RlbDtcbiAgICAgICAgICAgIH0sIHRydWUpO1xuXG4gICAgICAgICAgICAkc2NvcGUuJHdhdGNoQ29sbGVjdGlvbihmdW5jdGlvbigpIHsgcmV0dXJuIGV2ZW50U2VydmljZS5nZXRUZWFtTGlzdE9iamVjdCgpOyB9LCBmdW5jdGlvbihtb2RlbCkge1xuICAgICAgICAgICAgICAgIHZtLnRlYW1MaXN0ID0gbW9kZWw7XG4gICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1Zyh2bS50ZWFtTGlzdCk7XG4gICAgICAgICAgICB9LCB0cnVlKTtcblxuICAgICAgICAgICAgLy8gRklYTUU6IFRoZXJlIHNob3VsZCBiZSBhIGJldHRlciB3YXkgdG8gaW5pdGlhbGl6ZSBNYXRlcmlhbGl6ZS5jc3MgY29tcG9uZW50cy5cbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgndWwudGFicycpLnRhYnMoKTtcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ3NlbGVjdCcpLm1hdGVyaWFsX3NlbGVjdCgpO1xuICAgICAgICAgICAgfSwgNjAwKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb3Blbk1vZGFsKGlucHV0TW9kYWwpIHtcblxuICAgICAgICAgICAgLy8gVGhpcyB3aWxsIGV2YWx1YXRlIHRvIHRydWUgaWYgYSBNYXRlcmlhbGl6ZSBtb2RhbCBpcyBvcGVuLlxuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuZWxlbWVudCgnI2xlYW4tb3ZlcmxheScpLmxlbmd0aCA9PT0gMSkge1xuXG4gICAgICAgICAgICAgICAgY2xvc2VNb2RhbCgpO1xuICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoaW5wdXRNb2RhbCkub3Blbk1vZGFsKCk7XG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChpbnB1dE1vZGFsICsgJ0NvbnRlbnQnKS5zY3JvbGxUb3AoMCk7XG4gICAgICAgICAgICAgICAgfSwgNDUwKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChpbnB1dE1vZGFsKS5vcGVuTW9kYWwoKTtcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoaW5wdXRNb2RhbCArICdDb250ZW50Jykuc2Nyb2xsVG9wKDApO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9wZW5HYW1lTW9kYWwoaW5wdXRHYW1lTmFtZSkge1xuXG4gICAgICAgICAgICB2YXIgcmVmID0gbmV3IEZpcmViYXNlKEZJUkVCQVNFREFUQS5GQlVSTCk7XG5cbiAgICAgICAgICAgIGV2ZW50U2VydmljZS5nZXRHYW1lRGF0YSh2bS5ldmVudE5hbWUsIGlucHV0R2FtZU5hbWUpLnRoZW4oZnVuY3Rpb24gdGhlbihtb2RlbCkge1xuICAgICAgICAgICAgICAgIHZtLmdhbWVEYXRhID0gbW9kZWw7XG5cbiAgICAgICAgICAgICAgICB2bS5nYW1lU2NvcmVzID0gJGZpcmViYXNlQXJyYXkoXG4gICAgICAgICAgICAgICAgICAgIHJlZlxuICAgICAgICAgICAgICAgICAgICAgICAgLmNoaWxkKCdjb250ZXN0cycpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2hpbGQodm0uZXZlbnROYW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNoaWxkKCdhY3RpdmVHYW1lcycpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2hpbGQodm0uZ2FtZURhdGEuJGlkKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNoaWxkKCdzY29yZXMnKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgb3Blbk1vZGFsKCcjZ2FtZU1vZGFsJyk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9wZW5NdWx0aUdhbWVMZWFkZXJib2FyZE1vZGFsKCkge1xuXG4gICAgICAgICAgICBldmVudFNlcnZpY2UuZ2V0TXVsdGlHYW1lTGVhZGVyYm9hcmQodm0uZXZlbnROYW1lKS50aGVuKGZ1bmN0aW9uIHRoZW4obW9kZWwpIHtcbiAgICAgICAgICAgICAgICB2bS5jb21wbGV0ZUxlYWRlcmJvYXJkID0gbW9kZWw7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgb3Blbk1vZGFsKCcjbXVsdGlHYW1lTGVhZGVyYm9hcmRNb2RhbCcpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvcGVuUGxheWVyTW9kYWwoaW5wdXRQbGF5ZXIpIHtcblxuICAgICAgICAgICAgdm0uZm9jdXNQbGF5ZXIgPSBpbnB1dFBsYXllcjtcblxuICAgICAgICAgICAgZXZlbnRTZXJ2aWNlLmdldFBsYXllclNjb3Jlcyh2bS5ldmVudE5hbWUsIHZtLmdhbWVMaXN0LCB2bS5mb2N1c1BsYXllcikudGhlbihmdW5jdGlvbiB0aGVuKG1vZGVsKSB7XG4gICAgICAgICAgICAgICAgdm0ucGxheWVyU2NvcmVzID0gbW9kZWw7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgb3Blbk1vZGFsKCcjcGxheWVyTW9kYWwnKTtcblxuICAgICAgICB9XG5cbiAgICB9XG5cbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgndmcuYXBwJylcbiAgICAgICAgLnNlcnZpY2UoJ3RlYW1TZXJ2aWNlJywgdGVhbVNlcnZpY2UpO1xuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gdGVhbVNlcnZpY2UoJHEsICRmaXJlYmFzZUFycmF5LCAkZmlyZWJhc2VPYmplY3QsIEZJUkVCQVNFREFUQSkge1xuXG4gICAgXHR0aGlzLmNyZWF0ZVRlYW0gPSBjcmVhdGVUZWFtO1xuICAgICAgICB0aGlzLmdldFRlYW1MaXN0ID0gZ2V0VGVhbUxpc3Q7XG5cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVRlYW0oaW5wdXRFdmVudCwgaW5wdXROZXdUZWFtUHJvcGVydGllcykge1xuXG4gICAgICAgIFx0dmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICBcdHZhciByZWYgPSBuZXcgRmlyZWJhc2UoRklSRUJBU0VEQVRBLkZCVVJMKTtcbiAgICAgICAgXHR2YXIgdGVhbVBvb2wgPSAkZmlyZWJhc2VPYmplY3QoXG4gICAgICAgIFx0XHRyZWZcbiAgICAgICAgXHRcdFx0LmNoaWxkKCdjb250ZXN0cycpXG4gICAgICAgIFx0XHRcdC5jaGlsZChpbnB1dEV2ZW50KVxuICAgICAgICBcdFx0XHQuY2hpbGQoJ3RlYW1Qb29sJylcbiAgICAgICAgXHQpO1xuXG4gICAgICAgIFx0dGVhbVBvb2wuJGxvYWRlZCgpLnRoZW4oZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgXHRcdHRlYW1Qb29sW2lucHV0TmV3VGVhbVByb3BlcnRpZXMuc2hvcnROYW1lXSA9IHtcbiAgICAgICAgXHRcdFx0ZnVsbE5hbWU6IGlucHV0TmV3VGVhbVByb3BlcnRpZXMuZm9ybWFsTmFtZVxuICAgICAgICBcdFx0fTtcbiAgICAgICAgXHRcdHRlYW1Qb29sLiRzYXZlKCk7XG4gICAgICAgIFx0XHRkZWZlcnJlZC5yZXNvbHZlKCk7XG5cbiAgICAgICAgXHR9KTtcblxuICAgICAgICBcdHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRUZWFtTGlzdChpbnB1dEV2ZW50KSB7XG5cbiAgICAgICAgXHR2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgIFx0dmFyIHJlZiA9IG5ldyBGaXJlYmFzZShGSVJFQkFTRURBVEEuRkJVUkwpO1xuICAgICAgICBcdHZhciB0ZWFtTGlzdCA9ICRmaXJlYmFzZUFycmF5KFxuICAgICAgICBcdFx0cmVmXG4gICAgICAgIFx0XHRcdC5jaGlsZCgnY29udGVzdHMnKVxuICAgICAgICBcdFx0XHQuY2hpbGQoaW5wdXRFdmVudClcbiAgICAgICAgXHRcdFx0LmNoaWxkKCd0ZWFtUG9vbCcpXG4gICAgICAgIFx0KTtcblxuICAgICAgICBcdHRlYW1MaXN0LiRsb2FkZWQoKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICBcdFx0ZGVmZXJyZWQucmVzb2x2ZSh0ZWFtTGlzdCk7XG4gICAgICAgIFx0fSk7XG5cbiAgICAgICAgXHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcblxuICAgICAgICB9XG4gICAgfVxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCd2Zy5hcHAnKVxuICAgICAgICAuZGlyZWN0aXZlKCd2Z0dhbWVzTGlzdCcsIHZnR2FtZXNMaXN0KTtcblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHZnR2FtZXNMaXN0ICgpIHtcbiAgICAgICAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICAgICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sbGVyOiBHYW1lc0xpc3RDb250cm9sbGVyLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi9hcHAvZXZlbnRDb21wb25lbnRzL2dhbWVzTGlzdC5kaXJlY3RpdmUuaHRtJyxcbiAgICAgICAgICAgIHNjb3BlOiBmYWxzZSxcbiAgICAgICAgICAgIHRyYW5zY2x1ZGU6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBkaXJlY3RpdmU7XG4gICAgfVxuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gR2FtZXNMaXN0Q29udHJvbGxlcigkc2NvcGUsIGV2ZW50U2VydmljZSkge1xuICAgICAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gICAgXHR2YXIgdm0gPSB0aGlzO1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKGZ1bmN0aW9uKCkgeyByZXR1cm4gZXZlbnRTZXJ2aWNlLmdldEdhbWVMaXN0T2JqZWN0KCk7IH0sIGZ1bmN0aW9uKG1vZGVsKSB7XG4gICAgICAgICAgICAkc2NvcGUuJHBhcmVudC4kcGFyZW50LmV2ZW50LmdhbWVMaXN0ID0gbW9kZWw7XG4gICAgICAgIH0sIHRydWUpO1xuICAgIH1cbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgndmcuYXBwJylcbiAgICAgICAgLmRpcmVjdGl2ZSgndmdNdWx0aUdhbWVMZWFkZXJib2FyZCcsIHZnTXVsdGlHYW1lTGVhZGVyYm9hcmQpO1xuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gdmdNdWx0aUdhbWVMZWFkZXJib2FyZCAoKSB7XG4gICAgICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbGxlcjogTXVsdGlHYW1lTGVhZGVyYm9hcmRDb250cm9sbGVyLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnLi9hcHAvZXZlbnRDb21wb25lbnRzL211bHRpR2FtZUxlYWRlcmJvYXJkLmRpcmVjdGl2ZS5odG0nLFxuICAgICAgICAgICAgc2NvcGU6IGZhbHNlLFxuICAgICAgICAgICAgdHJhbnNjbHVkZTogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgICB9XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBNdWx0aUdhbWVMZWFkZXJib2FyZENvbnRyb2xsZXIoJHNjb3BlLCBldmVudFNlcnZpY2UpIHtcbiAgICAgICAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuICAgIFx0dmFyIHZtID0gdGhpcztcblxuICAgICAgICAkc2NvcGUuJHdhdGNoQ29sbGVjdGlvbihmdW5jdGlvbigpIHsgcmV0dXJuIGV2ZW50U2VydmljZS5nZXRMZWFkZXJib2FyZExlbmd0aFZhbHVlKCk7IH0sIGZ1bmN0aW9uKG1vZGVsKSB7XG4gICAgICAgICAgICAkc2NvcGUuJHBhcmVudC4kcGFyZW50LmV2ZW50LmxlYWRlcmJvYXJkTGVuZ3RoID0gbW9kZWw7XG4gICAgICAgIH0sIHRydWUpO1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKGZ1bmN0aW9uKCkgeyByZXR1cm4gZXZlbnRTZXJ2aWNlLmdldFN1bW1hcml6ZWRMZWFkZXJib2FyZE9iamVjdCgpOyB9LCBmdW5jdGlvbihtb2RlbCkge1xuICAgICAgICAgICAgJHNjb3BlLiRwYXJlbnQuJHBhcmVudC5ldmVudC5zdW1tYXJpemVkTGVhZGVyYm9hcmQgPSBtb2RlbDtcbiAgICAgICAgfSwgdHJ1ZSk7XG4gICAgfVxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCd2Zy5hcHAnKVxuICAgICAgICAuZGlyZWN0aXZlKCd2Z1J1bGVzRGlzcGxheScsIHZnUnVsZXNEaXNwbGF5KTtcblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHZnUnVsZXNEaXNwbGF5KCkge1xuICAgICAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFJ1bGVzRGlzcGxheUNvbnRyb2xsZXIsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuL2FwcC9ldmVudENvbXBvbmVudHMvcnVsZXNEaXNwbGF5LmRpcmVjdGl2ZS5odG0nLFxuICAgICAgICAgICAgc2NvcGU6IGZhbHNlLFxuICAgICAgICAgICAgdHJhbnNjbHVkZTogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgICB9XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBSdWxlc0Rpc3BsYXlDb250cm9sbGVyKCR0aW1lb3V0KSB7XG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICBcdHZhciB2bSA9IHRoaXM7XG5cbiAgICAgICAgLy8gRklYTUU6IFRoaXMgaXMgYSB0ZW1wb3JhcnkgaGFjay4gSW5pdGlhbGl6ZSB0aGUgTWF0ZXJpYWxpemUuY3NzIGRyb3Bkb3ducyBhZnRlciB0aGUgY29tcG9uZW50IGlzIGxvYWRlZC5cbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5jb2xsYXBzaWJsZScpLmNvbGxhcHNpYmxlKHtcbiAgICAgICAgICAgICAgICBhY2NvcmRpb246IGZhbHNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgNjAwKTtcbiAgICB9XG59KSgpOyIsIihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ3ZnLmFwcCcpXG4gICAgICAgIC5kaXJlY3RpdmUoJ3ZnU2luZ2xlR2FtZUxlYWRlcmJvYXJkJywgdmdTaW5nbGVHYW1lTGVhZGVyYm9hcmQpO1xuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gdmdTaW5nbGVHYW1lTGVhZGVyYm9hcmQgKCkge1xuICAgICAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFNpbmdsZUdhbWVMZWFkZXJib2FyZENvbnRyb2xsZXIsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuL2FwcC9ldmVudENvbXBvbmVudHMvc2luZ2xlR2FtZUxlYWRlcmJvYXJkLmRpcmVjdGl2ZS5odG0nLFxuICAgICAgICAgICAgc2NvcGU6IGZhbHNlLFxuICAgICAgICAgICAgdHJhbnNjbHVkZTogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgICB9XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBTaW5nbGVHYW1lTGVhZGVyYm9hcmRDb250cm9sbGVyKCRzY29wZSwgZXZlbnRTZXJ2aWNlKSB7XG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICBcdHZhciB2bSA9IHRoaXM7XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oZnVuY3Rpb24oKSB7IHJldHVybiBldmVudFNlcnZpY2UuZ2V0TGVhZGVyYm9hcmRMZW5ndGhWYWx1ZSgpOyB9LCBmdW5jdGlvbihtb2RlbCkge1xuICAgICAgICAgICAgJHNjb3BlLiRwYXJlbnQuJHBhcmVudC5ldmVudC5sZWFkZXJib2FyZExlbmd0aCA9IG1vZGVsO1xuICAgICAgICB9LCB0cnVlKTtcblxuICAgICAgICAkc2NvcGUuJHdhdGNoQ29sbGVjdGlvbihmdW5jdGlvbigpIHsgcmV0dXJuIGV2ZW50U2VydmljZS5nZXRTdW1tYXJpemVkTGVhZGVyYm9hcmRPYmplY3QoKTsgfSwgZnVuY3Rpb24obW9kZWwpIHtcbiAgICAgICAgICAgICRzY29wZS4kcGFyZW50LiRwYXJlbnQuZXZlbnQuc3VtbWFyaXplZExlYWRlcmJvYXJkID0gbW9kZWw7XG4gICAgICAgIH0sIHRydWUpO1xuICAgIH1cbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgndmcuYXBwJylcbiAgICAgICAgLmRpcmVjdGl2ZSgndmdTdGlja3lNZXNzYWdlJywgdmdTdGlja3lNZXNzYWdlKTtcblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHZnU3RpY2t5TWVzc2FnZSAoKSB7XG4gICAgICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbGxlcjogU3RpY2t5TWVzc2FnZUNvbnRyb2xsZXIsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuL2FwcC9ldmVudENvbXBvbmVudHMvc3RpY2t5TWVzc2FnZS5kaXJlY3RpdmUuaHRtJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICBcdHByb3BlcnRpZXM6ICc9J1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gZGlyZWN0aXZlO1xuICAgIH1cblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIFN0aWNreU1lc3NhZ2VDb250cm9sbGVyKCR0aW1lb3V0KSB7XG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICBcdHZhciB2bSA9IHRoaXM7XG4gICAgfVxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCd2Zy5hcHAnKVxuICAgICAgICAuY29udHJvbGxlcignSGVhZGVyQ29udHJvbGxlcicsIEhlYWRlckNvbnRyb2xsZXIpO1xuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gSGVhZGVyQ29udHJvbGxlcigkdGltZW91dCwgJHJvb3RTY29wZSwgJHdpbmRvdywgJHN0YXRlLCBhdXRoU2VydmljZSkge1xuXG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICAgICAgdmFyIHZtID0gdGhpcztcbiAgICAgICAgdm0ubG9nT3V0ID0gbG9nT3V0O1xuXG4gICAgICAgIGFjdGl2YXRlKCk7XG5cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgICAgICAgIC8vIEZJWE1FOiBNYXRlcmlhbGl6ZSBhbmQgQW5ndWxhckpTIGRvIG5vdCBwbGF5IG5pY2VseSB0b2dldGhlci4gSWYgdGhlIGRyb3Bkb3duIGlzXG4gICAgICAgICAgICAvLyAgICAgICAgaW5pdGlhbGl6ZWQgYmVmb3JlIGFsbCBjb250ZW50IGhhcyBiZWVuIHJlbmRlcmVkLCB0aGUgZHJvcGRvd24gd2lsbCBub3QgYWN0dWFsbHkgd29yay5cbiAgICAgICAgICAgIC8vICAgICAgICBUaGlzIGlzIGEgbWVzc3kgaGFjayBmb3IgdGhlIHRpbWUgYmVpbmcsIGJ1dCByZXZpc2l0IHRoaXMgbGF0ZXIuXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJy5kcm9wZG93bi1idXR0b24nKVxuICAgICAgICAgICAgICAgICAgICAuZHJvcGRvd24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5EdXJhdGlvbjogMzAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0RHVyYXRpb246IDIyNSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0cmFpbl93aWR0aDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBob3ZlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBndXR0ZXI6IC0xMTQsXG4gICAgICAgICAgICAgICAgICAgICAgICBiZWxvd09yaWdpbjogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIDQwMCk7XG5cbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnLmRyb3Bkb3duLWJ1dHRvbicpXG4gICAgICAgICAgICAgICAgICAgIC5kcm9wZG93bih7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbkR1cmF0aW9uOiAzMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXREdXJhdGlvbjogMjI1LFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RyYWluX3dpZHRoOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvdmVyOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGd1dHRlcjogLTExNCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlbG93T3JpZ2luOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgMTAwMCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBsb2dPdXQoKSB7XG4gICAgICAgICAgICBhdXRoU2VydmljZS5sb2dPdXQoKTtcbiAgICAgICAgICAgICR3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgIH1cblxuICAgIH1cbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgndmcuYXBwJylcbiAgICAgICAgLmZpbHRlcignb3JkZXJPYmplY3RCeScsIG9yZGVyT2JqZWN0QnkpO1xuXG4gICAgZnVuY3Rpb24gb3JkZXJPYmplY3RCeSgpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGl0ZW1zLCBmaWVsZCwgcmV2ZXJzZSkge1xuICAgICAgICAgICAgdmFyIGZpbHRlcmVkID0gW107XG5cbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChpdGVtcywgZnVuY3Rpb24oaXRlbSwga2V5KSB7XG4gICAgICAgICAgICAgICAgaXRlbS5rZXkgPSBrZXk7XG4gICAgICAgICAgICAgICAgZmlsdGVyZWQucHVzaChpdGVtKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmaWx0ZXJlZC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChhW2ZpZWxkXSA+IGJbZmllbGRdID8gMSA6IC0xKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZihyZXZlcnNlKSBmaWx0ZXJlZC5yZXZlcnNlKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBmaWx0ZXJlZDtcbiAgICAgICAgfTtcbiAgICB9XG5cbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgndmcuYXBwJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0F2YXRhckNvbnRyb2xsZXInLCBBdmF0YXJDb250cm9sbGVyKTtcblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIEF2YXRhckNvbnRyb2xsZXIoJHJvb3RTY29wZSwgJHN0YXRlLCAkc3RhdGVQYXJhbXMsICR0aW1lb3V0LCBVcGxvYWQsIGltZ3VyLCBwcm9maWxlU2VydmljZSkge1xuXG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICAgICAgdmFyIHZtID0gdGhpcztcbiAgICAgICAgdm0udXBsb2FkQXZhdGFyID0gdXBsb2FkQXZhdGFyO1xuXG4gICAgICAgIGFjdGl2YXRlKCk7XG5cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgICBcdHByb2ZpbGVTZXJ2aWNlLmdldEF2YXRhckRhdGEoKS50aGVuKGZ1bmN0aW9uIHRoZW4obW9kZWwpIHtcbiAgICAgICAgICAgICAgICB2bS5hdmF0YXJEYXRhID0gbW9kZWw7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gRklYTUU6IFRoaXMgbmVlZHMgdG8gYmUgdHJpZ2dlcmVkIGJ5IGEgJHJvb3RTY29wZSBicm9hZGNhc3Qgb2Ygd2hlbiBpdCByZWNlaXZlcyBwcm9maWxlIGRhdGEuXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwcm9maWxlU2VydmljZS5nZXRCYWRnZXNEYXRhKCRyb290U2NvcGUucHJvZmlsZS51c2VyTmFtZSkudGhlbihmdW5jdGlvbiB0aGVuKG1vZGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZtLmJhZGdlc0RhdGEgPSBtb2RlbDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1cGxvYWRBdmF0YXIoKSB7XG5cbiAgICAgICAgXHR2bS5kaXNhYmxlQnV0dG9uID0gdHJ1ZTtcblxuICAgICAgICBcdGltZ3VyLnNldEFQSUtleSgnQ2xpZW50LUlEIGY1M2Q2ZDU4MzNiMDdiYycpO1xuICAgICAgICBcdGltZ3VyLnVwbG9hZCh2bS5maWxlKS50aGVuKGZ1bmN0aW9uIHRoZW4obW9kZWwpIHtcbiAgICAgICAgXHRcdHByb2ZpbGVTZXJ2aWNlLnNhdmVBdmF0YXJMaW5rKG1vZGVsWzBdLmxpbmssICRyb290U2NvcGUucHJvZmlsZS51c2VyTmFtZSk7XG4gICAgICAgIFx0XHRNYXRlcmlhbGl6ZS50b2FzdCgnWW91ciBhdmF0YXIgd2FzIHVwbG9hZGVkJywgNDAwMCk7XG5cbiAgICAgICAgXHRcdCR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBcdFx0XHQkc3RhdGUuZ28oJ2hvbWUnKTtcbiAgICAgICAgXHRcdH0sIDEwMDApO1xuICAgICAgICBcdH0pO1xuXG4gICAgICAgIH1cblxuICAgIH1cbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgndmcuYXBwJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0NoYW5nZVBhc3N3b3JkQ29udHJvbGxlcicsIENoYW5nZVBhc3N3b3JkQ29udHJvbGxlcik7XG5cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBDaGFuZ2VQYXNzd29yZENvbnRyb2xsZXIoJHNjb3BlLCAkdGltZW91dCwgJHN0YXRlLCBBdXRoV3JhcHBlcikge1xuXG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICAgICAgdmFyIHZtID0gdGhpcztcbiAgICAgICAgXG4gICAgICAgIHZtLnN1Ym1pdENoYW5nZVBhc3N3b3JkID0gc3VibWl0Q2hhbmdlUGFzc3dvcmQ7XG5cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgZnVuY3Rpb24gc3VibWl0Q2hhbmdlUGFzc3dvcmQoKSB7XG5cbiAgICAgICAgICAgIGlmICgkc2NvcGUucHdDaGFuZ2VGb3JtLiR2YWxpZCkge1xuXG4gICAgICAgICAgICAgICAgQXV0aFdyYXBwZXIuJGNoYW5nZVBhc3N3b3JkKHtcbiAgICAgICAgICAgICAgICAgICAgZW1haWw6IEF1dGhXcmFwcGVyLiRnZXRBdXRoKCkucGFzc3dvcmQuZW1haWwsXG4gICAgICAgICAgICAgICAgICAgIG9sZFBhc3N3b3JkOiB2bS5pbnB1dEN1cnJlbnRQYXNzd29yZCxcbiAgICAgICAgICAgICAgICAgICAgbmV3UGFzc3dvcmQ6IHZtLmlucHV0TmV3UGFzc3dvcmRcbiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIE1hdGVyaWFsaXplLnRvYXN0KCdZb3VyIHBhc3N3b3JkIHdhcyBjaGFuZ2VkLicsIDQwMDApO1xuICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnaG9tZScpO1xuICAgICAgICAgICAgICAgICAgICB9LCAxMDAwKTtcblxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gJ0lOVkFMSURfUEFTU1dPUkQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5zaG93Q2hhbmdlUGFzc3dvcmRNZXNzYWdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9XG5cbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgndmcuYXBwJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0hvbWVDb250cm9sbGVyJywgSG9tZUNvbnRyb2xsZXIpO1xuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gSG9tZUNvbnRyb2xsZXIoJHNjb3BlLCAkdGltZW91dCkge1xuXG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICAgICAgdmFyIHZtID0gdGhpcztcblxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIH1cblxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCd2Zy5hcHAnKVxuICAgICAgICAuY29udHJvbGxlcignTGVhZGVyYm9hcmRDb250cm9sbGVyJywgTGVhZGVyYm9hcmRDb250cm9sbGVyKTtcblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIExlYWRlcmJvYXJkQ29udHJvbGxlcigkcSwgJHRpbWVvdXQsICRmaXJlYmFzZUFycmF5LCBwcm9maWxlU2VydmljZSwgRklSRUJBU0VEQVRBKSB7XG5cbiAgICAgICAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuICAgIFx0dmFyIHZtID0gdGhpcztcblxuICAgICAgICBhY3RpdmF0ZSgpO1xuXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgICAgICAgIGdldFByb2ZpbGVTY29yZXMoKS50aGVuKGZ1bmN0aW9uIHRoZW4obW9kZWwpIHtcbiAgICAgICAgICAgICAgICB2bS5wcm9maWxlU2NvcmVEYXRhID0gbW9kZWw7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcHJvZmlsZVNlcnZpY2UuZ2V0QXZhdGFyRGF0YSgpLnRoZW4oZnVuY3Rpb24gdGhlbihtb2RlbCkge1xuICAgICAgICAgICAgICAgIHZtLmF2YXRhckRhdGEgPSBtb2RlbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0UHJvZmlsZVNjb3JlcygpIHtcblxuICAgICAgICBcdHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgIFx0dmFyIHJlZiA9IG5ldyBGaXJlYmFzZShGSVJFQkFTRURBVEEuRkJVUkwpO1xuXG4gICAgICAgIFx0dmFyIHByb2ZpbGVTY29yZURhdGEgPSAkZmlyZWJhc2VBcnJheShcbiAgICAgICAgXHRcdHJlZlxuICAgICAgICBcdFx0XHQuY2hpbGQoJ2JhZGdlcycpXG4gICAgICAgIFx0KTtcblxuICAgICAgICBcdHByb2ZpbGVTY29yZURhdGEuJGxvYWRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgXHRcdGRlZmVycmVkLnJlc29sdmUocHJvZmlsZVNjb3JlRGF0YSk7XG4gICAgICAgIFx0fSk7XG5cbiAgICAgICAgXHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcblxuICAgICAgICB9XG5cbiAgICB9XG59KSgpOyIsIihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ3ZnLmFwcCcpXG4gICAgICAgIC5jb250cm9sbGVyKCdQcm9maWxlQ29udHJvbGxlcicsIFByb2ZpbGVDb250cm9sbGVyKTtcblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIFByb2ZpbGVDb250cm9sbGVyKCRzY29wZSwgJHN0YXRlUGFyYW1zLCAkcSwgJHRpbWVvdXQsICRzdGF0ZSwgJGZpcmViYXNlQXJyYXksIGF1dGhTZXJ2aWNlLCBwcm9maWxlU2VydmljZSwgZXZlbnRTZXJ2aWNlKSB7XG5cbiAgICAgICAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuICAgICAgICBcbiAgICAgICAgYWN0aXZhdGUoKTtcblxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcblxuICAgICAgICAgICAgcHJvZmlsZVNlcnZpY2UuZ2V0VXNlckRhdGEoJHN0YXRlUGFyYW1zLnVzZXJuYW1lKS50aGVuKGZ1bmN0aW9uIHRoZW4obW9kZWwpIHtcbiAgICAgICAgICAgICAgICB2bS5wcm9maWxlRGF0YSA9IG1vZGVsO1xuXG4gICAgICAgICAgICAgICAgcHJvZmlsZVNlcnZpY2UuZ2V0VG91cm5hbWVudEhpc3Rvcnkodm0ucHJvZmlsZURhdGEpLnRoZW4oZnVuY3Rpb24gdGhlbihtb2RlbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG91cm5hbWVudEhpc3RvcnlEYXRhID0gbW9kZWw7XG4gICAgICAgICAgICAgICAgICAgIHZtLmV2ZW50U3RhbmRpbmdzID0gcHJvZmlsZVNlcnZpY2UuZ2V0VG91cm5hbWVudFN0YW5kaW5ncyh0b3VybmFtZW50SGlzdG9yeURhdGEsICRzdGF0ZVBhcmFtcy51c2VybmFtZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcHJvZmlsZVNlcnZpY2UuZ2V0QXZhdGFyRGF0YSgpLnRoZW4oZnVuY3Rpb24gdGhlbihtb2RlbCkge1xuICAgICAgICAgICAgICAgIHZtLmF2YXRhckRhdGEgPSBtb2RlbDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBwcm9maWxlU2VydmljZS5nZXRCYWRnZXNEYXRhKCRzdGF0ZVBhcmFtcy51c2VybmFtZSkudGhlbihmdW5jdGlvbiB0aGVuKG1vZGVsKSB7XG4gICAgICAgICAgICAgICAgdm0uYmFkZ2VzRGF0YSA9IG1vZGVsO1xuXG4gICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcuY29sbGFwc2libGUnKS5jb2xsYXBzaWJsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY2NvcmRpb246IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB9LCAyMDApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG59KSgpOyIsIihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ3ZnLmFwcCcpXG4gICAgICAgIC5zZXJ2aWNlKCdwcm9maWxlU2VydmljZScsIHByb2ZpbGVTZXJ2aWNlKTtcblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHByb2ZpbGVTZXJ2aWNlKCRyb290U2NvcGUsICRxLCAkZmlyZWJhc2VBcnJheSwgJGZpcmViYXNlT2JqZWN0LCBldmVudFNlcnZpY2UsIEZJUkVCQVNFREFUQSkge1xuXG4gICAgXHR0aGlzLmdldEF2YXRhckRhdGEgPSBnZXRBdmF0YXJEYXRhO1xuICAgICAgICB0aGlzLmdldEJhZGdlc0RhdGEgPSBnZXRCYWRnZXNEYXRhO1xuICAgIFx0dGhpcy5nZXRUb3VybmFtZW50SGlzdG9yeSA9IGdldFRvdXJuYW1lbnRIaXN0b3J5O1xuICAgICAgICB0aGlzLmdldFRvdXJuYW1lbnRTdGFuZGluZ3MgPSBnZXRUb3VybmFtZW50U3RhbmRpbmdzO1xuICAgICAgICB0aGlzLmdldFVzZXJEYXRhID0gZ2V0VXNlckRhdGE7XG4gICAgICAgIHRoaXMuc2F2ZUF2YXRhckxpbmsgPSBzYXZlQXZhdGFyTGluaztcblxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0QXZhdGFyRGF0YSgpIHtcblxuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgIHZhciByZWYgPSBuZXcgRmlyZWJhc2UoRklSRUJBU0VEQVRBLkZCVVJMKTtcblxuICAgICAgICAgICAgdmFyIGF2YXRhckRhdGEgPSAkZmlyZWJhc2VPYmplY3QoXG4gICAgICAgICAgICAgICAgcmVmXG4gICAgICAgICAgICAgICAgICAgIC5jaGlsZCgnYXZhdGFycycpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBhdmF0YXJEYXRhLiRsb2FkZWQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShhdmF0YXJEYXRhKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcblxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0QmFkZ2VzRGF0YShpbnB1dFVzZXIpIHtcblxuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgIHZhciByZWYgPSBuZXcgRmlyZWJhc2UoRklSRUJBU0VEQVRBLkZCVVJMKTtcblxuICAgICAgICAgICAgdmFyIGJhZGdlc0RhdGEgPSAkZmlyZWJhc2VPYmplY3QoXG4gICAgICAgICAgICAgICAgcmVmXG4gICAgICAgICAgICAgICAgICAgIC5jaGlsZCgnYmFkZ2VzJylcbiAgICAgICAgICAgICAgICAgICAgLmNoaWxkKGlucHV0VXNlcilcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGJhZGdlc0RhdGEuJGxvYWRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGJhZGdlc0RhdGEpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRUb3VybmFtZW50SGlzdG9yeShpbnB1dFVzZXJEYXRhKSB7XG5cbiAgICAgICAgXHR2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICBcdHZhciByZWYgPSBuZXcgRmlyZWJhc2UoRklSRUJBU0VEQVRBLkZCVVJMKTtcblxuICAgICAgICBcdC8vIExvb3AgdGhyb3VnaCBlYWNoIGV2ZW50IGluIHRoZSBwbGVkZ2VkVG8gb2JqZWN0LlxuICAgICAgICBcdHZhciBldmVudHNBcnJheSA9IFtdO1xuICAgICAgICBcdGZvciAodmFyIGtleSBpbiBpbnB1dFVzZXJEYXRhLnBsZWRnZWRUbykge1xuICAgICAgICBcdFx0ZXZlbnRzQXJyYXkucHVzaChrZXkpO1xuICAgICAgICBcdH1cblxuICAgICAgICBcdGRlZmVycmVkLnJlc29sdmUoZXZlbnRzQXJyYXkpO1xuXG4gICAgICAgIFx0cmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldFRvdXJuYW1lbnRTdGFuZGluZ3MoaW5wdXRUb3VybmFtZW50SGlzdG9yeSwgaW5wdXRVc2VyKSB7XG5cbiAgICAgICAgICAgIHZhciByZWYgPSBuZXcgRmlyZWJhc2UoRklSRUJBU0VEQVRBLkZCVVJMKTtcblxuICAgICAgICAgICAgLy8gTG9vcCB0aHJvdWdoIGVhY2ggZXZlbnQgaW4gdGhlIHVzZXIncyBoaXN0b3J5LlxuICAgICAgICAgICAgdmFyIGV2ZW50U3RhbmRpbmdzID0gW107XG4gICAgICAgICAgICBpbnB1dFRvdXJuYW1lbnRIaXN0b3J5LmZvckVhY2goZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICAgICAgICAgIGV2ZW50U2VydmljZS5nZXRFdmVudFByb3BlcnRpZXMoZXZlbnQpLnRoZW4oZnVuY3Rpb24oZXZlbnRQcm9wZXJ0aWVzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgZXZlbnRQcm9wZXJ0aWVzLiRsb2FkZWQoKS50aGVuKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBjb25jbHVkZWQsIGdldCB0aGUgdXNlcidzIHN0YW5kaW5nLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50UHJvcGVydGllcy5zdGF0ZSA9PT0gJ2NvbmNsdWRlZCcpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldmVudFN0YW5kaW5nRGF0YSA9ICRmaXJlYmFzZU9iamVjdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2hpbGQoJ3N0YW5kaW5ncycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2hpbGQoZXZlbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U3RhbmRpbmdEYXRhLiRsb2FkZWQoKS50aGVuKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudFN0YW5kaW5nRGF0YVtpbnB1dFVzZXJdKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U3RhbmRpbmdzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGV2ZW50UHJvcGVydGllcy5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZW1pZXI6IGV2ZW50UHJvcGVydGllcy5wcmVtaWVyID8gdHJ1ZSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvcnROYW1lOiBldmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZTogJ2NvbmNsdWRlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGV2ZW50UHJvcGVydGllcy5jb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogZXZlbnRTdGFuZGluZ0RhdGFbaW5wdXRVc2VyXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTdGFuZGluZ3MucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogZXZlbnRQcm9wZXJ0aWVzLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlbWllcjogZXZlbnRQcm9wZXJ0aWVzLnByZW1pZXIgPyB0cnVlIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG9ydE5hbWU6IGV2ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiAnY29uY2x1ZGVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogZXZlbnRQcm9wZXJ0aWVzLmNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAtMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnRQcm9wZXJ0aWVzLnN0YXRlID09PSAnaW5wcm9ncmVzcycgfHwgZXZlbnRQcm9wZXJ0aWVzLnN0YXRlID09PSAndXBjb21pbmcnKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFN0YW5kaW5ncy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogZXZlbnRQcm9wZXJ0aWVzLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZW1pZXI6IGV2ZW50UHJvcGVydGllcy5wcmVtaWVyID8gdHJ1ZSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3J0TmFtZTogZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBldmVudFByb3BlcnRpZXMuY29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiBldmVudFByb3BlcnRpZXMuc3RhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gZXZlbnRTdGFuZGluZ3M7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldFVzZXJEYXRhKGlucHV0VXNlcikge1xuXG4gICAgICAgIFx0dmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgXHR2YXIgcmVmID0gbmV3IEZpcmViYXNlKEZJUkVCQVNFREFUQS5GQlVSTCk7XG5cbiAgICAgICAgXHR2YXIgdXNlcnNEYXRhID0gJGZpcmViYXNlQXJyYXkoXG4gICAgICAgIFx0XHRyZWZcbiAgICAgICAgXHRcdFx0LmNoaWxkKCd1c2VycycpXG4gICAgICAgIFx0KTtcblxuICAgICAgICBcdHVzZXJzRGF0YS4kbG9hZGVkKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIFx0XHR1c2Vyc0RhdGEuZm9yRWFjaChmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgIFx0XHRcdGlmICh1c2VyLnVzZXJOYW1lID09PSBpbnB1dFVzZXIpIHtcbiAgICAgICAgXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlKHVzZXIpO1xuICAgICAgICBcdFx0XHR9XG4gICAgICAgIFx0XHR9KTtcblxuICAgICAgICBcdH0pO1xuXG4gICAgICAgIFx0cmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZJWE1FOiBNYWtlIHRoaXMgc2VydmVyLXNpZGUuXG4gICAgICAgIGZ1bmN0aW9uIHNhdmVBdmF0YXJMaW5rKGlucHV0TGluaywgaW5wdXRVc2VyKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciByZWYgPSBuZXcgRmlyZWJhc2UoRklSRUJBU0VEQVRBLkZCVVJMKTtcblxuICAgICAgICAgICAgdmFyIGF2YXRhckRhdGEgPSAkZmlyZWJhc2VPYmplY3QoXG4gICAgICAgICAgICAgICAgcmVmXG4gICAgICAgICAgICAgICAgICAgIC5jaGlsZCgnYXZhdGFycycpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBhdmF0YXJEYXRhLiRsb2FkZWQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgYXZhdGFyRGF0YVtpbnB1dFVzZXJdID0gaW5wdXRMaW5rO1xuICAgICAgICAgICAgICAgIGF2YXRhckRhdGEuJHNhdmUoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgIH1cbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgndmcuYXBwJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ1JlZ0NvbnRyb2xsZXInLCBSZWdDb250cm9sbGVyKTtcblxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIFJlZ0NvbnRyb2xsZXIoJHNjb3BlLCAkcm9vdFNjb3BlLCAkdGltZW91dCwgJHdpbmRvdywgJHN0YXRlLCAkZmlyZWJhc2VPYmplY3QsIGF1dGhTZXJ2aWNlLCBBdXRoV3JhcHBlcikge1xuXG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICAgICAgdmFyIHZtID0gdGhpcztcblxuICAgICAgICB2bS5sb2dpblRvQWNjb3VudCA9IGxvZ2luVG9BY2NvdW50O1xuICAgICAgICB2bS5wYXNzd29yZFJlc2V0ID0gcGFzc3dvcmRSZXNldDtcbiAgICAgICAgdm0uc3VibWl0TmV3QWNjb3VudCA9IHN1Ym1pdE5ld0FjY291bnQ7XG5cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgZnVuY3Rpb24gbG9naW5Ub0FjY291bnQoKSB7XG5cbiAgICAgICAgICAgIGF1dGhTZXJ2aWNlLmxvZ2luVG9BY2NvdW50KHZtLmxvZ2luRW1haWwsIHZtLmxvZ2luUGFzc3dvcmQpLnRoZW4oZnVuY3Rpb24gdGhlbihtb2RlbCkge1xuXG4gICAgICAgICAgICAgICAgdm0uc2hvd0ludmFsaWRVc2VyRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2bS5zaG93SW52YWxpZFBhc3N3b3JkRXJyb3IgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIGlmIChtb2RlbCA9PT0gJ0xPR0lOX1NVQ0NFU1MnKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdob21lJyk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1vZGVsID09PSAnSU5WQUxJRF9VU0VSJykge1xuICAgICAgICAgICAgICAgICAgICB2bS5zaG93SW52YWxpZFVzZXJFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1vZGVsID09PSAnSU5WQUxJRF9QQVNTV09SRCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdm0uc2hvd0ludmFsaWRQYXNzd29yZEVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBwYXNzd29yZFJlc2V0KCkge1xuXG4gICAgICAgICAgICBpZiAoIXZtLmxvZ2luRW1haWwpIHtcbiAgICAgICAgICAgICAgICB2bS5zaG93UGFzc3dvcmRSZXNldEVtYWlsTWVzc2FnZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBBdXRoV3JhcHBlci4kcmVzZXRQYXNzd29yZCh7XG4gICAgICAgICAgICAgICAgZW1haWw6IHZtLmxvZ2luRW1haWxcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdm0uc2hvd1Bhc3N3b3JkUmVzZXRFbWFpbE1lc3NhZ2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBNYXRlcmlhbGl6ZS50b2FzdCgnQSBwYXNzd29yZCByZXNldCBlbWFpbCBoYXMgYmVlbiBzZW50IHRvICcgKyB2bS5sb2dpbkVtYWlsICsgJy4nLCA0MDAwKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzdWJtaXROZXdBY2NvdW50KCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBEb2VzIHRoZSB1c2VyIGV4aXN0PyBJZiBzbywgc2hvdyBhbiBlcnJvciBtZXNzYWdlLlxuICAgICAgICAgICAgYXV0aFNlcnZpY2UuY2hlY2tJZlVzZXJFeGlzdHModm0ubmV3VXNlcm5hbWUpLnRoZW4oZnVuY3Rpb24odXNlckV4aXN0cykge1xuXG4gICAgICAgICAgICAgICAgdm0uc2hvd0R1cGxpY2F0ZVVzZXJFcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHZtLnNob3dFbWFpbFRha2VuRXJyb3IgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIGlmICh1c2VyRXhpc3RzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdm0uc2hvd0R1cGxpY2F0ZVVzZXJFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgICAgIC8vIFRyeSB0byBjcmVhdGUgdGhlIG5ldyB1c2VyLlxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYXV0aFNlcnZpY2UuY3JlYXRlTmV3VXNlcih2bS5uZXdFbWFpbCwgdm0ubmV3UGFzc3dvcmQsIHZtLm5ld1VzZXJuYW1lKS50aGVuKGZ1bmN0aW9uIHRoZW4obW9kZWwpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1vZGVsID09PSAnRU1BSUxfVEFLRU4nKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2bS5zaG93RW1haWxUYWtlbkVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobW9kZWwgPT09ICdBQ0NPVU5UX0NSRUFURUQnKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ3Byb2ZpbGUnLCB7dXNlcm5hbWU6IHZtLm5ld1VzZXJuYW1lfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG59KSgpOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==